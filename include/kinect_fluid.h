// generated by Fast Light User Interface Designer (fluid) version 2.1000

#ifndef kinect_fluid_h
#define kinect_fluid_h
# include "gsim/fl_viewer.h"
# include "kinect_events.h"
# include "hand_viewer.h"
# include "kinect_viewer.h"
# include "util_image_viewer.h"
#include <fltk/Window.h>
#include <fltk/TiledGroup.h>
#include <fltk/Group.h>
#include <fltk/MenuBar.h>
#include <fltk/Item.h>
#include <fltk/ItemGroup.h>
#include <fltk/TabGroup.h>
#include <fltk/Button.h>
#include <fltk/ValueInput.h>
#include <fltk/Input.h>
#include <fltk/CheckButton.h>
#include <fltk/RadioButton.h>
#include <fltk/ValueOutput.h>
#include <fltk/ProgressBar.h>
#include <fltk/Browser.h>
#include <fltk/ValueSlider.h>
#include <fltk/LightButton.h>
#include <fltk/Choice.h>
#include <fltk/Output.h>

class KinectFluid  {
public:
  virtual void event ( KinectEvent e )=0;
  KinectFluid();
  fltk::Window *ui_window;
      KinectViewer *ui_viewer;
      fltk::Group *ui_main_group;
private:
          inline void cb_X_i(fltk::Item*, void*);
          static void cb_X(fltk::Item*, void*);
            inline void cb_show_i(fltk::Item*, void*);
            static void cb_show(fltk::Item*, void*);
            inline void cb_refresh_i(fltk::Item*, void*);
            static void cb_refresh(fltk::Item*, void*);
            inline void cb_show1_i(fltk::Item*, void*);
            static void cb_show1(fltk::Item*, void*);
            inline void cb_show2_i(fltk::Item*, void*);
            static void cb_show2(fltk::Item*, void*);
            inline void cb_edit_i(fltk::Item*, void*);
            static void cb_edit(fltk::Item*, void*);
public:
          fltk::TabGroup *ui_main_tab;
private:
                inline void cb_save_i(fltk::Button*, void*);
                static void cb_save(fltk::Button*, void*);
public:
                fltk::ValueInput *ui_image_number;
                fltk::Input *ui_image_set_name;
                fltk::CheckButton *ui_stream_images;
                fltk::ValueInput *ui_image_w;
                fltk::ValueInput *ui_image_h;
                  fltk::RadioButton *ui_embed_jnt_angles;
                  fltk::RadioButton *ui_embed_pose_interp;
                  fltk::RadioButton *ui_embed_manual_val;
private:
                inline void cb_convert_i(fltk::Button*, void*);
                static void cb_convert(fltk::Button*, void*);
                inline void cb_text_i(fltk::Button*, void*);
                static void cb_text(fltk::Button*, void*);
public:
                fltk::ValueInput *ui_pose_number;
                fltk::CheckButton *ui_preserve_aspect_ratio;
              fltk::Input *ui_neural_net_cfg;
private:
              inline void cb_load_i(fltk::Button*, void*);
              static void cb_load(fltk::Button*, void*);
public:
              fltk::CheckButton *ui_stream_net_output;
              fltk::ValueOutput *ui_net_parms[5];
              fltk::ProgressBar *ui_net_output;
                fltk::Browser *ui_config_list;
private:
                inline void cb_ui_config_list_i(fltk::Browser*, void*);
                static void cb_ui_config_list(fltk::Browser*, void*);
                inline void cb_save1_i(fltk::Button*, void*);
                static void cb_save1(fltk::Button*, void*);
                inline void cb_capture_i(fltk::Button*, void*);
                static void cb_capture(fltk::Button*, void*);
public:
                fltk::ValueInput *ui_cloud_val;
private:
                inline void cb_check_i(fltk::Button*, void*);
                static void cb_check(fltk::Button*, void*);
public:
                fltk::Browser *ui_cloud_list;
private:
                inline void cb_ui_cloud_list_i(fltk::Browser*, void*);
                static void cb_ui_cloud_list(fltk::Browser*, void*);
                inline void cb_save2_i(fltk::Button*, void*);
                static void cb_save2(fltk::Button*, void*);
public:
                fltk::CheckButton *ui_rec_clouds;
private:
                inline void cb_ui_rec_clouds_i(fltk::CheckButton*, void*);
                static void cb_ui_rec_clouds(fltk::CheckButton*, void*);
                inline void cb_filter_i(fltk::Button*, void*);
                static void cb_filter(fltk::Button*, void*);
public:
                fltk::ValueInput *ui_sigd;
                fltk::ValueInput *ui_sigr;
                fltk::ValueInput *ui_hh;
                fltk::ValueInput *ui_hw;
                  fltk::CheckButton *ui_all_points;
private:
                  inline void cb_ui_all_points_i(fltk::CheckButton*, void*);
                  static void cb_ui_all_points(fltk::CheckButton*, void*);
public:
                  fltk::CheckButton *ui_use_color;
private:
                  inline void cb_ui_use_color_i(fltk::CheckButton*, void*);
                  static void cb_ui_use_color(fltk::CheckButton*, void*);
public:
                  fltk::CheckButton *ui_use_depth;
private:
                  inline void cb_ui_use_depth_i(fltk::CheckButton*, void*);
                  static void cb_ui_use_depth(fltk::CheckButton*, void*);
public:
                  fltk::CheckButton *ui_draw_mesh;
private:
                  inline void cb_ui_draw_mesh_i(fltk::CheckButton*, void*);
                  static void cb_ui_draw_mesh(fltk::CheckButton*, void*);
public:
                  fltk::CheckButton *ui_draw_markers;
private:
                  inline void cb_ui_draw_markers_i(fltk::CheckButton*, void*);
                  static void cb_ui_draw_markers(fltk::CheckButton*, void*);
public:
                  fltk::CheckButton *ui_draw_output;
private:
                  inline void cb_ui_draw_output_i(fltk::CheckButton*, void*);
                  static void cb_ui_draw_output(fltk::CheckButton*, void*);
public:
                  fltk::ValueSlider *ui_hand_var;
private:
                  inline void cb_ui_hand_var_i(fltk::ValueSlider*, void*);
                  static void cb_ui_hand_var(fltk::ValueSlider*, void*);
public:
                  fltk::ValueSlider *ui_hand_color_var;
private:
                  inline void cb_ui_hand_color_var_i(fltk::ValueSlider*, void*);
                  static void cb_ui_hand_color_var(fltk::ValueSlider*, void*);
public:
                  fltk::CheckButton *ui_hand_proximity;
private:
                  inline void cb_ui_hand_proximity_i(fltk::CheckButton*, void*);
                  static void cb_ui_hand_proximity(fltk::CheckButton*, void*);
public:
                  fltk::CheckButton *ui_hand_color_proximity;
private:
                  inline void cb_ui_hand_color_proximity_i(fltk::CheckButton*, void*);
                  static void cb_ui_hand_color_proximity(fltk::CheckButton*, void*);
                  inline void cb_ui_range_i(fltk::ValueSlider*, void*);
                  static void cb_ui_range(fltk::ValueSlider*, void*);
                  inline void cb_ui_range1_i(fltk::ValueSlider*, void*);
                  static void cb_ui_range1(fltk::ValueSlider*, void*);
public:
                  fltk::ValueSlider *ui_range[4];
private:
                  inline void cb_ui_range2_i(fltk::ValueSlider*, void*);
                  static void cb_ui_range2(fltk::ValueSlider*, void*);
public:
                  fltk::CheckButton *ui_use_clip_box;
private:
                  inline void cb_ui_use_clip_box_i(fltk::CheckButton*, void*);
                  static void cb_ui_use_clip_box(fltk::CheckButton*, void*);
public:
                  fltk::CheckButton *ui_clip_box_vis;
private:
                  inline void cb_ui_clip_box_vis_i(fltk::CheckButton*, void*);
                  static void cb_ui_clip_box_vis(fltk::CheckButton*, void*);
                  inline void cb_ui_range3_i(fltk::ValueSlider*, void*);
                  static void cb_ui_range3(fltk::ValueSlider*, void*);
public:
                  fltk::LightButton *ui_set_clip_box;
                  fltk::LightButton *ui_make_finger;
                  fltk::Browser *ui_marker_list;
private:
                  inline void cb_ui_marker_list_i(fltk::Browser*, void*);
                  static void cb_ui_marker_list(fltk::Browser*, void*);
public:
                  fltk::Choice *ui_marker_type;
private:
                  inline void cb_ui_marker_type_i(fltk::Choice*, void*);
                  static void cb_ui_marker_type(fltk::Choice*, void*);
public:
                  fltk::CheckButton *ui_track_colors;
private:
                  inline void cb_ui_track_colors_i(fltk::CheckButton*, void*);
                  static void cb_ui_track_colors(fltk::CheckButton*, void*);
                  inline void cb_del_i(fltk::Button*, void*);
                  static void cb_del(fltk::Button*, void*);
                  inline void cb_clear_i(fltk::Button*, void*);
                  static void cb_clear(fltk::Button*, void*);
                  inline void cb_cal_i(fltk::Button*, void*);
                  static void cb_cal(fltk::Button*, void*);
public:
                  fltk::ValueSlider *ui_color_variance;
                  fltk::ValueInput *ui_max_v;
                  fltk::ValueInput *ui_sample;
                  fltk::ValueInput *ui_finger_radius;
private:
                  inline void cb_ui_finger_radius_i(fltk::ValueInput*, void*);
                  static void cb_ui_finger_radius(fltk::ValueInput*, void*);
public:
              fltk::CheckButton *ui_fps;
              fltk::Output *ui_fps_label;
              fltk::Choice *ui_kinect_selected;
private:
              inline void cb_ui_kinect_i(fltk::ValueInput*, void*);
              static void cb_ui_kinect(fltk::ValueInput*, void*);
              inline void cb_ui_kinect1_i(fltk::ValueInput*, void*);
              static void cb_ui_kinect1(fltk::ValueInput*, void*);
              inline void cb_ui_kinect2_i(fltk::ValueInput*, void*);
              static void cb_ui_kinect2(fltk::ValueInput*, void*);
              inline void cb_ui_kinect3_i(fltk::ValueInput*, void*);
              static void cb_ui_kinect3(fltk::ValueInput*, void*);
              inline void cb_ui_kinect4_i(fltk::ValueInput*, void*);
              static void cb_ui_kinect4(fltk::ValueInput*, void*);
public:
              fltk::ValueInput *ui_kinect[6];
private:
              inline void cb_ui_kinect5_i(fltk::ValueInput*, void*);
              static void cb_ui_kinect5(fltk::ValueInput*, void*);
public:
                fltk::ValueSlider *ui_angle;
private:
                inline void cb_set_i(fltk::Button*, void*);
                static void cb_set(fltk::Button*, void*);
public:
          fltk::Group *ui_message;
        fltk::LightButton *ui_kinect_active;
private:
        inline void cb_ui_kinect_active_i(fltk::LightButton*, void*);
        static void cb_ui_kinect_active(fltk::LightButton*, void*);
public:
  fltk::Window *ui_hand_window;
      HandViewer *ui_hand_viewer;
private:
      inline void cb_make_i(fltk::Button*, void*);
      static void cb_make(fltk::Button*, void*);
      inline void cb_skel_i(fltk::Button*, void*);
      static void cb_skel(fltk::Button*, void*);
      inline void cb_delete_i(fltk::Button*, void*);
      static void cb_delete(fltk::Button*, void*);
      inline void cb_capture1_i(fltk::Button*, void*);
      static void cb_capture1(fltk::Button*, void*);
      inline void cb_save3_i(fltk::Button*, void*);
      static void cb_save3(fltk::Button*, void*);
      inline void cb_depth_i(fltk::Button*, void*);
      static void cb_depth(fltk::Button*, void*);
public:
  fltk::Window *ui_depth_window;
      ImageViewer *ui_real_depth_viewer;
      ImageViewer *ui_synth_depth_viewer;
      fltk::CheckButton *ui_kinect_stream;
      ImageViewer *ui_diff_viewer;
      fltk::CheckButton *ui_synth_stream;
      fltk::CheckButton *ui_diff_stream;
      fltk::ValueOutput *ui_diff_val;
      fltk::CheckButton *ui_kinect_image_scale;
      fltk::CheckButton *ui_diff_image_scale;
      fltk::CheckButton *ui_check_stream;
      fltk::CheckButton *ui_kinect_image_filter;
    fltk::CheckButton *ui_synth_image_scale;
};
#endif
