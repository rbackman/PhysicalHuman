// generated by Fast Light User Interface Designer (fluid) version 2.1000

#ifndef neural_net_fluid_h
#define neural_net_fluid_h
# include "gsim/fl_viewer.h"
# include "neural_net_events.h"
# include "util_image_viewer.h"
#include <fltk/Window.h>
#include <fltk/TiledGroup.h>
#include <fltk/Group.h>
#include <fltk/MenuBar.h>
#include <fltk/Item.h>
#include <fltk/ItemGroup.h>
#include <fltk/TabGroup.h>
#include <fltk/ValueOutput.h>
#include <fltk/ValueInput.h>
#include <fltk/Input.h>
#include <fltk/Button.h>
#include <fltk/CheckButton.h>
#include <fltk/Choice.h>

class NeuralNetFluid  {
public:
  virtual void event ( NeuralNetEvent e )=0;
  NeuralNetFluid();
  fltk::Window *ui_window;
      fltk::Group *ui_main_group;
private:
          inline void cb_X_i(fltk::Item*, void*);
          static void cb_X(fltk::Item*, void*);
            inline void cb_save_i(fltk::Item*, void*);
            static void cb_save(fltk::Item*, void*);
public:
          fltk::TabGroup *ui_main_tab;
              fltk::ValueOutput *ui_dim_in;
              fltk::ValueOutput *ui_dim_hid;
              fltk::ValueOutput *ui_dim_out;
              fltk::ValueInput *ui_learning_rate;
private:
              inline void cb_ui_learning_rate_i(fltk::ValueInput*, void*);
              static void cb_ui_learning_rate(fltk::ValueInput*, void*);
public:
              fltk::ValueInput *ui_momentum;
private:
              inline void cb_ui_momentum_i(fltk::ValueInput*, void*);
              static void cb_ui_momentum(fltk::ValueInput*, void*);
public:
              fltk::ValueInput *ui_weight_decay;
private:
              inline void cb_ui_weight_decay_i(fltk::ValueInput*, void*);
              static void cb_ui_weight_decay(fltk::ValueInput*, void*);
public:
              fltk::ValueOutput *ui_sse;
              fltk::Input *ui_net_data_dir;
              fltk::ValueInput *ui_num_epoch;
              fltk::ValueInput *ui_make[4];
private:
              inline void cb_make_i(fltk::Button*, void*);
              static void cb_make(fltk::Button*, void*);
public:
              fltk::ValueOutput *ui_n_train;
              fltk::ValueOutput *ui_dim_in_w;
              fltk::ValueOutput *ui_dim_in_h;
              fltk::Input *ui_net_cfg;
          fltk::Group *ui_message;
      ImageViewer *ui_hidden_weights;
      ImageViewer *ui_output_weights;
      fltk::CheckButton *ui_scale_images;
private:
      inline void cb_update_i(fltk::Button*, void*);
      static void cb_update(fltk::Button*, void*);
public:
      fltk::Choice *ui_display_choice;
private:
      inline void cb_train_i(fltk::Button*, void*);
      static void cb_train(fltk::Button*, void*);
      inline void cb_test_i(fltk::Button*, void*);
      static void cb_test(fltk::Button*, void*);
      inline void cb_stop_i(fltk::Button*, void*);
      static void cb_stop(fltk::Button*, void*);
      inline void cb_load_i(fltk::Button*, void*);
      static void cb_load(fltk::Button*, void*);
      inline void cb_load1_i(fltk::Button*, void*);
      static void cb_load1(fltk::Button*, void*);
      inline void cb_rand_i(fltk::Button*, void*);
      static void cb_rand(fltk::Button*, void*);
      inline void cb_noise_i(fltk::Button*, void*);
      static void cb_noise(fltk::Button*, void*);
public:
      fltk::ValueInput *ui_noise_seeds;
      fltk::Input *ui_net_test_data_dir;
private:
      inline void cb_load2_i(fltk::Button*, void*);
      static void cb_load2(fltk::Button*, void*);
};
#endif
