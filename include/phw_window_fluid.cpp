// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "phw_window_fluid.h"

inline void HumanWindowFluid::cb_ui_ode_run_i(fltk::LightButton*, void*) {
  event(evRunOde);
}
void HumanWindowFluid::cb_ui_ode_run(fltk::LightButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_ode_run_i(o,v);
}

inline void HumanWindowFluid::cb_X_i(fltk::Item*, void*) {
  event ( evQuit );
}
void HumanWindowFluid::cb_X(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_X_i(o,v);
}

inline void HumanWindowFluid::cb_save_i(fltk::Item*, void*) {
  event(evSaveCurrentScene);
}
void HumanWindowFluid::cb_save(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save_i(o,v);
}

inline void HumanWindowFluid::cb_save1_i(fltk::Item*, void*) {
  event(evSaveNewScene);
}
void HumanWindowFluid::cb_save1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save1_i(o,v);
}

inline void HumanWindowFluid::cb_everything_i(fltk::Item*, void*) {
  event(evSaveAllMotions);
}
void HumanWindowFluid::cb_everything(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_everything_i(o,v);
}

inline void HumanWindowFluid::cb_new_i(fltk::Item*, void*) {
  event(evNewController);
}
void HumanWindowFluid::cb_new(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_new_i(o,v);
}

inline void HumanWindowFluid::cb_new1_i(fltk::Item*, void*) {
  event(evSaveMotion);
}
void HumanWindowFluid::cb_new1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_new1_i(o,v);
}

inline void HumanWindowFluid::cb_current_i(fltk::Item*, void*) {
  event(evSaveEditingMotions);
}
void HumanWindowFluid::cb_current(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_current_i(o,v);
}

inline void HumanWindowFluid::cb_bounds_i(fltk::Item*, void*) {
  event(evSaveBounds);
}
void HumanWindowFluid::cb_bounds(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_bounds_i(o,v);
}

inline void HumanWindowFluid::cb_base_i(fltk::Item*, void*) {
  event(evSaveBaseMotionFile);
}
void HumanWindowFluid::cb_base(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_base_i(o,v);
}

inline void HumanWindowFluid::cb_motion_i(fltk::Item*, void*) {
  event(evSaveWithParmNames);
}
void HumanWindowFluid::cb_motion(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_motion_i(o,v);
}

inline void HumanWindowFluid::cb_set_i(fltk::Item*, void*) {
  event(evSaveWithParmNames);
}
void HumanWindowFluid::cb_set(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set_i(o,v);
}

inline void HumanWindowFluid::cb_load_i(fltk::Item*, void*) {
  event(evLoadSkeleton);
}
void HumanWindowFluid::cb_load(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_load_i(o,v);
}

inline void HumanWindowFluid::cb_connect_i(fltk::Item*, void*) {
  event(evConnectKinect);
}
void HumanWindowFluid::cb_connect(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_connect_i(o,v);
}

inline void HumanWindowFluid::cb_human_i(fltk::Item*, void*) {
  event(evLoadHumanEditor);
}
void HumanWindowFluid::cb_human(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_human_i(o,v);
}

inline void HumanWindowFluid::cb_Files_i(fltk::Item*, void*) {
  event(evLoadFileManagerEditor);
}
void HumanWindowFluid::cb_Files(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Files_i(o,v);
}

inline void HumanWindowFluid::cb_ODE_i(fltk::Item*, void*) {
  event(evLoadODEWorldEditor);
}
void HumanWindowFluid::cb_ODE(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ODE_i(o,v);
}

inline void HumanWindowFluid::cb_Viewer_i(fltk::Item*, void*) {
  event(evLoadViewerEditor);
}
void HumanWindowFluid::cb_Viewer(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Viewer_i(o,v);
}

inline void HumanWindowFluid::cb_Motion_i(fltk::Item*, void*) {
  event(evLoadMotionManagerEditor);
}
void HumanWindowFluid::cb_Motion(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Motion_i(o,v);
}

inline void HumanWindowFluid::cb_Graph_i(fltk::Item*, void*) {
  event(evLoadGraphViewerEditor);
}
void HumanWindowFluid::cb_Graph(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Graph_i(o,v);
}

inline void HumanWindowFluid::cb_Planner_i(fltk::Item*, void*) {
  event(evLoadPlanEditor);
}
void HumanWindowFluid::cb_Planner(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Planner_i(o,v);
}

inline void HumanWindowFluid::cb_manager_i(fltk::Item*, void*) {
  event(evLoadManagerEditor);
}
void HumanWindowFluid::cb_manager(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_manager_i(o,v);
}

inline void HumanWindowFluid::cb_edit_i(fltk::Item*, void*) {
  event(evEditController);
}
void HumanWindowFluid::cb_edit(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit_i(o,v);
}

inline void HumanWindowFluid::cb_set1_i(fltk::Item*, void*) {
  event(evSetControllerScene);
}
void HumanWindowFluid::cb_set1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set1_i(o,v);
}

inline void HumanWindowFluid::cb_remove_i(fltk::Item*, void*) {
  event(evRemoveMotion);
}
void HumanWindowFluid::cb_remove(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_remove_i(o,v);
}

inline void HumanWindowFluid::cb_set2_i(fltk::Item*, void*) {
  event(evSetControllerInitialState);
}
void HumanWindowFluid::cb_set2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set2_i(o,v);
}

inline void HumanWindowFluid::cb_edit1_i(fltk::Item*, void*) {
  event(evEditMotion);
}
void HumanWindowFluid::cb_edit1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit1_i(o,v);
}

inline void HumanWindowFluid::cb_randomize_i(fltk::Item*, void*) {
  event(evRandomize);
}
void HumanWindowFluid::cb_randomize(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_randomize_i(o,v);
}

inline void HumanWindowFluid::cb_reset_i(fltk::Item*, void*) {
  event(evResetParms);
}
void HumanWindowFluid::cb_reset(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reset_i(o,v);
}

inline void HumanWindowFluid::cb_force_i(fltk::Item*, void*) {
  event(evForceKeys);
}
void HumanWindowFluid::cb_force(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_force_i(o,v);
}

inline void HumanWindowFluid::cb_reconfigure_i(fltk::Item*, void*) {
  event(evConfigureBounds);
}
void HumanWindowFluid::cb_reconfigure(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reconfigure_i(o,v);
}

inline void HumanWindowFluid::cb_make_i(fltk::Item*, void*) {
  event(evMakeLocalSample);
}
void HumanWindowFluid::cb_make(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make_i(o,v);
}

inline void HumanWindowFluid::cb_reduce_i(fltk::Item*, void*) {
  event(evReduceMotionEnv);
}
void HumanWindowFluid::cb_reduce(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reduce_i(o,v);
}

inline void HumanWindowFluid::cb_add_i(fltk::Item*, void*) {
  event(evAddEnv);
}
void HumanWindowFluid::cb_add(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_add_i(o,v);
}

inline void HumanWindowFluid::cb_expand_i(fltk::Item*, void*) {
  event(evExpandEnv);
}
void HumanWindowFluid::cb_expand(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_expand_i(o,v);
}

inline void HumanWindowFluid::cb_load1_i(fltk::Item*, void*) {
  event(evMotionEnv);
}
void HumanWindowFluid::cb_load1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_load1_i(o,v);
}

inline void HumanWindowFluid::cb_switch_i(fltk::Item*, void*) {
  event(evSwitchStance);
}
void HumanWindowFluid::cb_switch(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_switch_i(o,v);
}

inline void HumanWindowFluid::cb_segment_i(fltk::Item*, void*) {
  event(evSegmentMotion);
}
void HumanWindowFluid::cb_segment(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_segment_i(o,v);
}

inline void HumanWindowFluid::cb_make1_i(fltk::Item*, void*) {
  event(evOpenCompositeWindow);
}
void HumanWindowFluid::cb_make1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make1_i(o,v);
}

inline void HumanWindowFluid::cb_make2_i(fltk::Item*, void*) {
  event(evMakeTimeWarp);
}
void HumanWindowFluid::cb_make2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make2_i(o,v);
}

inline void HumanWindowFluid::cb_scale_i(fltk::Item*, void*) {
  event(evScaleMotion);
}
void HumanWindowFluid::cb_scale(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_scale_i(o,v);
}

inline void HumanWindowFluid::cb_capture_i(fltk::Item*, void*) {
  event(evMotionCaptureState);
}
void HumanWindowFluid::cb_capture(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_capture_i(o,v);
}

inline void HumanWindowFluid::cb_generalize_i(fltk::Item*, void*) {
  event(evGeneralizeMotion);
}
void HumanWindowFluid::cb_generalize(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_generalize_i(o,v);
}

inline void HumanWindowFluid::cb_explore_i(fltk::Item*, void*) {
  event(evPlanStart);
}
void HumanWindowFluid::cb_explore(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_explore_i(o,v);
}

inline void HumanWindowFluid::cb_expand1_i(fltk::Item*, void*) {
  event(evStartExpandingEnv);
}
void HumanWindowFluid::cb_expand1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_expand1_i(o,v);
}

inline void HumanWindowFluid::cb_stop_i(fltk::Item*, void*) {
  event(evPlanStop);
}
void HumanWindowFluid::cb_stop(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_stop_i(o,v);
}

inline void HumanWindowFluid::cb_analyze_i(fltk::Item*, void*) {
  event(evAnalyzeMotion);
}
void HumanWindowFluid::cb_analyze(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_analyze_i(o,v);
}

inline void HumanWindowFluid::cb_verify_i(fltk::Item*, void*) {
  event(evVerifyMotion);
}
void HumanWindowFluid::cb_verify(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_verify_i(o,v);
}

inline void HumanWindowFluid::cb_reanalyze_i(fltk::Item*, void*) {
  event(evReanalyzeMotions);
}
void HumanWindowFluid::cb_reanalyze(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reanalyze_i(o,v);
}

inline void HumanWindowFluid::cb_set3_i(fltk::Item*, void*) {
  event(evSetFromEnvDesc);
}
void HumanWindowFluid::cb_set3(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set3_i(o,v);
}

inline void HumanWindowFluid::cb_set4_i(fltk::Item*, void*) {
  event(evSetEnvDescFromAnalysis);
}
void HumanWindowFluid::cb_set4(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set4_i(o,v);
}

inline void HumanWindowFluid::cb_remove1_i(fltk::Item*, void*) {
  event(evRemoveDuplicates);
}
void HumanWindowFluid::cb_remove1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_remove1_i(o,v);
}

inline void HumanWindowFluid::cb_update_i(fltk::Item*, void*) {
  event(evUpdateAllLines);
}
void HumanWindowFluid::cb_update(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_update_i(o,v);
}

inline void HumanWindowFluid::cb_select_i(fltk::Item*, void*) {
  event(evGoalSelectMode);
}
void HumanWindowFluid::cb_select(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_select_i(o,v);
}

inline void HumanWindowFluid::cb_start_i(fltk::Item*, void*) {
  event(evStartExpandingCurrent);
}
void HumanWindowFluid::cb_start(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_start_i(o,v);
}

inline void HumanWindowFluid::cb_refresh_i(fltk::Item*, void*) {
  event(evRefreshChannels);
}
void HumanWindowFluid::cb_refresh(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_refresh_i(o,v);
}

inline void HumanWindowFluid::cb_delete_i(fltk::Item*, void*) {
  event(evDeleteChannels);
}
void HumanWindowFluid::cb_delete(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_delete_i(o,v);
}

inline void HumanWindowFluid::cb_rename_i(fltk::Item*, void*) {
  event(evChannelRename);
}
void HumanWindowFluid::cb_rename(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_rename_i(o,v);
}

inline void HumanWindowFluid::cb_init_i(fltk::Item*, void*) {
  event(evInitCurves);
}
void HumanWindowFluid::cb_init(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_init_i(o,v);
}

inline void HumanWindowFluid::cb_set5_i(fltk::Item*, void*) {
  event(evGraphWinKey);
}
void HumanWindowFluid::cb_set5(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set5_i(o,v);
}

inline void HumanWindowFluid::cb_edit2_i(fltk::Item*, void*) {
  event(evEditChannel);
}
void HumanWindowFluid::cb_edit2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit2_i(o,v);
}

inline void HumanWindowFluid::cb_merge_i(fltk::Item*, void*) {
  event(evMergePoints);
}
void HumanWindowFluid::cb_merge(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_merge_i(o,v);
}

inline void HumanWindowFluid::cb_reduce1_i(fltk::Item*, void*) {
  event(evCurveFit);
}
void HumanWindowFluid::cb_reduce1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reduce1_i(o,v);
}

inline void HumanWindowFluid::cb_Linear_i(fltk::Item*, void*) {
  event(evMakeLinear);
}
void HumanWindowFluid::cb_Linear(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Linear_i(o,v);
}

inline void HumanWindowFluid::cb_Bezier_i(fltk::Item*, void*) {
  event(evMakeBezier);
}
void HumanWindowFluid::cb_Bezier(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Bezier_i(o,v);
}

inline void HumanWindowFluid::cb_Step_i(fltk::Item*, void*) {
  event(evMakeStep);
}
void HumanWindowFluid::cb_Step(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Step_i(o,v);
}

inline void HumanWindowFluid::cb_make3_i(fltk::Item*, void*) {
  event(evMakeChannelAdditive);
}
void HumanWindowFluid::cb_make3(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make3_i(o,v);
}

inline void HumanWindowFluid::cb_make4_i(fltk::Item*, void*) {
  event(evMakeChannelScale);
}
void HumanWindowFluid::cb_make4(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make4_i(o,v);
}

inline void HumanWindowFluid::cb_make5_i(fltk::Item*, void*) {
  event(evMakeChannelEvent);
}
void HumanWindowFluid::cb_make5(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make5_i(o,v);
}

inline void HumanWindowFluid::cb_make6_i(fltk::Item*, void*) {
  event(evMakeChannelIdler);
}
void HumanWindowFluid::cb_make6(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make6_i(o,v);
}

inline void HumanWindowFluid::cb_make7_i(fltk::Item*, void*) {
  event(evMakeChannelInverse);
}
void HumanWindowFluid::cb_make7(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make7_i(o,v);
}

inline void HumanWindowFluid::cb_make8_i(fltk::Item*, void*) {
  event(evMakeChannelFeedback);
}
void HumanWindowFluid::cb_make8(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make8_i(o,v);
}

inline void HumanWindowFluid::cb_add1_i(fltk::Item*, void*) {
  event(evAddControlChannel);
}
void HumanWindowFluid::cb_add1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_add1_i(o,v);
}

inline void HumanWindowFluid::cb_Drop_i(fltk::Item*, void*) {
  event(evDropBalls);
}
void HumanWindowFluid::cb_Drop(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Drop_i(o,v);
}

inline void HumanWindowFluid::cb_Reset_i(fltk::Item*, void*) {
  event(evOdeReset);
}
void HumanWindowFluid::cb_Reset(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Reset_i(o,v);
}

inline void HumanWindowFluid::cb_show_i(fltk::Item*, void*) {
  event(evShowMotionOutputs);
}
void HumanWindowFluid::cb_show(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_show_i(o,v);
}

inline void HumanWindowFluid::cb_show1_i(fltk::Item*, void*) {
  event(evShowMotionEnv);
}
void HumanWindowFluid::cb_show1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_show1_i(o,v);
}

inline void HumanWindowFluid::cb_hide_i(fltk::Item*, void*) {
  event(evHideMotionEnv);
}
void HumanWindowFluid::cb_hide(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_hide_i(o,v);
}

inline void HumanWindowFluid::cb_show2_i(fltk::Item*, void*) {
  event(evShowAllMotionEnv);
}
void HumanWindowFluid::cb_show2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_show2_i(o,v);
}

inline void HumanWindowFluid::cb_view_i(fltk::Item*, void*) {
  event(evViewCharacter);
}
void HumanWindowFluid::cb_view(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_view_i(o,v);
}

inline void HumanWindowFluid::cb_camera_i(fltk::Item*, void*) {
  event(evToggleCameraFollow);
}
void HumanWindowFluid::cb_camera(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_camera_i(o,v);
}

inline void HumanWindowFluid::cb_human1_i(fltk::Item*, void*) {
  event(evToggleHumanDraw);
}
void HumanWindowFluid::cb_human1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_human1_i(o,v);
}

inline void HumanWindowFluid::cb_visualization_i(fltk::Item*, void*) {
  event(evToggleVis);
}
void HumanWindowFluid::cb_visualization(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_visualization_i(o,v);
}

inline void HumanWindowFluid::cb_collision_i(fltk::Item*, void*) {
  event(evToggleCollisionDraw);
}
void HumanWindowFluid::cb_collision(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_collision_i(o,v);
}

inline void HumanWindowFluid::cb_heading_i(fltk::Item*, void*) {
  event(evToggleHeadingDraw);
}
void HumanWindowFluid::cb_heading(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_heading_i(o,v);
}

inline void HumanWindowFluid::cb_skeleton_i(fltk::Item*, void*) {
  event(evToggleSkeletonDraw);
}
void HumanWindowFluid::cb_skeleton(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_skeleton_i(o,v);
}

inline void HumanWindowFluid::cb_axis_i(fltk::Item*, void*) {
  event(evToggleSkeletonAxis);
}
void HumanWindowFluid::cb_axis(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_axis_i(o,v);
}

inline void HumanWindowFluid::cb_trajectories_i(fltk::Item*, void*) {
  event(evDrawMotion);
}
void HumanWindowFluid::cb_trajectories(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_trajectories_i(o,v);
}

inline void HumanWindowFluid::cb_original_i(fltk::Item*, void*) {
  event(evDrawOriginalMotion);
}
void HumanWindowFluid::cb_original(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_original_i(o,v);
}

inline void HumanWindowFluid::cb_snapshots_i(fltk::Item*, void*) {
  event(evDrawSnapShots);
}
void HumanWindowFluid::cb_snapshots(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_snapshots_i(o,v);
}

inline void HumanWindowFluid::cb_reset1_i(fltk::Item*, void*) {
  event(evResetView);
}
void HumanWindowFluid::cb_reset1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reset1_i(o,v);
}

inline void HumanWindowFluid::cb_fit_i(fltk::Item*, void*) {
  event(evFitView);
}
void HumanWindowFluid::cb_fit(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_fit_i(o,v);
}

inline void HumanWindowFluid::cb_bounds1_i(fltk::Item*, void*) {
  event(evToggleBounds);
}
void HumanWindowFluid::cb_bounds1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_bounds1_i(o,v);
}

inline void HumanWindowFluid::cb_override_i(fltk::Item*, void*) {
  event(evOverrideCurveLook);
}
void HumanWindowFluid::cb_override(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_override_i(o,v);
}

inline void HumanWindowFluid::cb_show3_i(fltk::Item*, void*) {
  event(evShowSampleBounds);
}
void HumanWindowFluid::cb_show3(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_show3_i(o,v);
}

inline void HumanWindowFluid::cb_motion1_i(fltk::Item*, void*) {
  event(evMotionEditWindow);
}
void HumanWindowFluid::cb_motion1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_motion1_i(o,v);
}

inline void HumanWindowFluid::cb_interpolate_i(fltk::Item*, void*) {
  event(evInterpMotion);
}
void HumanWindowFluid::cb_interpolate(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_interpolate_i(o,v);
}

inline void HumanWindowFluid::cb_node_i(fltk::Item*, void*) {
  event(evDrawNodes);
}
void HumanWindowFluid::cb_node(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_node_i(o,v);
}

inline void HumanWindowFluid::cb_skel_i(fltk::Item*, void*) {
  event(evSkelWin);
}
void HumanWindowFluid::cb_skel(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_skel_i(o,v);
}

inline void HumanWindowFluid::cb_save2_i(fltk::Item*, void*) {
  event(evSaveDepthBuffer);
}
void HumanWindowFluid::cb_save2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save2_i(o,v);
}

inline void HumanWindowFluid::cb_make9_i(fltk::Item*, void*) {
  event(evMakePointCloud);
}
void HumanWindowFluid::cb_make9(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make9_i(o,v);
}

inline void HumanWindowFluid::cb_Print_i(fltk::Item*, void*) {
  event(evPrintMotion);
}
void HumanWindowFluid::cb_Print(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Print_i(o,v);
}

inline void HumanWindowFluid::cb_Print1_i(fltk::Item*, void*) {
  event(evPrintMotionDescriptors);
}
void HumanWindowFluid::cb_Print1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Print1_i(o,v);
}

inline void HumanWindowFluid::cb_Print2_i(fltk::Item*, void*) {
  event(evPrintState);
}
void HumanWindowFluid::cb_Print2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Print2_i(o,v);
}

inline void HumanWindowFluid::cb_Step1_i(fltk::Button*, void*) {
  event(evStepOde);
}
void HumanWindowFluid::cb_Step1(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Step1_i(o,v);
}

inline void HumanWindowFluid::cb_Reset1_i(fltk::Button*, void*) {
  event(evResetState);
}
void HumanWindowFluid::cb_Reset1(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Reset1_i(o,v);
}

inline void HumanWindowFluid::cb_play_i(fltk::Button*, void*) {
  event(evMotionPlay);
}
void HumanWindowFluid::cb_play(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_play_i(o,v);
}

inline void HumanWindowFluid::cb_ui_scene_browser_i(fltk::Browser*, void*) {
  event(evSceneBrowse);
}
void HumanWindowFluid::cb_ui_scene_browser(fltk::Browser* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_scene_browser_i(o,v);
}

inline void HumanWindowFluid::cb_load2_i(fltk::Button*, void*) {
  event(evSceneBrowse);
}
void HumanWindowFluid::cb_load2(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_load2_i(o,v);
}

inline void HumanWindowFluid::cb_cont_i(fltk::Button*, void*) {
  event(evSetControllerScene);
}
void HumanWindowFluid::cb_cont(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_cont_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_size_i(fltk::ValueSlider*, void*) {
  event(evEnvResize);
}
void HumanWindowFluid::cb_ui_env_size(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_env_size_i(o,v);
}

inline void HumanWindowFluid::cb_create_i(fltk::Button*, void*) {
  event(evEnvMake);
}
void HumanWindowFluid::cb_create(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_create_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_size1_i(fltk::ValueSlider*, void*) {
  event(evEnvResize);
}
void HumanWindowFluid::cb_ui_env_size1(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_env_size1_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_size2_i(fltk::ValueSlider*, void*) {
  event(evEnvResize);
}
void HumanWindowFluid::cb_ui_env_size2(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_env_size2_i(o,v);
}

inline void HumanWindowFluid::cb_edit3_i(fltk::Button*, void*) {
  event(evEnvEdit);
}
void HumanWindowFluid::cb_edit3(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit3_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_mu_i(fltk::ValueSlider*, void*) {
  event(evEnvResize);
}
void HumanWindowFluid::cb_ui_env_mu(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_env_mu_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_bounce_i(fltk::ValueSlider*, void*) {
  event(evEnvResize);
}
void HumanWindowFluid::cb_ui_env_bounce(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_env_bounce_i(o,v);
}

inline void HumanWindowFluid::cb_duplicate_i(fltk::Button*, void*) {
  event(evEnvDuplicate);
}
void HumanWindowFluid::cb_duplicate(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_duplicate_i(o,v);
}

inline void HumanWindowFluid::cb_add2_i(fltk::Button*, void*) {
  event(evEnvAddBlock);
}
void HumanWindowFluid::cb_add2(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_add2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_dynamic_i(fltk::CheckButton*, void*) {
  event(evEnvResize);
}
void HumanWindowFluid::cb_ui_env_dynamic(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_env_dynamic_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_density_i(fltk::ValueSlider*, void*) {
  event(evEnvResize);
}
void HumanWindowFluid::cb_ui_env_density(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_env_density_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_unique_i(fltk::CheckButton*, void*) {
  event(evEnvResize);
}
void HumanWindowFluid::cb_ui_env_unique(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_env_unique_i(o,v);
}

inline void HumanWindowFluid::cb_ui_character_list_i(fltk::Browser*, void*) {
  event(evCharacterListSelected);
}
void HumanWindowFluid::cb_ui_character_list(fltk::Browser* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_character_list_i(o,v);
}

inline void HumanWindowFluid::cb_save3_i(fltk::Button*, void*) {
  event(evSaveConfig);
}
void HumanWindowFluid::cb_save3(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save3_i(o,v);
}

inline void HumanWindowFluid::cb_load3_i(fltk::Button*, void*) {
  event(evLoadCharacter);
}
void HumanWindowFluid::cb_load3(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_load3_i(o,v);
}

inline void HumanWindowFluid::cb_delete1_i(fltk::Button*, void*) {
  event(evDeleteConfig);
}
void HumanWindowFluid::cb_delete1(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_delete1_i(o,v);
}

inline void HumanWindowFluid::cb_new2_i(fltk::Button*, void*) {
  event(evNewConfig);
}
void HumanWindowFluid::cb_new2(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_new2_i(o,v);
}

inline void HumanWindowFluid::cb_edit4_i(fltk::Button*, void*) {
  event(evEditConfig);
}
void HumanWindowFluid::cb_edit4(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit4_i(o,v);
}

inline void HumanWindowFluid::cb_create1_i(fltk::Button*, void*) {
  event(evCreateConfig);
}
void HumanWindowFluid::cb_create1(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_create1_i(o,v);
}

inline void HumanWindowFluid::cb_clear_i(fltk::Button*, void*) {
  event(evClearCharacters);
}
void HumanWindowFluid::cb_clear(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_clear_i(o,v);
}

inline void HumanWindowFluid::cb_ui_state_browser_i(fltk::Browser*, void*) {
  event(evStateListSelected);
}
void HumanWindowFluid::cb_ui_state_browser(fltk::Browser* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_state_browser_i(o,v);
}

inline void HumanWindowFluid::cb_new3_i(fltk::Item*, void*) {
  event(evStateNew);
}
void HumanWindowFluid::cb_new3(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_new3_i(o,v);
}

inline void HumanWindowFluid::cb_capture1_i(fltk::Item*, void*) {
  event(evStateCapture);
}
void HumanWindowFluid::cb_capture1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_capture1_i(o,v);
}

inline void HumanWindowFluid::cb_reload_i(fltk::Item*, void*) {
  event(evStateReload);
}
void HumanWindowFluid::cb_reload(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reload_i(o,v);
}

inline void HumanWindowFluid::cb_save4_i(fltk::Item*, void*) {
  event(evSaveState);
}
void HumanWindowFluid::cb_save4(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save4_i(o,v);
}

inline void HumanWindowFluid::cb_delete2_i(fltk::Item*, void*) {
  event(evDeleteState);
}
void HumanWindowFluid::cb_delete2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_delete2_i(o,v);
}

inline void HumanWindowFluid::cb_snapshot_i(fltk::Item*, void*) {
  event(evStateSnapshot);
}
void HumanWindowFluid::cb_snapshot(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_snapshot_i(o,v);
}

inline void HumanWindowFluid::cb_rename1_i(fltk::Item*, void*) {
  event(evStateRename);
}
void HumanWindowFluid::cb_rename1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_rename1_i(o,v);
}

inline void HumanWindowFluid::cb_move_i(fltk::Item*, void*) {
  event(evMovePoint);
}
void HumanWindowFluid::cb_move(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_move_i(o,v);
}

inline void HumanWindowFluid::cb_add3_i(fltk::Item*, void*) {
  event(evAddPoint);
}
void HumanWindowFluid::cb_add3(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_add3_i(o,v);
}

inline void HumanWindowFluid::cb_delete3_i(fltk::Item*, void*) {
  event(evDeletePoint);
}
void HumanWindowFluid::cb_delete3(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_delete3_i(o,v);
}

inline void HumanWindowFluid::cb_free_i(fltk::Item*, void*) {
  event(evFreePoint);
}
void HumanWindowFluid::cb_free(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_free_i(o,v);
}

inline void HumanWindowFluid::cb_straighten_i(fltk::Item*, void*) {
  event(evStraightenPoint);
}
void HumanWindowFluid::cb_straighten(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_straighten_i(o,v);
}

inline void HumanWindowFluid::cb_flatten_i(fltk::Item*, void*) {
  event(evFlattenPoint);
}
void HumanWindowFluid::cb_flatten(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_flatten_i(o,v);
}

inline void HumanWindowFluid::cb_edit5_i(fltk::Item*, void*) {
  event(evEditBounds);
}
void HumanWindowFluid::cb_edit5(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit5_i(o,v);
}

inline void HumanWindowFluid::cb_ui_graph_phase_i(fltk::Slider*, void*) {
  event(evPhaseSlider);
}
void HumanWindowFluid::cb_ui_graph_phase(fltk::Slider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_graph_phase_i(o,v);
}

inline void HumanWindowFluid::cb_ui_current_frame_i(fltk::ValueInput*, void*) {
  event(evTimeEdit);
}
void HumanWindowFluid::cb_ui_current_frame(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_current_frame_i(o,v);
}

inline void HumanWindowFluid::cb_ui_curve_pt_i(fltk::ValueInput*, void*) {
  event(evPointEdit);
}
void HumanWindowFluid::cb_ui_curve_pt(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_curve_pt_i(o,v);
}

inline void HumanWindowFluid::cb_ui_curve_pt1_i(fltk::ValueInput*, void*) {
  event(evPointEdit);
}
void HumanWindowFluid::cb_ui_curve_pt1(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_curve_pt1_i(o,v);
}

inline void HumanWindowFluid::cb__i(fltk::Button*, void*) {
  event(evNextPoint);
}
void HumanWindowFluid::cb_(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

inline void HumanWindowFluid::cb_ui_last_time_i(fltk::ValueInput*, void*) {
  event(evTimeEdit);
}
void HumanWindowFluid::cb_ui_last_time(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_last_time_i(o,v);
}

inline void HumanWindowFluid::cb_ui_first_time_i(fltk::ValueInput*, void*) {
  event(evTimeEdit);
}
void HumanWindowFluid::cb_ui_first_time(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_first_time_i(o,v);
}

inline void HumanWindowFluid::cb_ui_current_time_i(fltk::ValueInput*, void*) {
  event(evTimeEdit);
}
void HumanWindowFluid::cb_ui_current_time(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_current_time_i(o,v);
}

inline void HumanWindowFluid::cb_ui_show_time_i(fltk::CheckButton*, void*) {
  if(ui_show_time->value())
  {
  ui_time_group->show();
  ui_frame_group->hide();
  ui_show_time->label("time");
  }
  else
  {
  ui_time_group->hide();
  ui_frame_group->show();
  ui_show_time->label("frames");
  }
;}
void HumanWindowFluid::cb_ui_show_time(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_show_time_i(o,v);
}

inline void HumanWindowFluid::cb_ui_motionList_i(fltk::Browser*, void*) {
  event(evMotionSel);
}
void HumanWindowFluid::cb_ui_motionList(fltk::Browser* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_motionList_i(o,v);
}

inline void HumanWindowFluid::cb_reload1_i(fltk::Button*, void*) {
  event(evReloadController);
}
void HumanWindowFluid::cb_reload1(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reload1_i(o,v);
}

inline void HumanWindowFluid::cb_new4_i(fltk::Button*, void*) {
  event(evNewController);
}
void HumanWindowFluid::cb_new4(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_new4_i(o,v);
}

inline void HumanWindowFluid::cb_delete4_i(fltk::Button*, void*) {
  event(evDeleteMotion);
}
void HumanWindowFluid::cb_delete4(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_delete4_i(o,v);
}

inline void HumanWindowFluid::cb_ui_kn_motion_list_i(fltk::Browser*, void*) {
  event(evKnMotionListSelected);
}
void HumanWindowFluid::cb_ui_kn_motion_list(fltk::Browser* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_kn_motion_list_i(o,v);
}

inline void HumanWindowFluid::cb_mirror_i(fltk::Button*, void*) {
  event(evMirrorSegment);
}
void HumanWindowFluid::cb_mirror(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_mirror_i(o,v);
}

inline void HumanWindowFluid::cb_trans_i(fltk::Button*, void*) {
  event(evTranslateSegment);
}
void HumanWindowFluid::cb_trans(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_trans_i(o,v);
}

inline void HumanWindowFluid::cb_orient_i(fltk::Button*, void*) {
  event(evOrientSegment);
}
void HumanWindowFluid::cb_orient(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_orient_i(o,v);
}

inline void HumanWindowFluid::cb_composite_i(fltk::Button*, void*) {
  event(evOpenCompositeWindow);
}
void HumanWindowFluid::cb_composite(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_composite_i(o,v);
}

inline void HumanWindowFluid::cb_ui_channelList_i(fltk::MultiBrowser*, void*) {
  event(evChannelSelect);
}
void HumanWindowFluid::cb_ui_channelList(fltk::MultiBrowser* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_channelList_i(o,v);
}

inline void HumanWindowFluid::cb_1_i(fltk::Button*, void*) {
  event(evMoveChannelUp);
}
void HumanWindowFluid::cb_1(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

inline void HumanWindowFluid::cb_2_i(fltk::Button*, void*) {
  event(evMoveChannelDown);
}
void HumanWindowFluid::cb_2(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_channel_active_i(fltk::CheckButton*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_channel_active(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_channel_active_i(o,v);
}

inline void HumanWindowFluid::cb_ui_trajectories_vis_i(fltk::CheckButton*, void*) {
  event(evRefreshChannels);
}
void HumanWindowFluid::cb_ui_trajectories_vis(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_trajectories_vis_i(o,v);
}

inline void HumanWindowFluid::cb_ui_desired_heading_i(fltk::ValueSlider*, void*) {
  event(evStanceAdjust);
}
void HumanWindowFluid::cb_ui_desired_heading(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_desired_heading_i(o,v);
}

inline void HumanWindowFluid::cb_ui_stanceSwingRatio_i(fltk::ValueSlider*, void*) {
  event(evStanceAdjust);
}
void HumanWindowFluid::cb_ui_stanceSwingRatio(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_stanceSwingRatio_i(o,v);
}

inline void HumanWindowFluid::cb_ui_stanceToeHeel_i(fltk::ValueSlider*, void*) {
  event(evStanceAdjust);
}
void HumanWindowFluid::cb_ui_stanceToeHeel(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_stanceToeHeel_i(o,v);
}

inline void HumanWindowFluid::cb_ui_p_mult_i(fltk::ValueSlider*, void*) {
  event(evGainAdjust);
}
void HumanWindowFluid::cb_ui_p_mult(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_p_mult_i(o,v);
}

inline void HumanWindowFluid::cb_ui_d_mult_i(fltk::ValueSlider*, void*) {
  event(evGainAdjust);
}
void HumanWindowFluid::cb_ui_d_mult(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_d_mult_i(o,v);
}

inline void HumanWindowFluid::cb_ui_psw_mult_i(fltk::ValueSlider*, void*) {
  event(evGainAdjust);
}
void HumanWindowFluid::cb_ui_psw_mult(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_psw_mult_i(o,v);
}

inline void HumanWindowFluid::cb_ui_dsw_mult_i(fltk::ValueSlider*, void*) {
  event(evGainAdjust);
}
void HumanWindowFluid::cb_ui_dsw_mult(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_dsw_mult_i(o,v);
}

inline void HumanWindowFluid::cb_ui_contact_offset_i(fltk::ValueSlider*, void*) {
  event(evStanceAdjust);
}
void HumanWindowFluid::cb_ui_contact_offset(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_contact_offset_i(o,v);
}

inline void HumanWindowFluid::cb_ui_contact_offset_z_i(fltk::ValueSlider*, void*) {
  event(evStanceAdjust);
}
void HumanWindowFluid::cb_ui_contact_offset_z(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_contact_offset_z_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sim_d_x_i(fltk::ValueSlider*, void*) {
  event(evSimbiconAdjust);
}
void HumanWindowFluid::cb_ui_sim_d_x(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sim_d_x_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sim_d_z_i(fltk::ValueSlider*, void*) {
  event(evSimbiconAdjust);
}
void HumanWindowFluid::cb_ui_sim_d_z(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sim_d_z_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sim_v_x_i(fltk::ValueSlider*, void*) {
  event(evSimbiconAdjust);
}
void HumanWindowFluid::cb_ui_sim_v_x(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sim_v_x_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sim_v_z_i(fltk::ValueSlider*, void*) {
  event(evSimbiconAdjust);
}
void HumanWindowFluid::cb_ui_sim_v_z(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sim_v_z_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sim_root_scale_i(fltk::ValueSlider*, void*) {
  event(evSimbiconAdjust);
}
void HumanWindowFluid::cb_ui_sim_root_scale(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sim_root_scale_i(o,v);
}

inline void HumanWindowFluid::cb_edit6_i(fltk::Button*, void*) {
  event(evEditSelected);
}
void HumanWindowFluid::cb_edit6(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit6_i(o,v);
}

inline void HumanWindowFluid::cb_3_i(fltk::Button*, void*) {
  event(evForceForward);
}
void HumanWindowFluid::cb_3(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_3_i(o,v);
}

inline void HumanWindowFluid::cb_4_i(fltk::Button*, void*) {
  event(evForceRight);
}
void HumanWindowFluid::cb_4(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_4_i(o,v);
}

inline void HumanWindowFluid::cb_5_i(fltk::Button*, void*) {
  event(evForceLeft);
}
void HumanWindowFluid::cb_5(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_5_i(o,v);
}

inline void HumanWindowFluid::cb_v_i(fltk::Button*, void*) {
  event(evForceBackward);
}
void HumanWindowFluid::cb_v(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_v_i(o,v);
}

inline void HumanWindowFluid::cb_ui_vel_desired_z_i(fltk::ValueSlider*, void*) {
  event(evStanceAdjust);
}
void HumanWindowFluid::cb_ui_vel_desired_z(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_vel_desired_z_i(o,v);
}

inline void HumanWindowFluid::cb_ui_desired_v_scale_i(fltk::ValueSlider*, void*) {
  event(evStanceAdjust);
}
void HumanWindowFluid::cb_ui_desired_v_scale(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_desired_v_scale_i(o,v);
}

inline void HumanWindowFluid::cb_ui_controller_browser_i(fltk::Browser*, void*) {
  event(evControllerListSelected);
}
void HumanWindowFluid::cb_ui_controller_browser(fltk::Browser* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_controller_browser_i(o,v);
}

inline void HumanWindowFluid::cb_edit7_i(fltk::Item*, void*) {
  event(evEditModule);
}
void HumanWindowFluid::cb_edit7(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit7_i(o,v);
}

inline void HumanWindowFluid::cb_match_i(fltk::Item*, void*) {
  event(evControllerMatchHm)
;}
void HumanWindowFluid::cb_match(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_match_i(o,v);
}

inline void HumanWindowFluid::cb_match1_i(fltk::Item*, void*) {
  event(evControllerMatchSk);
}
void HumanWindowFluid::cb_match1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_match1_i(o,v);
}

inline void HumanWindowFluid::cb_match2_i(fltk::Item*, void*) {
  event(evControllerMatchFrame)
;}
void HumanWindowFluid::cb_match2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_match2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_controll_active_i(fltk::LightButton*, void*) {
  event(evControllerActive);
}
void HumanWindowFluid::cb_ui_controll_active(fltk::LightButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_controll_active_i(o,v);
}

inline void HumanWindowFluid::cb_ui_controll_visible_i(fltk::LightButton*, void*) {
  event(evControllerVisible);
}
void HumanWindowFluid::cb_ui_controll_visible(fltk::LightButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_controll_visible_i(o,v);
}

inline void HumanWindowFluid::cb_edit8_i(fltk::Item*, void*) {
  event(evManipEdit)
;}
void HumanWindowFluid::cb_edit8(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit8_i(o,v);
}

inline void HumanWindowFluid::cb_match3_i(fltk::Item*, void*) {
  event(evManipMatchHm);
}
void HumanWindowFluid::cb_match3(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_match3_i(o,v);
}

inline void HumanWindowFluid::cb_match4_i(fltk::Item*, void*) {
  event(evManipMatchSk);
}
void HumanWindowFluid::cb_match4(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_match4_i(o,v);
}

inline void HumanWindowFluid::cb_match5_i(fltk::Item*, void*) {
  event(evControllerMatchFrame)
;}
void HumanWindowFluid::cb_match5(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_match5_i(o,v);
}

inline void HumanWindowFluid::cb_ui_manip_browser_i(fltk::Browser*, void*) {
  event(evManipListSelected);
}
void HumanWindowFluid::cb_ui_manip_browser(fltk::Browser* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_manip_browser_i(o,v);
}

inline void HumanWindowFluid::cb_ui_manip_active_i(fltk::LightButton*, void*) {
  event(evManipActive);
}
void HumanWindowFluid::cb_ui_manip_active(fltk::LightButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_manip_active_i(o,v);
}

inline void HumanWindowFluid::cb_ui_manip_visible_i(fltk::LightButton*, void*) {
  event(evManipVisible);
}
void HumanWindowFluid::cb_ui_manip_visible(fltk::LightButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_manip_visible_i(o,v);
}

inline void HumanWindowFluid::cb_reduce2_i(fltk::Button*, void*) {
  event(evCurveFit);
}
void HumanWindowFluid::cb_reduce2(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_reduce2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_curve_fit_points_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_curve_fit_points(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_curve_fit_points_i(o,v);
}

inline void HumanWindowFluid::cb_ui_curve_fit_tolerance_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_curve_fit_tolerance(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_curve_fit_tolerance_i(o,v);
}

inline void HumanWindowFluid::cb_merge1_i(fltk::Button*, void*) {
  event(evMergePoints);
}
void HumanWindowFluid::cb_merge1(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_merge1_i(o,v);
}

inline void HumanWindowFluid::cb_ui_curve_merge_tolerance_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_curve_merge_tolerance(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_curve_merge_tolerance_i(o,v);
}

inline void HumanWindowFluid::cb_ui_curve_conc_tolerance_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_curve_conc_tolerance(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_curve_conc_tolerance_i(o,v);
}

inline void HumanWindowFluid::cb_ui_interactive_edit_i(fltk::LightButton*, void*) {
  event(evToggleInteractive);
}
void HumanWindowFluid::cb_ui_interactive_edit(fltk::LightButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_interactive_edit_i(o,v);
}

inline void HumanWindowFluid::cb_Stop_i(fltk::Button*, void*) {
  event(evStop);
}
void HumanWindowFluid::cb_Stop(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Stop_i(o,v);
}

inline void HumanWindowFluid::cb_Start_i(fltk::Button*, void*) {
  event(evStart);
}
void HumanWindowFluid::cb_Start(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_Start_i(o,v);
}

inline void HumanWindowFluid::cb_ui_draw_i(fltk::LightButton*, void*) {
  event(evDraw);
}
void HumanWindowFluid::cb_ui_draw(fltk::LightButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_draw_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sample_bounds_i(fltk::ValueInput*, void*) {
  event(evEditSample);
}
void HumanWindowFluid::cb_ui_sample_bounds(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sample_bounds_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sample_bounds1_i(fltk::ValueInput*, void*) {
  event(evEditSample);
}
void HumanWindowFluid::cb_ui_sample_bounds1(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sample_bounds1_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sample_bounds2_i(fltk::ValueInput*, void*) {
  event(evEditSample);
}
void HumanWindowFluid::cb_ui_sample_bounds2(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sample_bounds2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sample_bounds3_i(fltk::ValueInput*, void*) {
  event(evEditSample);
}
void HumanWindowFluid::cb_ui_sample_bounds3(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sample_bounds3_i(o,v);
}

inline void HumanWindowFluid::cb_ui_sample_bounds4_i(fltk::ValueInput*, void*) {
  event(evEditSample);
}
void HumanWindowFluid::cb_ui_sample_bounds4(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_sample_bounds4_i(o,v);
}

inline void HumanWindowFluid::cb_expand2_i(fltk::Button*, void*) {
  event(evPlanStart);
}
void HumanWindowFluid::cb_expand2(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_expand2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointList_i(fltk::MultiBrowser*, void*) {
  event(evJointListSelect);
}
void HumanWindowFluid::cb_ui_jointList(fltk::MultiBrowser* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointList_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointP_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_jointP(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointP_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointD_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_jointD(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointD_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointGrav_i(fltk::CheckButton*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_jointGrav(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointGrav_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointPD_i(fltk::CheckButton*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_jointPD(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointPD_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointJX_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_jointJX(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointJX_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointJY_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_jointJY(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointJY_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointJZ_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_jointJZ(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointJZ_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointMaxT_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_jointMaxT(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointMaxT_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointRX_i(fltk::ValueSlider*, void*) {
  event(evEulerJointAdjust);
}
void HumanWindowFluid::cb_ui_jointRX(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointRX_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointRY_i(fltk::ValueSlider*, void*) {
  event(evEulerJointAdjust);
}
void HumanWindowFluid::cb_ui_jointRY(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointRY_i(o,v);
}

inline void HumanWindowFluid::cb_ui_jointRZ_i(fltk::ValueSlider*, void*) {
  event(evEulerJointAdjust);
}
void HumanWindowFluid::cb_ui_jointRZ(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_jointRZ_i(o,v);
}

inline void HumanWindowFluid::cb_ui_char_frame_i(fltk::CheckButton*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_char_frame(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_char_frame_i(o,v);
}

inline void HumanWindowFluid::cb_parm_i(fltk::Button*, void*) {
  event(evJointParm);
}
void HumanWindowFluid::cb_parm(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_parm_i(o,v);
}

inline void HumanWindowFluid::cb_body_i(fltk::Button*, void*) {
  event(evJointBody);
}
void HumanWindowFluid::cb_body(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_body_i(o,v);
}

inline void HumanWindowFluid::cb_ui_joint_scale_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_joint_scale(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_joint_scale_i(o,v);
}

inline void HumanWindowFluid::cb_ui_joint_scale1_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_joint_scale1(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_joint_scale1_i(o,v);
}

inline void HumanWindowFluid::cb_ui_joint_scale2_i(fltk::ValueSlider*, void*) {
  event(evIndividualJointAdjust);
}
void HumanWindowFluid::cb_ui_joint_scale2(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_joint_scale2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_cmd_line_i(fltk::Input*, void*) {
  event(evCmdLine);
}
void HumanWindowFluid::cb_ui_cmd_line(fltk::Input* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_cmd_line_i(o,v);
}

inline void HumanWindowFluid::cb_makea_i(fltk::Button*, void*) {
  event(evMakeComposite);
}
void HumanWindowFluid::cb_makea(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_makea_i(o,v);
}

inline void HumanWindowFluid::cb_ui_all_frames_i(fltk::CheckButton*, void*) {
  if(ui_all_frames->value())
  {
  ui_first_frame_comp->hide();
  ui_last_frame_comp->hide();
  }
  else
  {
  ui_first_frame_comp->show();
  ui_last_frame_comp->show();
  }
;}
void HumanWindowFluid::cb_ui_all_frames(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_all_frames_i(o,v);
}

inline void HumanWindowFluid::cb_mult_i(fltk::Item*, void*) {
  event(evMakeMult);
}
void HumanWindowFluid::cb_mult(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_mult_i(o,v);
}

inline void HumanWindowFluid::cb_switch1_i(fltk::Item*, void*) {
  event(evMakeSwitch);
}
void HumanWindowFluid::cb_switch1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_switch1_i(o,v);
}

inline void HumanWindowFluid::cb_modulate_i(fltk::Item*, void*) {
  event(evMakeMod);
}
void HumanWindowFluid::cb_modulate(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_modulate_i(o,v);
}

inline void HumanWindowFluid::cb_add4_i(fltk::Item*, void*) {
  event(evMakeAdd);
}
void HumanWindowFluid::cb_add4(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_add4_i(o,v);
}

inline void HumanWindowFluid::cb_inverse_i(fltk::Item*, void*) {
  event(evMakeInv);
}
void HumanWindowFluid::cb_inverse(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inverse_i(o,v);
}

inline void HumanWindowFluid::cb_trajectory_i(fltk::Item*, void*) {
  event(evMakeTraj);
}
void HumanWindowFluid::cb_trajectory(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_trajectory_i(o,v);
}

inline void HumanWindowFluid::cb_additive_i(fltk::Item*, void*) {
  event(evMakeChannelAdditive);
}
void HumanWindowFluid::cb_additive(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_additive_i(o,v);
}

inline void HumanWindowFluid::cb_scale1_i(fltk::Item*, void*) {
  event(evMakeChannelScale);
}
void HumanWindowFluid::cb_scale1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_scale1_i(o,v);
}

inline void HumanWindowFluid::cb_inverse1_i(fltk::Item*, void*) {
  event(evMakeChannelInverse);
}
void HumanWindowFluid::cb_inverse1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inverse1_i(o,v);
}

inline void HumanWindowFluid::cb_feedback_i(fltk::Item*, void*) {
  event(evMakeChannelFeedback);
}
void HumanWindowFluid::cb_feedback(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_feedback_i(o,v);
}

inline void HumanWindowFluid::cb_event_i(fltk::Item*, void*) {
  event(evMakeChannelEvent);
}
void HumanWindowFluid::cb_event(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_event_i(o,v);
}

inline void HumanWindowFluid::cb_idler_i(fltk::Item*, void*) {
  event(evMakeChannelIdler);
}
void HumanWindowFluid::cb_idler(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_idler_i(o,v);
}

inline void HumanWindowFluid::cb_arrange_i(fltk::Item*, void*) {
  event(evArrangeNodes);
}
void HumanWindowFluid::cb_arrange(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_arrange_i(o,v);
}

inline void HumanWindowFluid::cb_detach_i(fltk::Item*, void*) {
  event(evDetachNode);
}
void HumanWindowFluid::cb_detach(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_detach_i(o,v);
}

inline void HumanWindowFluid::cb_rename2_i(fltk::Item*, void*) {
  event(evChannelRename);
}
void HumanWindowFluid::cb_rename2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_rename2_i(o,v);
}

inline void HumanWindowFluid::cb_edit9_i(fltk::Item*, void*) {
  event(evEditNodeViewer);
}
void HumanWindowFluid::cb_edit9(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_edit9_i(o,v);
}

inline void HumanWindowFluid::cb_view1_i(fltk::Item*, void*) {
  event(evViewInputNodes);
}
void HumanWindowFluid::cb_view1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_view1_i(o,v);
}

inline void HumanWindowFluid::cb_view2_i(fltk::Item*, void*) {
  event(evViewOutputNodes);
}
void HumanWindowFluid::cb_view2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_view2_i(o,v);
}

inline void HumanWindowFluid::cb_view3_i(fltk::Item*, void*) {
  event(evViewConnectedNodes);
}
void HumanWindowFluid::cb_view3(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_view3_i(o,v);
}

inline void HumanWindowFluid::cb_hide1_i(fltk::Item*, void*) {
  event(evHideAllNodes);
}
void HumanWindowFluid::cb_hide1(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_hide1_i(o,v);
}

inline void HumanWindowFluid::cb_show4_i(fltk::Item*, void*) {
  event(evShowAllNodes);
}
void HumanWindowFluid::cb_show4(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_show4_i(o,v);
}

inline void HumanWindowFluid::cb_hide2_i(fltk::Item*, void*) {
  event(evHideSelectedNodes);
}
void HumanWindowFluid::cb_hide2(fltk::Item* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_hide2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_node_val_i(fltk::ValueInput*, void*) {
  event(evNodeVal);
}
void HumanWindowFluid::cb_ui_node_val(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_node_val_i(o,v);
}

inline void HumanWindowFluid::cb_ui_parm_edit_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_parm_edit(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_edit_i(o,v);
}

inline void HumanWindowFluid::cb_ui_parm_edit1_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_parm_edit1(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_edit1_i(o,v);
}

inline void HumanWindowFluid::cb_ui_parm_edit2_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_parm_edit2(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_edit2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_parm_edit3_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_parm_edit3(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_edit3_i(o,v);
}

inline void HumanWindowFluid::cb_ui_parm_edit4_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_parm_edit4(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_edit4_i(o,v);
}

inline void HumanWindowFluid::cb_ui_parm_edit5_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_parm_edit5(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_edit5_i(o,v);
}

inline void HumanWindowFluid::cb_ui_parm_edit6_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_parm_edit6(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_edit6_i(o,v);
}

inline void HumanWindowFluid::cb_ui_parm_edit7_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_parm_edit7(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_edit7_i(o,v);
}

inline void HumanWindowFluid::cb_ui_parm_edit8_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_parm_edit8(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_edit8_i(o,v);
}

inline void HumanWindowFluid::cb_new5_i(fltk::Button*, void*) {
  event(evSetMotion);
}
void HumanWindowFluid::cb_new5(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_new5_i(o,v);
}

inline void HumanWindowFluid::cb_ui_rbds_height_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_rbds_height(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_ui_rbds_height_i(o,v);
}

inline void HumanWindowFluid::cb_ui_rbds_support_i(fltk::ValueSlider*, void*) {
  event(evEditParm);
}
void HumanWindowFluid::cb_ui_rbds_support(fltk::ValueSlider* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_ui_rbds_support_i(o,v);
}

inline void HumanWindowFluid::cb_env_i(fltk::Button*, void*) {
  event(evMakeMotionEnv);
}
void HumanWindowFluid::cb_env(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_env_i(o,v);
}

inline void HumanWindowFluid::cb_save5_i(fltk::Button*, void*) {
  event(evMakeMotionEnv);
}
void HumanWindowFluid::cb_save5(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_save5_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_offset_i(fltk::ValueInput*, void*) {
  event(evEnvOffset);
}
void HumanWindowFluid::cb_ui_env_offset(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_ui_env_offset_i(o,v);
}

inline void HumanWindowFluid::cb_ui_env_offset1_i(fltk::ValueInput*, void*) {
  event(evEnvOffset);
}
void HumanWindowFluid::cb_ui_env_offset1(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_ui_env_offset1_i(o,v);
}

inline void HumanWindowFluid::cb_closest_i(fltk::Button*, void*) {
  event(evSelectClosestMotion);
}
void HumanWindowFluid::cb_closest(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_closest_i(o,v);
}

inline void HumanWindowFluid::cb_ui_pt_i(fltk::ValueInput*, void*) {
  event(evPointEdit);
}
void HumanWindowFluid::cb_ui_pt(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_pt_i(o,v);
}

inline void HumanWindowFluid::cb_ui_pt1_i(fltk::ValueInput*, void*) {
  event(evPointEdit);
}
void HumanWindowFluid::cb_ui_pt1(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_pt1_i(o,v);
}

inline void HumanWindowFluid::cb_ui_pt2_i(fltk::ValueInput*, void*) {
  event(evPointEdit);
}
void HumanWindowFluid::cb_ui_pt2(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_pt2_i(o,v);
}

inline void HumanWindowFluid::cb_ui_pt3_i(fltk::ValueInput*, void*) {
  event(evPointEdit);
}
void HumanWindowFluid::cb_ui_pt3(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_pt3_i(o,v);
}

inline void HumanWindowFluid::cb_ui_pt4_i(fltk::ValueInput*, void*) {
  event(evPointEdit);
}
void HumanWindowFluid::cb_ui_pt4(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_pt4_i(o,v);
}

inline void HumanWindowFluid::cb_ui_pt5_i(fltk::ValueInput*, void*) {
  event(evPointEdit);
}
void HumanWindowFluid::cb_ui_pt5(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_pt5_i(o,v);
}

inline void HumanWindowFluid::cb_ui_makeSample_i(fltk::CheckButton*, void*) {
  event(evMakeSample);
}
void HumanWindowFluid::cb_ui_makeSample(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_makeSample_i(o,v);
}

inline void HumanWindowFluid::cb_rand_i(fltk::Button*, void*) {
  event(evRandomize);
}
void HumanWindowFluid::cb_rand(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_rand_i(o,v);
}

inline void HumanWindowFluid::cb_ui_channelMax_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_channelMax(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_channelMax_i(o,v);
}

inline void HumanWindowFluid::cb_ui_channelMin_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_channelMin(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_channelMin_i(o,v);
}

inline void HumanWindowFluid::cb_ui_channelRest_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_channelRest(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_channelRest_i(o,v);
}

inline void HumanWindowFluid::cb_ui_channelRep_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_channelRep(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_channelRep_i(o,v);
}

inline void HumanWindowFluid::cb_ui_channelVal_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_channelVal(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_channelVal_i(o,v);
}

inline void HumanWindowFluid::cb_ui_motion_duration_i(fltk::ValueInput*, void*) {
  event(evChannelEdit);
}
void HumanWindowFluid::cb_ui_motion_duration(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_motion_duration_i(o,v);
}

inline void HumanWindowFluid::cb_ui_motion_loops_i(fltk::CheckButton*, void*) {
  event(evMotionLoops);
}
void HumanWindowFluid::cb_ui_motion_loops(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_motion_loops_i(o,v);
}

inline void HumanWindowFluid::cb_ui_motion_resets_i(fltk::CheckButton*, void*) {
  event(evMotionResets);
}
void HumanWindowFluid::cb_ui_motion_resets(fltk::CheckButton* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_motion_resets_i(o,v);
}

inline void HumanWindowFluid::cb_ui_last_frame_i(fltk::ValueInput*, void*) {
  event(evTimeEdit);
}
void HumanWindowFluid::cb_ui_last_frame(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_last_frame_i(o,v);
}

inline void HumanWindowFluid::cb_ui_first_frame_i(fltk::ValueInput*, void*) {
  event(evTimeEdit);
}
void HumanWindowFluid::cb_ui_first_frame(fltk::ValueInput* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_ui_first_frame_i(o,v);
}

inline void HumanWindowFluid::cb_6_i(fltk::Button*, void*) {
  event(evNextPoint);
}
void HumanWindowFluid::cb_6(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->parent()->user_data()))->cb_6_i(o,v);
}

inline void HumanWindowFluid::cb_create2_i(fltk::Button*, void*) {
  event(evCreateNode);
}
void HumanWindowFluid::cb_create2(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_create2_i(o,v);
}

inline void HumanWindowFluid::cb_cancel_i(fltk::Button*, void*) {
  ui_node_create_window->hide();
}
void HumanWindowFluid::cb_cancel(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_cancel_i(o,v);
}

inline void HumanWindowFluid::cb_ok_i(fltk::Button*, void*) {
  ui_error_win->hide();
}
void HumanWindowFluid::cb_ok(fltk::Button* o, void* v) {
  ((HumanWindowFluid*)(o->parent()->user_data()))->cb_ok_i(o,v);
}

HumanWindowFluid::HumanWindowFluid() {
  fltk::Window* w;
   {fltk::Window* o = ui_window = new fltk::Window(1614, 945, "Physical Human");
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = ui_main_group = new fltk::Group(0, 0, 310, 945);
      o->set_vertical();
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0xa0a0a000);
      o->begin();
       {fltk::Group* o = new fltk::Group(0, 5, 310, 940);
        o->set_vertical();
        o->begin();
         {fltk::Group* o = ui_main_header_group = new fltk::Group(10, 5, 285, 84);
          o->box(fltk::DOWN_BOX);
          o->color((fltk::Color)0xaaaaaa00);
          o->begin();
           {fltk::LightButton* o = ui_ode_run = new fltk::LightButton(36, 22, 50, 20, "Run");
            o->box(fltk::PLASTIC_UP_BOX);
            o->buttonbox(fltk::PLASTIC_UP_BOX);
            o->color((fltk::Color)0xd3d3d300);
            o->selection_color((fltk::Color)0xff0000);
            o->buttoncolor((fltk::Color)0xd3d3d300);
            o->shortcut(0x40061);
            o->callback((fltk::Callback*)cb_ui_ode_run);
          }
           {fltk::MenuBar* o = new fltk::MenuBar(0, 0, 285, 20);
            o->box(fltk::DOWN_BOX);
            o->color((fltk::Color)0xc0c0c000);
            o->buttoncolor((fltk::Color)0xe8e8d800);
            o->highlight_color((fltk::Color)0x9b9b9b00);
            o->shortcut(0xffe9);
            o->begin();
             {fltk::Item* o = new fltk::Item("X");
              o->box(fltk::NO_BOX);
              o->buttonbox(fltk::NO_BOX);
              o->labelfont(fltk::HELVETICA_BOLD);
              o->textfont(fltk::HELVETICA_BOLD);
              o->color((fltk::Color)0xece9d800);
              o->textcolor((fltk::Color)0xd40d2900);
              o->selection_textcolor((fltk::Color)0xff122b00);
              o->callback((fltk::Callback*)cb_X);
            }
             {fltk::ItemGroup* o = new fltk::ItemGroup("File");
              o->begin();
               {fltk::ItemGroup* o = new fltk::ItemGroup("save scene ");
                o->begin();
                 {fltk::Item* o = new fltk::Item("save current scene");
                  o->callback((fltk::Callback*)cb_save);
                }
                 {fltk::Item* o = new fltk::Item("save new scene");
                  o->callback((fltk::Callback*)cb_save1);
                }
                o->end();
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("save controller");
                o->begin();
                 {fltk::Item* o = new fltk::Item("everything");
                  o->color((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_everything);
                  o->tooltip("save all the motions in the controller. ");
                }
                 {fltk::Item* o = new fltk::Item("new controller");
                  o->color((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_new);
                  o->tooltip("make a new controller and save it to a file. creates .base file and an initia\
l .motion");
                }
                 {fltk::Item* o = new fltk::Item("new motion");
                  o->color((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_new1);
                  o->tooltip("save a new motion and ask user for name");
                }
                 {fltk::Item* o = new fltk::Item("current editing motions");
                  o->color((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_current);
                  o->tooltip("save the current motions being edited based on the  motion_manager parm human\
_motion_manager_edit_motions");
                }
                 {fltk::Item* o = new fltk::Item("bounds");
                  o->color((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_bounds);
                  o->tooltip("save the sample bounds to its own file *.sample");
                }
                 {fltk::Item* o = new fltk::Item("base motion");
                  o->color((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_base);
                  o->tooltip("save the base motion to its own file *.base");
                }
                 {fltk::Item* o = new fltk::Item("motion with parm name");
                  o->color((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_motion);
                  o->tooltip("this will delete the previous file and save with the name based on the parm v\
alues");
                }
                 {fltk::Item* o = new fltk::Item("set name from parms");
                  o->color((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_set);
                }
                o->end();
              }
               {fltk::Item* o = new fltk::Item("load a skeleton");
                o->callback((fltk::Callback*)cb_load);
              }
               {fltk::Item* o = new fltk::Item("connect to kinect");
                o->callback((fltk::Callback*)cb_connect);
              }
              o->end();
            }
             {fltk::ItemGroup* o = new fltk::ItemGroup("Edit");
              o->box(fltk::PLASTIC_UP_BOX);
              o->color((fltk::Color)0xa0a0a000);
              o->begin();
               {fltk::ItemGroup* o = new fltk::ItemGroup("parameter editors");
                o->begin();
                 {fltk::Item* o = new fltk::Item("human");
                  o->box(fltk::NO_BOX);
                  o->color((fltk::Color)0xffffff00);
                  o->buttoncolor((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_human);
                }
                 {fltk::Item* o = new fltk::Item("Files");
                  o->callback((fltk::Callback*)cb_Files);
                }
                 {fltk::Item* o = new fltk::Item("ODE");
                  o->callback((fltk::Callback*)cb_ODE);
                }
                 {fltk::Item* o = new fltk::Item("Viewer");
                  o->callback((fltk::Callback*)cb_Viewer);
                }
                 {fltk::Item* o = new fltk::Item("Motion");
                  o->callback((fltk::Callback*)cb_Motion);
                }
                 {fltk::Item* o = new fltk::Item("Graph Viewer");
                  o->callback((fltk::Callback*)cb_Graph);
                }
                 {fltk::Item* o = new fltk::Item("Planner");
                  o->callback((fltk::Callback*)cb_Planner);
                }
                 {fltk::Item* o = new fltk::Item("manager");
                  o->callback((fltk::Callback*)cb_manager);
                }
                o->end();
              }
               {fltk::Divider* o = new fltk::Divider();
                o->box(fltk::NO_BOX);
                o->color((fltk::Color)0xffffff00);
                o->buttoncolor((fltk::Color)0xf0f0f000);
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("controller");
                o->box(fltk::NO_BOX);
                o->color((fltk::Color)0xffffff00);
                o->buttoncolor((fltk::Color)0xf0f0f000);
                o->begin();
                 {fltk::Item* o = new fltk::Item("edit");
                  o->box(fltk::NO_BOX);
                  o->color((fltk::Color)0xffffff00);
                  o->buttoncolor((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_edit);
                }
                 {fltk::Item* o = new fltk::Item("set scene for controller");
                  o->callback((fltk::Callback*)cb_set1);
                }
                 {fltk::Item* o = new fltk::Item("remove current motion");
                  o->color((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_remove);
                }
                 {fltk::Item* o = new fltk::Item("set initial");
                  o->callback((fltk::Callback*)cb_set2);
                  o->tooltip("set the initial state of the controller and save it to a file");
                }
                o->end();
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("motion  ");
                o->box(fltk::NO_BOX);
                o->color((fltk::Color)0xffffff00);
                o->buttoncolor((fltk::Color)0xf0f0f000);
                o->begin();
                 {fltk::Item* o = new fltk::Item("edit");
                  o->box(fltk::NO_BOX);
                  o->color((fltk::Color)0xffffff00);
                  o->buttoncolor((fltk::Color)0xf0f0f000);
                  o->callback((fltk::Callback*)cb_edit1);
                }
                 {fltk::ItemGroup* o = new fltk::ItemGroup("modify");
                  o->begin();
                   {fltk::Item* o = new fltk::Item("randomize");
                    o->callback((fltk::Callback*)cb_randomize);
                  }
                   {fltk::Item* o = new fltk::Item("reset parms");
                    o->callback((fltk::Callback*)cb_reset);
                    o->tooltip("reset the total success of all the motions this will set the descriptors avg \
and min max to default values.");
                  }
                   {fltk::Item* o = new fltk::Item("force keys");
                    o->callback((fltk::Callback*)cb_force);
                    o->tooltip("force the initial set of keys of an animation based on  each channels feedbac\
k value");
                  }
                  o->end();
                }
                 {fltk::ItemGroup* o = new fltk::ItemGroup("sample");
                  o->begin();
                   {fltk::Item* o = new fltk::Item("reconfigure bounds");
                    o->callback((fltk::Callback*)cb_reconfigure);
                    o->tooltip("looks at all the motions in the controller so far and shrinkwraps the sample \
bounds to the existing points");
                  }
                   {fltk::Item* o = new fltk::Item("make local sample");
                    o->callback((fltk::Callback*)cb_make);
                    o->tooltip("this changes the sample bounds on this motion alone to some tolerance around \
the sample points. ");
                  }
                   {fltk::Item* o = new fltk::Item("reduce hull");
                    o->callback((fltk::Callback*)cb_reduce);
                  }
                  o->end();
                }
                 {fltk::ItemGroup* o = new fltk::ItemGroup("Env");
                  o->begin();
                   {fltk::Item* o = new fltk::Item("add Env");
                    o->callback((fltk::Callback*)cb_add);
                  }
                   {fltk::Item* o = new fltk::Item("expand Env");
                    o->callback((fltk::Callback*)cb_expand);
                  }
                   {fltk::Item* o = new fltk::Item("load motion environment");
                    o->callback((fltk::Callback*)cb_load1);
                  }
                  o->end();
                }
                 {fltk::ItemGroup* o = new fltk::ItemGroup("old");
                  o->begin();
                  new fltk::Divider();
                   {fltk::Item* o = new fltk::Item("switch stance");
                    o->callback((fltk::Callback*)cb_switch);
                    o->tooltip("reverse the stance on this motion if it is reversable");
                  }
                   {fltk::Item* o = new fltk::Item("segment");
                    o->callback((fltk::Callback*)cb_segment);
                  }
                   {fltk::Item* o = new fltk::Item("make composite");
                    o->callback((fltk::Callback*)cb_make1);
                  }
                   {fltk::Item* o = new fltk::Item("make timewarp");
                    o->callback((fltk::Callback*)cb_make2);
                  }
                   {fltk::Item* o = new fltk::Item("scale motion");
                    o->callback((fltk::Callback*)cb_scale);
                    o->tooltip("print the motion to the console");
                  }
                   {fltk::Item* o = new fltk::Item("capture");
                    o->callback((fltk::Callback*)cb_capture);
                  }
                   {fltk::Item* o = new fltk::Item("generalize");
                    o->callback((fltk::Callback*)cb_generalize);
                    o->tooltip("this changes each name in the motion channel from ex. LeftFoot -> StanceFoot \
RightFoot->SwingFoot..etc");
                  }
                  o->end();
                }
                o->end();
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("database");
                o->box(fltk::NO_BOX);
                o->color((fltk::Color)0xffffff00);
                o->buttoncolor((fltk::Color)0xf0f0f000);
                o->begin();
                 {fltk::Item* o = new fltk::Item("explore new env");
                  o->callback((fltk::Callback*)cb_explore);
                  o->tooltip("manager->getPlanner()->start();\nfind new goals within sample bounds");
                }
                 {fltk::Item* o = new fltk::Item("expand env");
                  o->callback((fltk::Callback*)cb_expand1);
                  o->tooltip("event evStartExpandingEnv;\nmotion_manager->startExpandingEnv();\nthis search\
es the env bounds of each motion\n");
                }
                 {fltk::Item* o = new fltk::Item("stop planning");
                  o->callback((fltk::Callback*)cb_stop);
                }
                 {fltk::Item* o = new fltk::Item("analyze motion");
                  o->callback((fltk::Callback*)cb_analyze);
                }
                 {fltk::Item* o = new fltk::Item("verify all motion");
                  o->callback((fltk::Callback*)cb_verify);
                }
                 {fltk::Item* o = new fltk::Item("reanalyze all motions");
                  o->callback((fltk::Callback*)cb_reanalyze);
                }
                 {fltk::Item* o = new fltk::Item("set descriptor from env ");
                  o->callback((fltk::Callback*)cb_set3);
                  o->tooltip("set the general descriptor values from the environment descriptor. overwritin\
g the analysis");
                }
                 {fltk::Item* o = new fltk::Item("set env from descriptor");
                  o->callback((fltk::Callback*)cb_set4);
                  o->tooltip("set the environmental parameter from the analysis hopefully getting to a bett\
er point");
                }
                 {fltk::Item* o = new fltk::Item("remove duplicates");
                  o->callback((fltk::Callback*)cb_remove1);
                  o->tooltip("set the environmental parameter from the analysis hopefully getting to a bett\
er point");
                }
                 {fltk::Item* o = new fltk::Item("update all env lines");
                  o->callback((fltk::Callback*)cb_update);
                }
                 {fltk::Item* o = new fltk::Item("select mode");
                  o->callback((fltk::Callback*)cb_select);
                  o->tooltip("event evGoalSelectMode\nmotion_manager->selectMode();");
                }
                 {fltk::Item* o = new fltk::Item("start expanding current");
                  o->callback((fltk::Callback*)cb_start);
                }
                o->end();
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("channel");
                o->box(fltk::NO_BOX);
                o->color((fltk::Color)0xffffff00);
                o->buttoncolor((fltk::Color)0xf0f0f000);
                o->tooltip("these effect the channels selected");
                o->begin();
                 {fltk::Item* o = new fltk::Item("refresh");
                  o->callback((fltk::Callback*)cb_refresh);
                }
                 {fltk::Item* o = new fltk::Item("delete");
                  o->callback((fltk::Callback*)cb_delete);
                  o->tooltip("delete all the channels selected");
                }
                 {fltk::Item* o = new fltk::Item("rename");
                  o->callback((fltk::Callback*)cb_rename);
                }
                 {fltk::Item* o = new fltk::Item("init");
                  o->callback((fltk::Callback*)cb_init);
                  o->tooltip("sets the selected channels  to have 1 keypoint and value  that is its rest");
                }
                 {fltk::Item* o = new fltk::Item("set key");
                  o->shortcut(0x6b);
                  o->callback((fltk::Callback*)cb_set5);
                  o->tooltip("This will set a key for each of the selected channels according to the actual\
 channels value");
                }
                 {fltk::Item* o = new fltk::Item("edit");
                  o->callback((fltk::Callback*)cb_edit2);
                }
                 {fltk::Item* o = new fltk::Item("merge");
                  o->callback((fltk::Callback*)cb_merge);
                }
                 {fltk::Item* o = new fltk::Item("reduce");
                  o->callback((fltk::Callback*)cb_reduce1);
                }
                new fltk::Divider();
                 {fltk::ItemGroup* o = new fltk::ItemGroup("curve type");
                  o->begin();
                   {fltk::Item* o = new fltk::Item("Linear");
                    o->callback((fltk::Callback*)cb_Linear);
                  }
                   {fltk::Item* o = new fltk::Item("Bezier");
                    o->callback((fltk::Callback*)cb_Bezier);
                  }
                   {fltk::Item* o = new fltk::Item("Step");
                    o->callback((fltk::Callback*)cb_Step);
                  }
                  o->end();
                }
                 {fltk::ItemGroup* o = new fltk::ItemGroup("control type");
                  o->begin();
                   {fltk::Item* o = new fltk::Item("make additive");
                    o->callback((fltk::Callback*)cb_make3);
                  }
                   {fltk::Item* o = new fltk::Item("make scale");
                    o->callback((fltk::Callback*)cb_make4);
                  }
                   {fltk::Item* o = new fltk::Item("make event");
                    o->callback((fltk::Callback*)cb_make5);
                    o->tooltip("an event channel will skip the rest of an animation to the end of the event.");
                  }
                   {fltk::Item* o = new fltk::Item("make idler");
                    o->callback((fltk::Callback*)cb_make6);
                    o->tooltip("an idler channel will wait for a certain event to start playing");
                  }
                   {fltk::Item* o = new fltk::Item("make inverse");
                    o->callback((fltk::Callback*)cb_make7);
                  }
                   {fltk::Item* o = new fltk::Item("make inverse");
                    o->callback((fltk::Callback*)cb_make8);
                  }
                  o->end();
                }
                 {fltk::Item* o = new fltk::Item("add control");
                  o->callback((fltk::Callback*)cb_add1);
                }
                o->end();
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("character");
                o->begin();
                new fltk::Item("item");
                o->end();
              }
               {fltk::Divider* o = new fltk::Divider();
                o->box(fltk::NO_BOX);
                o->color((fltk::Color)0xffffff00);
                o->buttoncolor((fltk::Color)0xf0f0f000);
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("random");
                o->box(fltk::NO_BOX);
                o->buttonbox(fltk::NO_BOX);
                o->color((fltk::Color)0xffffff00);
                o->buttoncolor((fltk::Color)0xf0f0f000);
                o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE|fltk::ALIGN_CLIP);
                o->begin();
                 {fltk::Item* o = new fltk::Item("Drop Balls");
                  o->callback((fltk::Callback*)cb_Drop);
                  o->tooltip("Drop a few balls on our unsuspecting victim..");
                }
                 {fltk::Item* o = new fltk::Item("Reset Scene");
                  o->callback((fltk::Callback*)cb_Reset);
                }
                o->end();
              }
              o->end();
            }
             {fltk::ItemGroup* o = new fltk::ItemGroup("View");
              o->begin();
               {fltk::Item* o = new fltk::Item("show all outputs");
                o->box(fltk::NO_BOX);
                o->callback((fltk::Callback*)cb_show);
              }
               {fltk::Item* o = new fltk::Item("show motion env");
                o->box(fltk::NO_BOX);
                o->callback((fltk::Callback*)cb_show1);
              }
               {fltk::Item* o = new fltk::Item("hide motion env");
                o->box(fltk::NO_BOX);
                o->callback((fltk::Callback*)cb_hide);
              }
               {fltk::Item* o = new fltk::Item("show all motion env");
                o->box(fltk::NO_BOX);
                o->callback((fltk::Callback*)cb_show2);
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("character");
                o->box(fltk::NO_BOX);
                o->begin();
                 {fltk::Item* o = new fltk::Item("view character");
                  o->callback((fltk::Callback*)cb_view);
                }
                 {fltk::Item* o = new fltk::Item("camera follow");
                  o->callback((fltk::Callback*)cb_camera);
                }
                 {fltk::Item* o = new fltk::Item("human");
                  o->callback((fltk::Callback*)cb_human1);
                }
                 {fltk::Item* o = new fltk::Item("visualization");
                  o->callback((fltk::Callback*)cb_visualization);
                }
                 {fltk::Item* o = new fltk::Item("collision");
                  o->callback((fltk::Callback*)cb_collision);
                }
                 {fltk::Item* o = new fltk::Item("heading");
                  o->callback((fltk::Callback*)cb_heading);
                }
                 {fltk::Item* o = new fltk::Item("skeleton");
                  o->callback((fltk::Callback*)cb_skeleton);
                }
                 {fltk::Item* o = new fltk::Item("axis");
                  o->callback((fltk::Callback*)cb_axis);
                }
                o->end();
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("trajectory");
                o->box(fltk::NO_BOX);
                o->buttonbox(fltk::PLASTIC_UP_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->buttoncolor((fltk::Color)0xffffff00);
                o->begin();
                 {fltk::Item* o = new fltk::Item("trajectories");
                  o->callback((fltk::Callback*)cb_trajectories);
                  o->tooltip("draws the IK position trajectories");
                }
                 {fltk::Item* o = new fltk::Item("original motion");
                  o->callback((fltk::Callback*)cb_original);
                  o->tooltip("draws the IK position trajectories");
                }
                 {fltk::Item* o = new fltk::Item("snapshots");
                  o->callback((fltk::Callback*)cb_snapshots);
                  o->tooltip("draws the saved states of the animation");
                }
                 {fltk::Item* o = new fltk::Item("reset view");
                  o->callback((fltk::Callback*)cb_reset1);
                  o->tooltip("draws the saved states of the animation");
                }
                 {fltk::Item* o = new fltk::Item("fit view");
                  o->shortcut(0x76);
                  o->callback((fltk::Callback*)cb_fit);
                  o->tooltip("draws the saved states of the animation");
                }
                 {fltk::Item* o = new fltk::Item("bounds");
                  o->callback((fltk::Callback*)cb_bounds1);
                  o->tooltip("show or hide the sample bounds");
                }
                 {fltk::ItemGroup* o = new fltk::ItemGroup("old");
                  o->begin();
                   {fltk::Item* o = new fltk::Item("override curve look");
                    o->callback((fltk::Callback*)cb_override);
                    o->tooltip("draws the IK position trajectories");
                  }
                  o->end();
                }
                 {fltk::Item* o = new fltk::Item("show sample bounds");
                  o->box(fltk::NO_BOX);
                  o->callback((fltk::Callback*)cb_show3);
                  o->tooltip("case evShowSampleBounds\nmanager->getPlanner()->toggleBoundLines();");
                }
                o->end();
              }
               {fltk::ItemGroup* o = new fltk::ItemGroup("windows");
                o->box(fltk::NO_BOX);
                o->begin();
                 {fltk::Item* o = new fltk::Item("motion editor");
                  o->callback((fltk::Callback*)cb_motion1);
                }
                 {fltk::Item* o = new fltk::Item("interpolate");
                  o->callback((fltk::Callback*)cb_interpolate);
                }
                 {fltk::Item* o = new fltk::Item("node editor");
                  o->callback((fltk::Callback*)cb_node);
                  o->tooltip("switch between curve mode and node mode");
                }
                 {fltk::Item* o = new fltk::Item("skel win");
                  o->callback((fltk::Callback*)cb_skel);
                  o->tooltip("open up a graphsim skeleton editor window");
                }
                o->end();
              }
               {fltk::Item* o = new fltk::Item("save depth buffer");
                o->box(fltk::NO_BOX);
                o->callback((fltk::Callback*)cb_save2);
              }
               {fltk::Item* o = new fltk::Item("make point cloud from dbuffer");
                o->box(fltk::NO_BOX);
                o->callback((fltk::Callback*)cb_make9);
              }
              o->end();
            }
             {fltk::ItemGroup* o = new fltk::ItemGroup("print");
              o->begin();
               {fltk::Item* o = new fltk::Item("Print Motion");
                o->callback((fltk::Callback*)cb_Print);
                o->tooltip("print the motion to the console");
              }
               {fltk::Item* o = new fltk::Item("Print motion descriptors");
                o->callback((fltk::Callback*)cb_Print1);
                o->tooltip("print the motion  descriptors to the console");
              }
               {fltk::Item* o = new fltk::Item("Print state");
                o->callback((fltk::Callback*)cb_Print2);
                o->tooltip("print the state parameters to the console");
              }
              o->end();
            }
            o->end();
          }
           {fltk::Output* o = ui_state_label = new fltk::Output(45, 42, 240, 20, "state");
            o->tooltip("the current state");
          }
           {fltk::Output* o = ui_motion_label = new fltk::Output(45, 61, 240, 20, "motion");
            o->tooltip("the current motion");
          }
           {fltk::Button* o = new fltk::Button(189, 22, 50, 20, "Step");
            o->buttonbox(fltk::PLASTIC_UP_BOX);
            o->color((fltk::Color)0xd3d3d300);
            o->buttoncolor((fltk::Color)0xd3d3d300);
            o->callback((fltk::Callback*)cb_Step1);
          }
           {fltk::Button* o = new fltk::Button(138, 22, 50, 20, "Reset");
            o->buttonbox(fltk::PLASTIC_UP_BOX);
            o->color((fltk::Color)0xd3d3d300);
            o->buttoncolor((fltk::Color)0xd3d3d300);
            o->shortcut(0x4007a);
            o->callback((fltk::Callback*)cb_Reset1);
          }
           {fltk::Button* o = new fltk::Button(87, 22, 50, 20, "play");
            o->buttonbox(fltk::PLASTIC_UP_BOX);
            o->color((fltk::Color)0xd3d3d300);
            o->buttoncolor((fltk::Color)0xd3d3d300);
            o->callback((fltk::Callback*)cb_play);
          }
          o->end();
        }
         {fltk::Group* o = ui_tab_grp = new fltk::Group(0, 85, 310, 855);
          o->set_vertical();
          o->box(fltk::DOWN_BOX);
          o->color((fltk::Color)0xb6b6b600);
          o->begin();
           {fltk::TabGroup* o = ui_main_tab = new fltk::TabGroup(0, 5, 310, 850);
            o->set_vertical();
            o->box(fltk::NO_BOX);
            o->buttonbox(fltk::PLASTIC_UP_BOX);
            o->color((fltk::Color)0xc5c5c500);
            o->begin();
             {fltk::Group* o = new fltk::Group(10, 30, 300, 795, "conf");
              o->set_vertical();
              o->begin();
               {fltk::Group* o = new fltk::Group(0, 531, 290, 259, "Scenes");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0x9b9b9b00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->begin();
                 {fltk::Browser* o = ui_scene_browser = new fltk::Browser(0, 17, 278, 61);
                  o->callback((fltk::Callback*)cb_ui_scene_browser);
                }
                 {fltk::Button* o = new fltk::Button(2, 78, 40, 20, "load");
                  o->callback((fltk::Callback*)cb_load2);
                }
                 {fltk::Button* o = new fltk::Button(42, 79, 40, 20, "cont");
                  o->callback((fltk::Callback*)cb_cont);
                  o->tooltip("set the current scene as the default one for the current controller");
                }
                 {fltk::ValueSlider* o = ui_env_size[0] = new fltk::ValueSlider(60, 137, 175, 21, "x");
                  o->maximum(5);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_env_size);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::Button* o = new fltk::Button(40, 99, 40, 25, "create");
                  o->callback((fltk::Callback*)cb_create);
                }
                 {fltk::ValueSlider* o = ui_env_size[1] = new fltk::ValueSlider(60, 157, 175, 21, "y");
                  o->maximum(5);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_env_size1);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_env_size[2] = new fltk::ValueSlider(60, 178, 175, 16, "z");
                  o->maximum(5);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_env_size2);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::Button* o = new fltk::Button(0, 99, 40, 25, "edit");
                  o->callback((fltk::Callback*)cb_edit3);
                }
                 {fltk::ValueSlider* o = ui_env_mu = new fltk::ValueSlider(60, 194, 180, 21, "mu");
                  o->maximum(200);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_env_mu);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_env_bounce = new fltk::ValueSlider(60, 213, 175, 21, "bounce");
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_env_bounce);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::Button* o = new fltk::Button(190, 79, 65, 25, "duplicate");
                  o->callback((fltk::Callback*)cb_duplicate);
                }
                 {fltk::Button* o = new fltk::Button(120, 79, 60, 25, "add block");
                  o->callback((fltk::Callback*)cb_add2);
                }
                 {fltk::CheckButton* o = ui_env_dynamic = new fltk::CheckButton(115, 104, 60, 25, "dynamic");
                  o->callback((fltk::Callback*)cb_ui_env_dynamic);
                }
                 {fltk::ValueSlider* o = ui_env_density = new fltk::ValueSlider(60, 233, 175, 21, "density");
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_env_density);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::CheckButton* o = ui_env_unique = new fltk::CheckButton(190, 104, 60, 25, "unique prop");
                  o->callback((fltk::Callback*)cb_ui_env_unique);
                  o->tooltip("determines if this object should have its own properties like bounce friction\
 or density or just use the global ones");
                }
                o->end();
              }
               {fltk::Group* o = new fltk::Group(0, 299, 283, 151, "Characters");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0x9b9b9b00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->begin();
                 {fltk::Browser* o = ui_character_list = new fltk::Browser(3, 22, 278, 100);
                  o->callback((fltk::Callback*)cb_ui_character_list);
                }
                 {fltk::Button* o = new fltk::Button(45, 122, 40, 20, "save");
                  o->callback((fltk::Callback*)cb_save3);
                }
                 {fltk::Button* o = new fltk::Button(5, 122, 40, 20, "load");
                  o->callback((fltk::Callback*)cb_load3);
                }
                 {fltk::Button* o = new fltk::Button(85, 122, 40, 20, "delete");
                  o->callback((fltk::Callback*)cb_delete1);
                }
                 {fltk::Button* o = new fltk::Button(125, 122, 40, 20, "new");
                  o->callback((fltk::Callback*)cb_new2);
                }
                 {fltk::Button* o = new fltk::Button(165, 122, 40, 20, "edit");
                  o->callback((fltk::Callback*)cb_edit4);
                }
                 {fltk::Button* o = new fltk::Button(205, 122, 40, 20, "create");
                  o->callback((fltk::Callback*)cb_create1);
                }
                ui_mult_characters = new fltk::CheckButton(180, 1, 40, 20, "multiple char");
                 {fltk::Button* o = new fltk::Button(5, 2, 40, 20, "clear");
                  o->callback((fltk::Callback*)cb_clear);
                }
                o->end();
              }
               {fltk::Group* o = new fltk::Group(0, 22, 290, 198, "States");
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0x9b9b9b00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->tooltip("Load different configurations for the controllers");
                o->begin();
                 {fltk::Browser* o = ui_state_browser = new fltk::Browser(5, 21, 278, 177);
                  o->callback((fltk::Callback*)cb_ui_state_browser);
                }
                 {fltk::MenuBar* o = new fltk::MenuBar(0, 3, 90, 20);
                  o->box(fltk::NO_BOX);
                  o->shortcut(0xffe9);
                  o->begin();
                   {fltk::ItemGroup* o = new fltk::ItemGroup("state");
                    o->box(fltk::PLASTIC_UP_BOX);
                    o->begin();
                     {fltk::Item* o = new fltk::Item("new");
                      o->callback((fltk::Callback*)cb_new3);
                    }
                     {fltk::Item* o = new fltk::Item("capture");
                      o->callback((fltk::Callback*)cb_capture1);
                    }
                     {fltk::Item* o = new fltk::Item("reload");
                      o->callback((fltk::Callback*)cb_reload);
                    }
                     {fltk::Item* o = new fltk::Item("save");
                      o->callback((fltk::Callback*)cb_save4);
                    }
                     {fltk::Item* o = new fltk::Item("delete");
                      o->callback((fltk::Callback*)cb_delete2);
                    }
                     {fltk::Item* o = new fltk::Item("snapshot");
                      o->callback((fltk::Callback*)cb_snapshot);
                      o->tooltip("capture the current state but dont save to a file");
                    }
                     {fltk::Item* o = new fltk::Item("rename");
                      o->callback((fltk::Callback*)cb_rename1);
                    }
                    o->end();
                  }
                  o->end();
                }
                o->end();
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(10, 30, 290, 820, "motion");
              o->set_vertical();
              o->box(fltk::FLAT_BOX);
              o->buttonbox(fltk::PLASTIC_UP_BOX);
              o->color((fltk::Color)0xf0f0f000);
              o->buttoncolor((fltk::Color)0xf0f0f000);
              o->hide();
              o->begin();
               {fltk::Group* o = ui_graph_group = new fltk::Group(0, 5, 287, 280);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xa0a0a000);
                o->begin();
                 {fltk::MenuBar* o = ui_graph_menu = new fltk::MenuBar(190, 3, 90, 20, "edit mode");
                  o->color((fltk::Color)0xa0a0a000);
                  o->shortcut(0xffbe);
                  o->align(fltk::ALIGN_LEFT);
                  o->begin();
                   {fltk::ItemGroup* o = ui_curve_edit_mode = new fltk::ItemGroup("move    ");
                    o->box(fltk::PLASTIC_UP_BOX);
                    o->color((fltk::Color)0xa0a0a000);
                    o->align(fltk::ALIGN_LEFT);
                    o->begin();
                     {fltk::Item* o = new fltk::Item("move");
                      o->shortcut(0x61);
                      o->callback((fltk::Callback*)cb_move);
                    }
                     {fltk::Item* o = new fltk::Item("add");
                      o->shortcut(0x73);
                      o->callback((fltk::Callback*)cb_add3);
                    }
                     {fltk::Item* o = new fltk::Item("delete");
                      o->shortcut(0x64);
                      o->callback((fltk::Callback*)cb_delete3);
                    }
                     {fltk::Item* o = new fltk::Item("free");
                      o->shortcut(0x66);
                      o->callback((fltk::Callback*)cb_free);
                    }
                     {fltk::Item* o = new fltk::Item("straighten");
                      o->shortcut(0x67);
                      o->callback((fltk::Callback*)cb_straighten);
                    }
                     {fltk::Item* o = new fltk::Item("flatten");
                      o->callback((fltk::Callback*)cb_flatten);
                    }
                     {fltk::Item* o = new fltk::Item("edit bounds");
                      o->callback((fltk::Callback*)cb_edit5);
                    }
                    o->end();
                  }
                  o->end();
                }
                 {fltk::Group* o = ui_graphviewer_group = new fltk::Group(0, 20, 285, 215);
                  o->begin();
                   {HumanWindowGraphViewer* o = ui_graph_viewer = new HumanWindowGraphViewer(5, 5, 275, 210);
                    o->box(fltk::DOWN_BOX);
                    o->color((fltk::Color)0x7eabf000);
                    o->align(fltk::ALIGN_LEFT);
                    fltk::Group::current()->resizable(o);
                  }
                  o->end();
                }
                 {fltk::Slider* o = ui_graph_phase = new fltk::Slider(5, 235, 275, 20);
                  o->box(fltk::DOWN_BOX);
                  o->color((fltk::Color)0xc5c5c500);
                  o->buttoncolor((fltk::Color)0xc5c5c500);
                  o->step(0.001);
                  o->callback((fltk::Callback*)cb_ui_graph_phase);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::Group* o = ui_frame_group = new fltk::Group(70, 255, 210, 25);
                  o->begin();
                   {fltk::ValueInput* o = ui_current_frame = new fltk::ValueInput(0, 0, 40, 20);
                    o->minimum(1);
                    o->maximum(5000);
                    o->step(1);
                    o->value(1);
                    o->callback((fltk::Callback*)cb_ui_current_frame);
                    o->tooltip("current frame");
                  }
                   {fltk::ValueInput* o = ui_curve_pt[0] = new fltk::ValueInput(85, 0, 60, 20);
                    o->callback((fltk::Callback*)cb_ui_curve_pt);
                  }
                   {fltk::ValueInput* o = ui_curve_pt[1] = new fltk::ValueInput(145, 0, 65, 19);
                    o->minimum(-1);
                    o->step(0.05);
                    o->callback((fltk::Callback*)cb_ui_curve_pt1);
                  }
                   {fltk::Button* o = new fltk::Button(65, 1, 20, 20, ">");
                    o->callback((fltk::Callback*)cb_);
                  }
                  o->end();
                }
                 {fltk::Group* o = ui_time_group = new fltk::Group(80, 255, 197, 20);
                  o->hide();
                  o->begin();
                   {fltk::ValueInput* o = ui_last_time = new fltk::ValueInput(132, 0, 65, 20);
                    o->maximum(5000);
                    o->step(0.1);
                    o->callback((fltk::Callback*)cb_ui_last_time);
                    o->tooltip("last time to show\n");
                  }
                   {fltk::ValueInput* o = ui_first_time = new fltk::ValueInput(70, 0, 65, 20);
                    o->maximum(5000);
                    o->step(0.1);
                    o->callback((fltk::Callback*)cb_ui_first_time);
                    o->tooltip("first time to show\n");
                  }
                   {fltk::ValueInput* o = ui_current_time = new fltk::ValueInput(5, 0, 65, 20);
                    o->maximum(30);
                    o->step(0.001);
                    o->callback((fltk::Callback*)cb_ui_current_time);
                    o->tooltip("current time");
                  }
                  o->end();
                }
                 {fltk::CheckButton* o = ui_show_time = new fltk::CheckButton(50, 257, 21, 16, "frames");
                  o->callback((fltk::Callback*)cb_ui_show_time);
                  o->align(fltk::ALIGN_LEFT);
                  o->tooltip("toggles between frame control or time control");
                }
                o->end();
              }
               {fltk::TabGroup* o = ui_motion_tab_group = new fltk::TabGroup(0, 480, 285, 335);
                o->set_vertical();
                o->begin();
                 {fltk::Group* o = new fltk::Group(0, 25, 285, 310, "Controller");
                  o->set_vertical();
                  o->begin();
                   {fltk::Browser* o = ui_motionList = new fltk::Browser(5, 0, 278, 260);
                    o->callback((fltk::Callback*)cb_ui_motionList);
                  }
                   {fltk::Group* o = new fltk::Group(5, 265, 135, 40, "controler");
                    o->box(fltk::DOWN_BOX);
                    o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                    o->begin();
                     {fltk::Button* o = new fltk::Button(50, 15, 44, 20, "reload");
                      o->callback((fltk::Callback*)cb_reload1);
                      o->tooltip("reload the selected controller from file discarding any changes made");
                    }
                     {fltk::Button* o = new fltk::Button(5, 15, 44, 20, "new");
                      o->callback((fltk::Callback*)cb_new4);
                      o->tooltip("create a new empty controller");
                    }
                    o->end();
                  }
                   {fltk::Group* o = new fltk::Group(140, 265, 145, 40, "motion");
                    o->box(fltk::DOWN_BOX);
                    o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                    o->begin();
                     {fltk::Button* o = new fltk::Button(5, 15, 44, 20, "delete");
                      o->callback((fltk::Callback*)cb_delete4);
                      o->align(fltk::ALIGN_WRAP);
                      o->tooltip("delete the motion and the file for the motion");
                    }
                    o->end();
                  }
                  o->end();
                }
                 {fltk::Group* o = new fltk::Group(0, 20, 283, 200, "KnMotion");
                  o->hide();
                  o->begin();
                   {fltk::Browser* o = ui_kn_motion_list = new fltk::Browser(5, 5, 278, 155);
                    o->callback((fltk::Callback*)cb_ui_kn_motion_list);
                  }
                   {fltk::Button* o = new fltk::Button(130, 180, 44, 20, "mirror");
                    o->callback((fltk::Callback*)cb_mirror);
                  }
                   {fltk::Button* o = new fltk::Button(175, 180, 35, 20, "trans");
                    o->callback((fltk::Callback*)cb_trans);
                  }
                   {fltk::Button* o = new fltk::Button(210, 180, 40, 20, "orient");
                    o->callback((fltk::Callback*)cb_orient);
                  }
                   {fltk::Button* o = new fltk::Button(65, 180, 65, 20, "composite");
                    o->callback((fltk::Callback*)cb_composite);
                  }
                  o->end();
                }
                o->end();
              }
               {fltk::Group* o = ui_channel_group = new fltk::Group(0, 280, 290, 195);
                o->box(fltk::DOWN_BOX);
                o->begin();
                 {fltk::MultiBrowser* o = ui_channelList = new fltk::MultiBrowser(15, 3, 270, 167);
                  o->type(fltk::MultiBrowser::MULTI);
                  o->callback((fltk::Callback*)cb_ui_channelList);
                  o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
                }
                 {fltk::Button* o = new fltk::Button(3, 14, 10, 20);
                  o->set_vertical();
                  o->shortcut(0xffbf);
                  o->callback((fltk::Callback*)cb_1);
                }
                 {fltk::Button* o = new fltk::Button(3, 42, 10, 20);
                  o->set_vertical();
                  o->shortcut(0xffc0);
                  o->callback((fltk::Callback*)cb_2);
                }
                 {fltk::CheckButton* o = ui_channel_active = new fltk::CheckButton(0, 69, 15, 15);
                  o->set_vertical();
                  o->callback((fltk::Callback*)cb_ui_channel_active);
                }
                new fltk::Button(15, 170, 50, 20, "delete");
                 {fltk::CheckButton* o = ui_trajectories_vis = new fltk::CheckButton(65, 170, 50, 20, "trajectories");
                  o->callback((fltk::Callback*)cb_ui_trajectories_vis);
                  o->tooltip("show only the trajectories");
                }
                o->end();
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(10, 25, 290, 810, "env");
              o->set_vertical();
              o->hide();
            }
             {fltk::Group* o = new fltk::Group(0, 20, 310, 805, "dev");
              o->set_vertical();
              o->buttonbox(fltk::PLASTIC_UP_BOX);
              o->hide();
              o->begin();
               {fltk::Group* o = new fltk::Group(10, 405, 285, 365);
                o->set_vertical();
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->tooltip("Random Stuff");
                o->begin();
                 {fltk::ValueSlider* o = ui_desired_heading = new fltk::ValueSlider(110, 5, 165, 15, "desired heading");
                  o->minimum(-2);
                  o->maximum(2);
                  o->callback((fltk::Callback*)cb_ui_desired_heading);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_stanceSwingRatio = new fltk::ValueSlider(110, 21, 165, 15, "stance/swing ratio");
                  o->value(0.5);
                  o->callback((fltk::Callback*)cb_ui_stanceSwingRatio);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_stanceToeHeel = new fltk::ValueSlider(110, 38, 165, 15, "toe/heel ratio");
                  o->maximum(1.2);
                  o->value(0.5);
                  o->callback((fltk::Callback*)cb_ui_stanceToeHeel);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_p_mult = new fltk::ValueSlider(110, 54, 165, 15, "p mult");
                  o->maximum(10);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_p_mult);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_d_mult = new fltk::ValueSlider(110, 71, 165, 15, "d mult");
                  o->maximum(10);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_d_mult);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_psw_mult = new fltk::ValueSlider(110, 87, 165, 15, "stance mult");
                  o->value(0.5);
                  o->callback((fltk::Callback*)cb_ui_psw_mult);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_dsw_mult = new fltk::ValueSlider(110, 104, 165, 15, "swing mult");
                  o->value(0.5);
                  o->callback((fltk::Callback*)cb_ui_dsw_mult);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_contact_offset = new fltk::ValueSlider(110, 120, 165, 15, "stance offset");
                  o->maximum(1.2);
                  o->value(0.5);
                  o->callback((fltk::Callback*)cb_ui_contact_offset);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_contact_offset_z = new fltk::ValueSlider(110, 137, 165, 15, "stance offset z");
                  o->minimum(-0.5);
                  o->maximum(0.5);
                  o->callback((fltk::Callback*)cb_ui_contact_offset_z);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_sim_d_x = new fltk::ValueSlider(110, 153, 165, 15, "simd x");
                  o->minimum(-1);
                  o->step(0.001);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_sim_d_x);
                  o->align(fltk::ALIGN_LEFT);
                  o->when(fltk::WHEN_CHANGED);
                }
                 {fltk::ValueSlider* o = ui_sim_d_z = new fltk::ValueSlider(110, 170, 165, 15, "simd z");
                  o->minimum(-1);
                  o->step(0.001);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_sim_d_z);
                  o->align(fltk::ALIGN_LEFT);
                  o->when(fltk::WHEN_CHANGED);
                }
                 {fltk::ValueSlider* o = ui_sim_v_x = new fltk::ValueSlider(110, 186, 165, 15, "simv x");
                  o->minimum(-1);
                  o->step(0.001);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_sim_v_x);
                  o->align(fltk::ALIGN_LEFT);
                  o->when(fltk::WHEN_CHANGED);
                }
                 {fltk::ValueSlider* o = ui_sim_v_z = new fltk::ValueSlider(110, 203, 165, 15, "simv z");
                  o->minimum(-1);
                  o->step(0.001);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_sim_v_z);
                  o->align(fltk::ALIGN_LEFT);
                  o->when(fltk::WHEN_CHANGED);
                }
                 {fltk::ValueSlider* o = ui_sim_root_scale = new fltk::ValueSlider(110, 220, 165, 15, "root sc");
                  o->maximum(2);
                  o->step(0.001);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_sim_root_scale);
                  o->align(fltk::ALIGN_LEFT);
                  o->when(fltk::WHEN_CHANGED);
                }
                 {fltk::LightButton* o = ui_select_mode = new fltk::LightButton(60, 340, 60, 20, "select");
                  o->box(fltk::PLASTIC_UP_BOX);
                  o->buttonbox(fltk::PLASTIC_UP_BOX);
                  o->color((fltk::Color)0xd3d3d300);
                  o->selection_color((fltk::Color)0xff0000);
                  o->buttoncolor((fltk::Color)0xa0a0a000);
                  o->tooltip("Load a parameter editor for any serializable picked in the viewer");
                }
                 {fltk::Output* o = ui_selected_joint = new fltk::Output(120, 340, 90, 20);
                  o->tooltip("the current motion");
                }
                 {fltk::Button* o = new fltk::Button(210, 340, 60, 20, "edit");
                  o->buttonbox(fltk::PLASTIC_UP_BOX);
                  o->callback((fltk::Callback*)cb_edit6);
                }
                 {fltk::Group* o = new fltk::Group(55, 265, 220, 70);
                  o->box(fltk::DOWN_BOX);
                  o->color((fltk::Color)0xa0a0a000);
                  o->begin();
                   {fltk::Button* o = new fltk::Button(155, 5, 20, 20, "^");
                    o->set_vertical();
                    o->buttonbox(fltk::PLASTIC_UP_BOX);
                    o->callback((fltk::Callback*)cb_3);
                  }
                   {fltk::Button* o = new fltk::Button(175, 25, 20, 20, ">");
                    o->set_vertical();
                    o->buttonbox(fltk::PLASTIC_UP_BOX);
                    o->callback((fltk::Callback*)cb_4);
                  }
                   {fltk::Button* o = new fltk::Button(135, 25, 20, 20, "<");
                    o->set_vertical();
                    o->buttonbox(fltk::PLASTIC_UP_BOX);
                    o->callback((fltk::Callback*)cb_5);
                  }
                   {fltk::Button* o = new fltk::Button(155, 45, 20, 20, "v");
                    o->set_vertical();
                    o->buttonbox(fltk::PLASTIC_UP_BOX);
                    o->callback((fltk::Callback*)cb_v);
                  }
                   {fltk::ValueInput* o = ui_ext_force_duration = new fltk::ValueInput(70, 35, 60, 20, "duration");
                    o->value(0.2);
                  }
                   {fltk::ValueInput* o = ui_ext_force = new fltk::ValueInput(70, 15, 60, 15, "force");
                    o->value(100);
                  }
                  o->end();
                }
                 {fltk::ValueSlider* o = ui_vel_desired_z = new fltk::ValueSlider(110, 235, 165, 15, "vel z");
                  o->minimum(-1);
                  o->maximum(2);
                  o->step(0.001);
                  o->callback((fltk::Callback*)cb_ui_vel_desired_z);
                  o->align(fltk::ALIGN_LEFT);
                  o->when(fltk::WHEN_CHANGED);
                }
                 {fltk::ValueSlider* o = ui_desired_v_scale = new fltk::ValueSlider(110, 250, 165, 15, "desired v scale");
                  o->maximum(200);
                  o->step(0.001);
                  o->value(1);
                  o->callback((fltk::Callback*)cb_ui_desired_v_scale);
                  o->align(fltk::ALIGN_LEFT);
                  o->when(fltk::WHEN_CHANGED);
                }
                o->end();
              }
               {fltk::Group* o = new fltk::Group(10, 85, 290, 175);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0x9b9b9b00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->tooltip("Load different configurations for the controllers");
                o->begin();
                 {fltk::Browser* o = ui_controller_browser = new fltk::Browser(5, 22, 280, 148);
                  o->callback((fltk::Callback*)cb_ui_controller_browser);
                  o->when(fltk::WHEN_CHANGED);
                }
                 {fltk::MenuBar* o = new fltk::MenuBar(6, 3, 199, 20);
                  o->box(fltk::NO_BOX);
                  o->shortcut(0xffe9);
                  o->begin();
                   {fltk::ItemGroup* o = new fltk::ItemGroup("Controllers");
                    o->box(fltk::PLASTIC_UP_BOX);
                    o->begin();
                     {fltk::Item* o = new fltk::Item("edit");
                      o->callback((fltk::Callback*)cb_edit7);
                    }
                     {fltk::Item* o = new fltk::Item("match to human");
                      o->callback((fltk::Callback*)cb_match);
                    }
                     {fltk::Item* o = new fltk::Item("match to skeleton");
                      o->callback((fltk::Callback*)cb_match1);
                    }
                     {fltk::Item* o = new fltk::Item("match to frame");
                      o->callback((fltk::Callback*)cb_match2);
                    }
                    o->end();
                  }
                  o->end();
                }
                 {fltk::LightButton* o = ui_controll_active = new fltk::LightButton(94, 3, 55, 18, "active");
                  o->buttonbox(fltk::PLASTIC_UP_BOX);
                  o->set_flag(fltk::STATE);
                  o->callback((fltk::Callback*)cb_ui_controll_active);
                }
                 {fltk::LightButton* o = ui_controll_visible = new fltk::LightButton(147, 3, 55, 18, "vis");
                  o->buttonbox(fltk::PLASTIC_UP_BOX);
                  o->callback((fltk::Callback*)cb_ui_controll_visible);
                }
                o->end();
              }
               {fltk::Group* o = ui_manip_group = new fltk::Group(10, 260, 290, 145);
                o->box(fltk::DOWN_BOX);
                o->color((fltk::Color)0x9b9b9b00);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->tooltip("Load different configurations for the controllers");
                o->begin();
                 {fltk::MenuBar* o = new fltk::MenuBar(5, 3, 200, 20);
                  o->box(fltk::NO_BOX);
                  o->shortcut(0xffe9);
                  o->begin();
                   {fltk::ItemGroup* o = new fltk::ItemGroup("Manipulators");
                    o->box(fltk::PLASTIC_UP_BOX);
                    o->begin();
                     {fltk::Item* o = new fltk::Item("edit");
                      o->callback((fltk::Callback*)cb_edit8);
                    }
                     {fltk::Item* o = new fltk::Item("match to human");
                      o->callback((fltk::Callback*)cb_match3);
                    }
                     {fltk::Item* o = new fltk::Item("match to skeleton");
                      o->callback((fltk::Callback*)cb_match4);
                    }
                     {fltk::Item* o = new fltk::Item("match to frame");
                      o->callback((fltk::Callback*)cb_match5);
                    }
                    o->end();
                  }
                  o->end();
                }
                 {fltk::Browser* o = ui_manip_browser = new fltk::Browser(5, 22, 280, 110);
                  o->callback((fltk::Callback*)cb_ui_manip_browser);
                  o->when(fltk::WHEN_CHANGED);
                }
                 {fltk::LightButton* o = ui_manip_active = new fltk::LightButton(100, 4, 55, 18, "active");
                  o->buttonbox(fltk::PLASTIC_UP_BOX);
                  o->set_flag(fltk::STATE);
                  o->callback((fltk::Callback*)cb_ui_manip_active);
                }
                 {fltk::LightButton* o = ui_manip_visible = new fltk::LightButton(155, 4, 40, 18, "vis");
                  o->buttonbox(fltk::PLASTIC_UP_BOX);
                  o->set_flag(fltk::STATE);
                  o->callback((fltk::Callback*)cb_ui_manip_visible);
                }
                o->end();
              }
               {fltk::Group* o = new fltk::Group(10, 775, 275, 25);
                o->begin();
                 {fltk::Button* o = new fltk::Button(10, 0, 50, 20, "reduce");
                  o->callback((fltk::Callback*)cb_reduce2);
                  o->tooltip("reduce the selected channels to bezier curves with flat tangents.\n");
                }
                 {fltk::ValueInput* o = ui_curve_fit_points = new fltk::ValueInput(60, 0, 40, 20);
                  o->maximum(10);
                  o->step(1);
                  o->value(3);
                  o->callback((fltk::Callback*)cb_ui_curve_fit_points);
                  o->tooltip("number of adjacent points to average when considering the slope");
                }
                 {fltk::ValueInput* o = ui_curve_fit_tolerance = new fltk::ValueInput(100, 0, 40, 20);
                  o->step(0.0001);
                  o->value(0.2);
                  o->callback((fltk::Callback*)cb_ui_curve_fit_tolerance);
                  o->tooltip("tolerance when deciding to add point, changes when -tol > slope >tol");
                }
                 {fltk::Button* o = new fltk::Button(182, 0, 42, 20, "merge");
                  o->callback((fltk::Callback*)cb_merge1);
                  o->tooltip("merge any control points within the tolerance specified\n");
                }
                 {fltk::ValueInput* o = ui_curve_merge_tolerance = new fltk::ValueInput(225, 0, 40, 20);
                  o->step(0.0001);
                  o->value(0.1);
                  o->callback((fltk::Callback*)cb_ui_curve_merge_tolerance);
                  o->tooltip("tolerance for merging points. basically if there is a point within this dista\
nce to the left this point will be deleted. unless it is the endpoint");
                }
                 {fltk::ValueInput* o = ui_curve_conc_tolerance = new fltk::ValueInput(139, 0, 40, 20);
                  o->step(0.0001);
                  o->value(0.2);
                  o->callback((fltk::Callback*)cb_ui_curve_conc_tolerance);
                  o->tooltip("tolerance for adding point based on change in concavity");
                }
                o->end();
              }
               {fltk::LightButton* o = ui_interactive_edit = new fltk::LightButton(72, 14, 55, 20, "intrctv");
                o->box(fltk::PLASTIC_UP_BOX);
                o->buttonbox(fltk::PLASTIC_UP_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->selection_color((fltk::Color)0xff0000);
                o->buttoncolor((fltk::Color)0xa0a0a000);
                o->set_flag(fltk::STATE);
                o->callback((fltk::Callback*)cb_ui_interactive_edit);
              }
               {fltk::Button* o = new fltk::Button(127, 15, 50, 20, "Stop");
                o->buttonbox(fltk::PLASTIC_UP_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->buttoncolor((fltk::Color)0xd3d3d300);
                o->callback((fltk::Callback*)cb_Stop);
              }
               {fltk::Button* o = new fltk::Button(177, 15, 50, 20, "Start");
                o->buttonbox(fltk::PLASTIC_UP_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->buttoncolor((fltk::Color)0xd3d3d300);
                o->callback((fltk::Callback*)cb_Start);
              }
               {fltk::LightButton* o = ui_draw = new fltk::LightButton(22, 25, 50, 20, "draw");
                o->box(fltk::PLASTIC_UP_BOX);
                o->buttonbox(fltk::PLASTIC_UP_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->selection_color((fltk::Color)0xff0000);
                o->buttoncolor((fltk::Color)0xa0a0a000);
                o->callback((fltk::Callback*)cb_ui_draw);
                o->tooltip("toggles the drawing of the scene..");
              }
               {fltk::ValueInput* o = ui_sample_bounds[4] = new fltk::ValueInput(36, 48, 45, 25, "seed");
                o->maximum(255);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_sample_bounds);
              }
               {fltk::ValueInput* o = ui_sample_bounds[0] = new fltk::ValueInput(120, 35, 45, 25, "min z");
                o->maximum(4);
                o->step(0.001);
                o->callback((fltk::Callback*)cb_ui_sample_bounds1);
              }
               {fltk::ValueInput* o = ui_sample_bounds[1] = new fltk::ValueInput(120, 60, 45, 25, "max z");
                o->maximum(4);
                o->step(0.001);
                o->callback((fltk::Callback*)cb_ui_sample_bounds2);
              }
               {fltk::ValueInput* o = ui_sample_bounds[3] = new fltk::ValueInput(205, 35, 45, 25, "max y");
                o->maximum(4);
                o->step(0.001);
                o->callback((fltk::Callback*)cb_ui_sample_bounds3);
              }
               {fltk::ValueInput* o = ui_sample_bounds[2] = new fltk::ValueInput(205, 60, 45, 25, "min y");
                o->maximum(4);
                o->step(0.001);
                o->callback((fltk::Callback*)cb_ui_sample_bounds4);
              }
               {fltk::Button* o = new fltk::Button(230, 15, 50, 20, "expand");
                o->buttonbox(fltk::PLASTIC_UP_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->buttoncolor((fltk::Color)0xd3d3d300);
                o->callback((fltk::Callback*)cb_expand2);
              }
               {fltk::LightButton* o = ui_pick_mode = new fltk::LightButton(20, 5, 55, 20, "pick");
                o->box(fltk::PLASTIC_UP_BOX);
                o->buttonbox(fltk::PLASTIC_UP_BOX);
                o->color((fltk::Color)0xd3d3d300);
                o->selection_color((fltk::Color)0xff0000);
                o->buttoncolor((fltk::Color)0xa0a0a000);
                o->set_flag(fltk::STATE);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(10, 30, 285, 780, "joint");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::MultiBrowser* o = ui_jointList = new fltk::MultiBrowser(5, 35, 280, 260, "Joint");
                o->type(fltk::MultiBrowser::MULTI);
                o->callback((fltk::Callback*)cb_ui_jointList);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jointP = new fltk::ValueSlider(50, 355, 140, 20, "P");
                o->maximum(5);
                o->step(0.001);
                o->value(0.3);
                o->callback((fltk::Callback*)cb_ui_jointP);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jointD = new fltk::ValueSlider(50, 375, 140, 20, "D");
                o->maximum(0.1);
                o->step(0.0001);
                o->value(0.01);
                o->callback((fltk::Callback*)cb_ui_jointD);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::CheckButton* o = ui_jointGrav = new fltk::CheckButton(30, 397, 136, 20, "Gravity Compensate");
                o->callback((fltk::Callback*)cb_ui_jointGrav);
              }
               {fltk::CheckButton* o = ui_jointPD = new fltk::CheckButton(31, 415, 45, 20, "PD");
                o->callback((fltk::Callback*)cb_ui_jointPD);
              }
               {fltk::ValueSlider* o = ui_jointJX = new fltk::ValueSlider(80, 475, 175, 20, "jX");
                o->minimum(-5);
                o->maximum(5);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_jointJX);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jointJY = new fltk::ValueSlider(80, 495, 175, 20, "jY");
                o->minimum(-5);
                o->maximum(5);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_jointJY);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jointJZ = new fltk::ValueSlider(80, 515, 175, 20, "jZ");
                o->minimum(-5);
                o->maximum(5);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_jointJZ);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_jointMaxT = new fltk::ValueSlider(80, 535, 175, 20, "maxT");
                o->minimum(-5);
                o->maximum(5);
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_jointMaxT);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::Group* o = new fltk::Group(20, 650, 258, 115, "Euler Control");
                o->box(fltk::DOWN_BOX);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->begin();
                 {fltk::ValueSlider* o = ui_jointRX = new fltk::ValueSlider(50, 35, 175, 20, "rX");
                  o->minimum(-180);
                  o->maximum(180);
                  o->step(1);
                  o->callback((fltk::Callback*)cb_ui_jointRX);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_jointRY = new fltk::ValueSlider(50, 55, 175, 20, "rY");
                  o->minimum(-180);
                  o->maximum(180);
                  o->step(1);
                  o->callback((fltk::Callback*)cb_ui_jointRY);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::ValueSlider* o = ui_jointRZ = new fltk::ValueSlider(50, 75, 175, 20, "rZ");
                  o->minimum(-180);
                  o->maximum(180);
                  o->step(1);
                  o->callback((fltk::Callback*)cb_ui_jointRZ);
                  o->align(fltk::ALIGN_LEFT);
                }
                ui_feedback = new fltk::CheckButton(110, 90, 25, 25, "live angles");
                o->end();
              }
               {fltk::CheckButton* o = ui_char_frame = new fltk::CheckButton(31, 435, 85, 20, "char frame");
                o->callback((fltk::Callback*)cb_ui_char_frame);
              }
               {fltk::Output* o = ui_joint_type = new fltk::Output(75, 325, 105, 25, "type");
                o->box(fltk::NO_BOX);
                o->buttonbox(fltk::NO_BOX);
              }
               {fltk::Output* o = ui_multiSelect = new fltk::Output(10, 300, 145, 20);
                o->box(fltk::NO_BOX);
                o->buttonbox(fltk::NO_BOX);
              }
               {fltk::Button* o = new fltk::Button(155, 300, 45, 20, "parm");
                o->callback((fltk::Callback*)cb_parm);
              }
               {fltk::Button* o = new fltk::Button(200, 300, 50, 20, "body");
                o->callback((fltk::Callback*)cb_body);
              }
               {fltk::ValueSlider* o = ui_joint_scale[0] = new fltk::ValueSlider(80, 565, 175, 20, "scale_x");
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_joint_scale);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_joint_scale[2] = new fltk::ValueSlider(80, 605, 175, 20, "scale_z");
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_joint_scale1);
                o->align(fltk::ALIGN_LEFT);
              }
               {fltk::ValueSlider* o = ui_joint_scale[1] = new fltk::ValueSlider(80, 585, 175, 20, "scale_y");
                o->value(1);
                o->callback((fltk::Callback*)cb_ui_joint_scale2);
                o->align(fltk::ALIGN_LEFT);
              }
              o->end();
            }
            o->end();
          }
          o->end();
        }
        o->end();
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(305, 0, 1309, 930);
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0x50505000);
      o->begin();
       {fltk::Input* o = ui_cmd_line = new fltk::Input(265, 896, 181, 29, "cmd");
        o->color((fltk::Color)56);
        o->textcolor((fltk::Color)0xe8e8d800);
        o->labelcolor((fltk::Color)0xffffff00);
        o->callback((fltk::Callback*)cb_ui_cmd_line);
        o->when(fltk::WHEN_ENTER_KEY_ALWAYS);
      }
       {fltk::Output* o = ui_message = new fltk::Output(445, 896, 840, 27);
        o->color((fltk::Color)56);
        o->textcolor((fltk::Color)0xffffff00);
        o->labelcolor((fltk::Color)0xffffff00);
      }
       {AppViewer* o = ui_viewer = new AppViewer(5, 5, 1299, 885);
        o->box(fltk::DOWN_BOX);
        o->color((fltk::Color)0xd3d3d300);
        fltk::Group::current()->resizable(o);
      }
      ui_status_bar = new fltk::ProgressBar(45, 894, 185, 30);
      ui_num_found = new fltk::ValueOutput(0, 894, 40, 30);
      o->end();
    }
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_composite_window = new fltk::Window(445, 215);
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Button* o = new fltk::Button(385, 164, 50, 26, "make");
      o->callback((fltk::Callback*)cb_makea);
    }
    ui_control_motion = new fltk::Input(45, 165, 140, 19, "control");
     {fltk::Group* o = new fltk::Group(5, 15, 205, 44, "left foot");
      o->box(fltk::DOWN_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
      o->begin();
       {fltk::CheckButton* o = ui_comp[0] = new fltk::CheckButton(75, 14, 20, 29, "x");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[1] = new fltk::CheckButton(95, 14, 20, 29, "y");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[2] = new fltk::CheckButton(115, 14, 20, 29, "z");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[3] = new fltk::CheckButton(135, 14, 20, 29, "rx");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[4] = new fltk::CheckButton(155, 14, 20, 29, "ry");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[5] = new fltk::CheckButton(175, 14, 20, 29, "rz");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(5, 61, 205, 46, "right foot");
      o->box(fltk::DOWN_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
      o->begin();
       {fltk::CheckButton* o = ui_comp[6] = new fltk::CheckButton(75, 16, 20, 29, "x");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[7] = new fltk::CheckButton(95, 16, 20, 29, "y");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[8] = new fltk::CheckButton(115, 16, 20, 29, "z");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[9] = new fltk::CheckButton(135, 16, 20, 29, "rx");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[10] = new fltk::CheckButton(155, 16, 20, 29, "ry");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[11] = new fltk::CheckButton(175, 16, 20, 29, "rz");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(5, 112, 205, 46, "root");
      o->box(fltk::DOWN_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
      o->begin();
       {fltk::CheckButton* o = ui_comp[12] = new fltk::CheckButton(80, 16, 20, 29, "x");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[13] = new fltk::CheckButton(100, 16, 20, 29, "y");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[14] = new fltk::CheckButton(120, 16, 20, 29, "z");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[15] = new fltk::CheckButton(140, 16, 20, 29, "rx");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[16] = new fltk::CheckButton(160, 16, 20, 29, "ry");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[17] = new fltk::CheckButton(180, 16, 20, 29, "rz");
        o->set_vertical();
        o->set_flag(fltk::STATE);
        o->align(fltk::ALIGN_TOP);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(220, 12, 205, 44, "left hand");
      o->box(fltk::DOWN_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
      o->begin();
       {fltk::CheckButton* o = ui_comp[18] = new fltk::CheckButton(80, 14, 20, 29, "x");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[19] = new fltk::CheckButton(100, 14, 20, 29, "y");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[20] = new fltk::CheckButton(120, 14, 20, 29, "z");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[21] = new fltk::CheckButton(140, 14, 20, 29, "rx");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[22] = new fltk::CheckButton(160, 14, 20, 29, "ry");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[23] = new fltk::CheckButton(180, 14, 20, 29, "rz");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(220, 58, 210, 49, "right hand");
      o->box(fltk::DOWN_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
      o->begin();
       {fltk::CheckButton* o = ui_comp[24] = new fltk::CheckButton(80, 19, 20, 29, "x");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[25] = new fltk::CheckButton(100, 19, 20, 29, "y");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[26] = new fltk::CheckButton(120, 19, 20, 29, "z");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[27] = new fltk::CheckButton(140, 19, 20, 29, "rx");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[28] = new fltk::CheckButton(160, 19, 20, 29, "ry");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[29] = new fltk::CheckButton(180, 19, 20, 29, "rz");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(220, 114, 210, 44, "com");
      o->box(fltk::DOWN_BOX);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
      o->begin();
       {fltk::CheckButton* o = ui_comp[30] = new fltk::CheckButton(90, 14, 20, 29, "x");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[31] = new fltk::CheckButton(110, 14, 20, 29, "y");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
       {fltk::CheckButton* o = ui_comp[32] = new fltk::CheckButton(130, 14, 20, 29, "z");
        o->set_vertical();
        o->align(fltk::ALIGN_TOP);
      }
      o->end();
    }
     {fltk::Group* o = new fltk::Group(15, 186, 235, 26);
      o->box(fltk::DOWN_BOX);
      o->begin();
       {fltk::ValueInput* o = ui_first_frame_comp = new fltk::ValueInput(75, 5, 45, 20, "first");
        o->maximum(100);
        o->step(1);
        o->value(1);
      }
       {fltk::ValueInput* o = ui_last_frame_comp = new fltk::ValueInput(145, 5, 90, 20, "last");
        o->maximum(2000);
        o->step(1);
        o->value(200);
      }
       {fltk::CheckButton* o = ui_all_frames = new fltk::CheckButton(5, 5, 45, 20, "all");
        o->callback((fltk::Callback*)cb_ui_all_frames);
      }
      o->end();
    }
    ui_group_name = new fltk::Input(230, 166, 140, 19, "name");
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_node_window = new fltk::Window(1315, 872);
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = new fltk::Group(6, 2, 1309, 855, "Node Editor");
      o->begin();
       {HumanWindowNodeViewer* o = ui_node_viewer = new HumanWindowNodeViewer(13, 33, 1295, 822);
        o->box(fltk::DOWN_BOX);
        o->color((fltk::Color)0x7eabf000);
        o->align(fltk::ALIGN_LEFT);
      }
       {fltk::MenuBar* o = new fltk::MenuBar(15, 5, 254, 25);
        o->shortcut(0xffe9);
        o->begin();
         {fltk::ItemGroup* o = new fltk::ItemGroup("make");
          o->box(fltk::PLASTIC_UP_BOX);
          o->buttonbox(fltk::PLASTIC_UP_BOX);
          o->begin();
           {fltk::Item* o = new fltk::Item("mult");
            o->callback((fltk::Callback*)cb_mult);
          }
           {fltk::Item* o = new fltk::Item("switch");
            o->callback((fltk::Callback*)cb_switch1);
          }
           {fltk::Item* o = new fltk::Item("modulate");
            o->callback((fltk::Callback*)cb_modulate);
          }
           {fltk::Item* o = new fltk::Item("add");
            o->callback((fltk::Callback*)cb_add4);
          }
           {fltk::Item* o = new fltk::Item("inverse");
            o->callback((fltk::Callback*)cb_inverse);
          }
           {fltk::Item* o = new fltk::Item("trajectory");
            o->callback((fltk::Callback*)cb_trajectory);
          }
          o->end();
        }
         {fltk::ItemGroup* o = new fltk::ItemGroup("change");
          o->box(fltk::PLASTIC_UP_BOX);
          o->begin();
           {fltk::Item* o = new fltk::Item("additive");
            o->callback((fltk::Callback*)cb_additive);
          }
           {fltk::Item* o = new fltk::Item("scale");
            o->callback((fltk::Callback*)cb_scale1);
          }
           {fltk::Item* o = new fltk::Item("inverse");
            o->callback((fltk::Callback*)cb_inverse1);
          }
           {fltk::Item* o = new fltk::Item("feedback");
            o->callback((fltk::Callback*)cb_feedback);
          }
           {fltk::Item* o = new fltk::Item("event");
            o->callback((fltk::Callback*)cb_event);
            o->tooltip("an event channel will skip the rest of an animation to the end of the event.");
          }
           {fltk::Item* o = new fltk::Item("idler");
            o->callback((fltk::Callback*)cb_idler);
            o->tooltip("an idler channel will wait for a certain event to start playing");
          }
          o->end();
        }
         {fltk::ItemGroup* o = new fltk::ItemGroup("edit");
          o->box(fltk::PLASTIC_UP_BOX);
          o->buttonbox(fltk::PLASTIC_UP_BOX);
          o->begin();
           {fltk::Item* o = new fltk::Item("arrange");
            o->callback((fltk::Callback*)cb_arrange);
          }
           {fltk::Item* o = new fltk::Item("detach");
            o->callback((fltk::Callback*)cb_detach);
            o->tooltip("remove the object from this node but keep it around");
          }
           {fltk::Item* o = new fltk::Item("rename");
            o->callback((fltk::Callback*)cb_rename2);
          }
           {fltk::Item* o = new fltk::Item("edit viewer");
            o->callback((fltk::Callback*)cb_edit9);
          }
          o->end();
        }
         {fltk::ItemGroup* o = new fltk::ItemGroup("view");
          o->begin();
           {fltk::Item* o = new fltk::Item("view inputs");
            o->callback((fltk::Callback*)cb_view1);
            o->tooltip("toggle showing only selected");
          }
           {fltk::Item* o = new fltk::Item("view outputs");
            o->callback((fltk::Callback*)cb_view2);
          }
           {fltk::Item* o = new fltk::Item("view connected");
            o->callback((fltk::Callback*)cb_view3);
          }
           {fltk::Item* o = new fltk::Item("hide all");
            o->callback((fltk::Callback*)cb_hide1);
          }
           {fltk::Item* o = new fltk::Item("show all");
            o->callback((fltk::Callback*)cb_show4);
          }
           {fltk::Item* o = new fltk::Item("hide selected");
            o->callback((fltk::Callback*)cb_hide2);
          }
          o->end();
        }
        o->end();
      }
       {fltk::ValueInput* o = ui_node_val = new fltk::ValueInput(345, 3, 95, 25, "node val");
        o->callback((fltk::Callback*)cb_ui_node_val);
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_graph_window = new fltk::Window(719, 530);
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = ui_popviewer_group = new fltk::Group(0, 4, 719, 526);
    }
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_interp_window = new fltk::Window(388, 276);
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = new fltk::Group(0, 0, 388, 150);
      o->box(fltk::DOWN_BOX);
      o->begin();
       {fltk::ValueSlider* o = ui_parm_edit[0] = new fltk::ValueSlider(100, 10, 195, 15);
        o->maximum(2);
        o->callback((fltk::Callback*)cb_ui_parm_edit);
        o->align(fltk::ALIGN_LEFT);
      }
       {fltk::ValueSlider* o = ui_parm_edit[1] = new fltk::ValueSlider(100, 25, 195, 15);
        o->callback((fltk::Callback*)cb_ui_parm_edit1);
        o->align(fltk::ALIGN_LEFT);
      }
       {fltk::ValueSlider* o = ui_parm_edit[2] = new fltk::ValueSlider(100, 40, 195, 15);
        o->callback((fltk::Callback*)cb_ui_parm_edit2);
        o->align(fltk::ALIGN_LEFT);
      }
       {fltk::ValueSlider* o = ui_parm_edit[3] = new fltk::ValueSlider(100, 55, 195, 15);
        o->callback((fltk::Callback*)cb_ui_parm_edit3);
        o->align(fltk::ALIGN_LEFT);
      }
       {fltk::ValueSlider* o = ui_parm_edit[4] = new fltk::ValueSlider(100, 70, 195, 15);
        o->callback((fltk::Callback*)cb_ui_parm_edit4);
        o->align(fltk::ALIGN_LEFT);
      }
       {fltk::ValueSlider* o = ui_parm_edit[5] = new fltk::ValueSlider(100, 85, 195, 15);
        o->callback((fltk::Callback*)cb_ui_parm_edit5);
        o->align(fltk::ALIGN_LEFT);
      }
      ui_parm_name[0] = new fltk::Output(10, 10, 90, 15);
      ui_parm_name[1] = new fltk::Output(10, 25, 90, 15);
      ui_parm_name[2] = new fltk::Output(10, 40, 90, 15);
      ui_parm_name[3] = new fltk::Output(10, 55, 90, 15);
      ui_parm_name[4] = new fltk::Output(10, 70, 90, 15);
      ui_parm_name[5] = new fltk::Output(10, 85, 90, 15);
       {fltk::ValueInput* o = ui_parm_weight[0] = new fltk::ValueInput(310, 12, 60, 18);
        o->maximum(5);
        o->step(1);
        o->value(1);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::ValueInput* o = ui_parm_weight[1] = new fltk::ValueInput(310, 27, 60, 18);
        o->maximum(5);
        o->step(1);
        o->value(1);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::ValueInput* o = ui_parm_weight[2] = new fltk::ValueInput(310, 42, 60, 18);
        o->maximum(5);
        o->step(1);
        o->value(1);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::ValueInput* o = ui_parm_weight[3] = new fltk::ValueInput(310, 57, 60, 18);
        o->maximum(5);
        o->step(1);
        o->value(1);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::ValueInput* o = ui_parm_weight[4] = new fltk::ValueInput(310, 72, 60, 18);
        o->maximum(5);
        o->step(1);
        o->value(1);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::ValueInput* o = ui_parm_weight[5] = new fltk::ValueInput(310, 87, 60, 18);
        o->maximum(5);
        o->step(1);
        o->value(1);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::ValueSlider* o = ui_parm_edit[6] = new fltk::ValueSlider(100, 100, 195, 15);
        o->callback((fltk::Callback*)cb_ui_parm_edit6);
        o->align(fltk::ALIGN_LEFT);
      }
      ui_parm_name[6] = new fltk::Output(10, 100, 90, 15);
       {fltk::ValueInput* o = ui_parm_weight[6] = new fltk::ValueInput(310, 102, 60, 18);
        o->maximum(5);
        o->step(1);
        o->value(1);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::ValueSlider* o = ui_parm_edit[7] = new fltk::ValueSlider(100, 115, 195, 15);
        o->callback((fltk::Callback*)cb_ui_parm_edit7);
        o->align(fltk::ALIGN_LEFT);
      }
      ui_parm_name[7] = new fltk::Output(10, 115, 90, 15);
       {fltk::ValueInput* o = ui_parm_weight[7] = new fltk::ValueInput(310, 117, 60, 18);
        o->maximum(5);
        o->step(1);
        o->value(1);
        o->when(fltk::WHEN_CHANGED);
      }
       {fltk::ValueSlider* o = ui_parm_edit[8] = new fltk::ValueSlider(100, 130, 195, 15);
        o->callback((fltk::Callback*)cb_ui_parm_edit8);
        o->align(fltk::ALIGN_LEFT);
      }
      ui_parm_name[8] = new fltk::Output(10, 130, 90, 15);
       {fltk::ValueInput* o = ui_parm_weight[8] = new fltk::ValueInput(310, 132, 60, 18);
        o->maximum(5);
        o->step(1);
        o->value(1);
        o->when(fltk::WHEN_CHANGED);
      }
      o->end();
    }
     {fltk::CheckButton* o = ui_parm_live = new fltk::CheckButton(22, 165, 48, 31, "live");
      o->tooltip("will update the current selected motion by interpolating the neighbor motions\
 with the paramters set above");
    }
     {fltk::Button* o = new fltk::Button(15, 196, 50, 24, "new");
      o->callback((fltk::Callback*)cb_new5);
    }
     {fltk::ValueSlider* o = ui_rbds_height = new fltk::ValueSlider(202, 165, 170, 36, "height");
      o->minimum(0.1);
      o->maximum(10);
      o->value(2);
      o->callback((fltk::Callback*)cb_ui_rbds_height);
      o->align(fltk::ALIGN_LEFT);
    }
     {fltk::ValueSlider* o = ui_rbds_support = new fltk::ValueSlider(202, 208, 170, 43, "support");
      o->minimum(1);
      o->maximum(100);
      o->value(2);
      o->callback((fltk::Callback*)cb_ui_rbds_support);
      o->align(fltk::ALIGN_LEFT);
    }
     {fltk::Button* o = new fltk::Button(15, 221, 50, 24, "env");
      o->callback((fltk::Callback*)cb_env);
    }
     {fltk::Button* o = new fltk::Button(65, 196, 50, 24, "save");
      o->callback((fltk::Callback*)cb_save5);
    }
     {fltk::ValueInput* o = ui_env_offset[0] = new fltk::ValueInput(20, 245, 40, 30, "y");
      o->maximum(5);
      o->step(0.001);
      o->callback((fltk::Callback*)cb_ui_env_offset);
      o->when(fltk::WHEN_CHANGED);
    }
     {fltk::ValueInput* o = ui_env_offset[1] = new fltk::ValueInput(70, 245, 40, 30, "z");
      o->maximum(5);
      o->step(0.001);
      o->callback((fltk::Callback*)cb_ui_env_offset1);
      o->when(fltk::WHEN_CHANGED);
    }
     {fltk::CheckButton* o = ui_draw_basis = new fltk::CheckButton(160, 244, 48, 31, "draw basis");
      o->tooltip("show the basis function in the graphviewer");
    }
     {fltk::Button* o = new fltk::Button(65, 221, 50, 24, "closest");
      o->callback((fltk::Callback*)cb_closest);
      o->tooltip("select the closest motion instead of interpolatin");
    }
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_motion_edit_window = new fltk::Window(300, 186, "Motion Edit Window");
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = new fltk::Group(5, 0, 294, 184);
      o->box(fltk::DOWN_BOX);
      o->begin();
       {fltk::Group* o = new fltk::Group(105, 45, 175, 75, "pt");
        o->box(fltk::DOWN_BOX);
        o->color((fltk::Color)0xa0a0a000);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
        o->begin();
         {fltk::ValueInput* o = ui_pt[0] = new fltk::ValueInput(37, 28, 45, 16, "restx");
          o->callback((fltk::Callback*)cb_ui_pt);
          o->deactivate();
        }
         {fltk::ValueInput* o = ui_pt[1] = new fltk::ValueInput(120, 27, 45, 16, "resty");
          o->minimum(-1);
          o->step(0.05);
          o->callback((fltk::Callback*)cb_ui_pt1);
          o->deactivate();
        }
         {fltk::ValueInput* o = ui_pt[2] = new fltk::ValueInput(37, 43, 45, 16, "min");
          o->minimum(-1);
          o->callback((fltk::Callback*)cb_ui_pt2);
          o->deactivate();
        }
         {fltk::ValueInput* o = ui_pt[3] = new fltk::ValueInput(37, 59, 45, 16, "max");
          o->callback((fltk::Callback*)cb_ui_pt3);
          o->deactivate();
        }
         {fltk::ValueInput* o = ui_pt[4] = new fltk::ValueInput(120, 43, 45, 16, "min");
          o->minimum(-1);
          o->maximum(0);
          o->callback((fltk::Callback*)cb_ui_pt4);
          o->deactivate();
        }
         {fltk::ValueInput* o = ui_pt[5] = new fltk::ValueInput(120, 59, 45, 16, "max");
          o->callback((fltk::Callback*)cb_ui_pt5);
          o->deactivate();
        }
         {fltk::CheckButton* o = ui_makeSample = new fltk::CheckButton(49, 7, 25, 20, "sample");
          o->callback((fltk::Callback*)cb_ui_makeSample);
          o->deactivate();
        }
         {fltk::Button* o = new fltk::Button(114, 7, 35, 20, "rand");
          o->callback((fltk::Callback*)cb_rand);
        }
        o->end();
      }
       {fltk::Group* o = new fltk::Group(5, 26, 100, 94, "ch");
        o->box(fltk::DOWN_BOX);
        o->color((fltk::Color)0xa0a0a000);
        o->align(fltk::ALIGN_TOP|fltk::ALIGN_LEFT|fltk::ALIGN_INSIDE);
        o->begin();
         {fltk::ValueInput* o = ui_channelMax = new fltk::ValueInput(40, 29, 60, 16, "max");
          o->callback((fltk::Callback*)cb_ui_channelMax);
        }
         {fltk::ValueInput* o = ui_channelMin = new fltk::ValueInput(40, 44, 60, 16, "min");
          o->callback((fltk::Callback*)cb_ui_channelMin);
        }
         {fltk::ValueInput* o = ui_channelRest = new fltk::ValueInput(40, 59, 60, 16, "rest");
          o->callback((fltk::Callback*)cb_ui_channelRest);
        }
         {fltk::ValueInput* o = ui_channelRep = new fltk::ValueInput(40, 74, 60, 16, "rep");
          o->value(1);
          o->callback((fltk::Callback*)cb_ui_channelRep);
        }
         {fltk::ValueInput* o = ui_channelVal = new fltk::ValueInput(40, 14, 60, 16, "val");
          o->callback((fltk::Callback*)cb_ui_channelVal);
        }
        o->end();
      }
       {fltk::ValueInput* o = ui_motion_duration = new fltk::ValueInput(217, 6, 65, 20, "duration");
        o->step(0.0001);
        o->callback((fltk::Callback*)cb_ui_motion_duration);
        o->tooltip("motion duration\n");
      }
       {fltk::CheckButton* o = ui_motion_loops = new fltk::CheckButton(40, 8, 21, 16, "loop");
        o->callback((fltk::Callback*)cb_ui_motion_loops);
        o->align(fltk::ALIGN_LEFT);
        o->tooltip("if the motion should repeat ");
      }
       {fltk::CheckButton* o = ui_motion_resets = new fltk::CheckButton(95, 11, 25, 13, "reset");
        o->set_flag(fltk::STATE);
        o->callback((fltk::Callback*)cb_ui_motion_resets);
        o->align(fltk::ALIGN_LEFT);
        o->tooltip("if when the motion repeats if it should load the start state of the character\
.");
      }
       {fltk::ValueInput* o = ui_last_frame = new fltk::ValueInput(85, 160, 65, 20, "last frame");
        o->minimum(1);
        o->maximum(5000);
        o->step(1);
        o->value(100);
        o->callback((fltk::Callback*)cb_ui_last_frame);
        o->tooltip("last frame to show\n");
      }
       {fltk::ValueInput* o = ui_first_frame = new fltk::ValueInput(85, 140, 65, 20, "first frame");
        o->minimum(1);
        o->maximum(5000);
        o->step(1);
        o->value(1);
        o->callback((fltk::Callback*)cb_ui_first_frame);
        o->tooltip("first frame to show\n");
      }
       {fltk::Button* o = new fltk::Button(135, 50, 20, 20, ">");
        o->callback((fltk::Callback*)cb_6);
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_node_create_window = new fltk::Window(325, 310);
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
    ui_node_create_name = new fltk::Input(100, 215, 179, 30, "node name:");
     {fltk::Group* o = new fltk::Group(30, 115, 286, 55);
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0xc0c0c000);
      o->begin();
      ui_empty_node = new fltk::RadioButton(125, 5, 20, 20, "empty");
      ui_trajectory_node = new fltk::RadioButton(5, 5, 20, 20, "trajectory");
      ui_feedback_node = new fltk::RadioButton(190, 5, 20, 20, "feedback");
      ui_add_node = new fltk::RadioButton(75, 4, 20, 20, "add");
      ui_modulate_node = new fltk::RadioButton(5, 25, 20, 20, "modulate");
      ui_mult_node = new fltk::RadioButton(80, 25, 20, 20, "multiply");
      o->end();
    }
     {fltk::Button* o = new fltk::Button(47, 261, 100, 40, "create node");
      o->callback((fltk::Callback*)cb_create2);
    }
     {fltk::Button* o = new fltk::Button(169, 261, 101, 40, "cancel");
      o->callback((fltk::Callback*)cb_cancel);
    }
     {fltk::Group* o = new fltk::Group(31, 0, 267, 115);
      o->box(fltk::DOWN_BOX);
      o->color((fltk::Color)0x9f9f9f00);
      o->begin();
      ui_node_create_serializable = new fltk::Output(70, 5, 125, 25, "name");
      ui_node_create_serializable_type = new fltk::Output(69, 30, 125, 25, "type");
      ui_node_create_parameter = new fltk::Output(70, 55, 125, 25, "parameter");
      ui_node_create_dof = new fltk::Output(70, 80, 125, 25, "dof");
       {fltk::ValueOutput* o = ui_node_create_parameter_index = new fltk::ValueOutput(210, 30, 30, 20, "index");
        o->maximum(100);
        o->step(1);
        o->align(fltk::ALIGN_TOP);
      }
      o->end();
    }
    ui_constant_value = new fltk::CheckButton(60, 175, 25, 25, "constant value");
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_error_win = new fltk::Window(410, 100);
    w = o;
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::WordwrapOutput* o = ui_error_message = new fltk::WordwrapOutput(10, 5, 385, 55);
      o->type(5);
      o->align(fltk::ALIGN_LEFT|fltk::ALIGN_WRAP);
    }
     {fltk::Button* o = new fltk::Button(160, 65, 75, 25, "ok");
      o->callback((fltk::Callback*)cb_ok);
    }
    o->end();
    o->resizable(o);
  }
}
