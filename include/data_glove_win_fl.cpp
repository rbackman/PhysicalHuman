// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "data_glove_win_fl.h"

inline void DataGloveFluid::cb_X_i(fltk::Item*, void*) {
  event ( evQuit );
}
void DataGloveFluid::cb_X(fltk::Item* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_X_i(o,v);
}

inline void DataGloveFluid::cb_set_i(fltk::Item*, void*) {
  event(evSetMax);
}
void DataGloveFluid::cb_set(fltk::Item* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set_i(o,v);
}

inline void DataGloveFluid::cb_set1_i(fltk::Item*, void*) {
  event(evSetMin);
}
void DataGloveFluid::cb_set1(fltk::Item* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set1_i(o,v);
}

inline void DataGloveFluid::cb_set2_i(fltk::Item*, void*) {
  event(evSetMaxThumb);
}
void DataGloveFluid::cb_set2(fltk::Item* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set2_i(o,v);
}

inline void DataGloveFluid::cb_load_i(fltk::Button*, void*) {
  event(evLoadGloveCfg);
}
void DataGloveFluid::cb_load(fltk::Button* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_load_i(o,v);
}

inline void DataGloveFluid::cb_save_i(fltk::Button*, void*) {
  event(evSaveGloveCfg);
}
void DataGloveFluid::cb_save(fltk::Button* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save_i(o,v);
}

inline void DataGloveFluid::cb_pose_i(fltk::Button*, void*) {
  event(evSetPose1);
}
void DataGloveFluid::cb_pose(fltk::Button* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_pose_i(o,v);
}

inline void DataGloveFluid::cb_pose1_i(fltk::Button*, void*) {
  event(evSetPose2);
}
void DataGloveFluid::cb_pose1(fltk::Button* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_pose1_i(o,v);
}

inline void DataGloveFluid::cb_hand_i(fltk::Button*, void*) {
  event(evSetMin);
}
void DataGloveFluid::cb_hand(fltk::Button* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_hand_i(o,v);
}

inline void DataGloveFluid::cb_hand1_i(fltk::Button*, void*) {
  event(evSetMax);
}
void DataGloveFluid::cb_hand1(fltk::Button* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_hand1_i(o,v);
}

inline void DataGloveFluid::cb_thumb_i(fltk::Button*, void*) {
  event(evSetMaxThumb);
}
void DataGloveFluid::cb_thumb(fltk::Button* o, void* v) {
  ((DataGloveFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_thumb_i(o,v);
}

DataGloveFluid::DataGloveFluid() {
  fltk::Window* w;
   {fltk::Window* o = ui_window = new fltk::Window(269, 615, "Hand Tracker");
    w = o;
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::TiledGroup* o = new fltk::TiledGroup(0, 0, 269, 615);
      o->begin();
       {fltk::Group* o = ui_main_group = new fltk::Group(0, 0, 255, 590);
        o->set_vertical();
        o->box(fltk::FLAT_BOX);
        o->begin();
         {fltk::MenuBar* o = new fltk::MenuBar(0, 0, 175, 20);
          o->shortcut(0xffe9);
          o->begin();
           {fltk::Item* o = new fltk::Item("X");
            o->labelfont(fltk::HELVETICA_BOLD);
            o->textfont(fltk::HELVETICA_BOLD);
            o->color((fltk::Color)0xece9d800);
            o->textcolor((fltk::Color)0xd40d2900);
            o->selection_textcolor((fltk::Color)0xff122b00);
            o->callback((fltk::Callback*)cb_X);
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("draw");
            o->color((fltk::Color)0xece9d800);
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("edit");
            o->color((fltk::Color)0xece9d800);
            o->begin();
             {fltk::Item* o = new fltk::Item("set max");
              o->callback((fltk::Callback*)cb_set);
            }
             {fltk::Item* o = new fltk::Item("set min");
              o->callback((fltk::Callback*)cb_set1);
            }
             {fltk::Item* o = new fltk::Item("set max thumb");
              o->callback((fltk::Callback*)cb_set2);
            }
            o->end();
          }
          o->end();
        }
         {fltk::Group* o = new fltk::Group(0, 20, 250, 570);
          o->set_vertical();
          o->begin();
           {fltk::TabGroup* o = ui_main_tab = new fltk::TabGroup(0, 0, 245, 570);
            o->set_vertical();
            o->box(fltk::FLAT_BOX);
            o->begin();
             {fltk::Group* o = new fltk::Group(0, 30, 245, 540, "Data");
              o->set_vertical();
              o->begin();
              data[0] = new fltk::ValueOutput(65, 55, 75, 25, "value:");
              data[1] = new fltk::ValueOutput(65, 80, 75, 25, "value:");
              data[2] = new fltk::ValueOutput(65, 105, 75, 25, "value:");
              data[3] = new fltk::ValueOutput(65, 130, 75, 25, "value:");
              data[4] = new fltk::ValueOutput(65, 155, 75, 25, "value:");
              data[5] = new fltk::ValueOutput(65, 180, 75, 25, "value:");
              data[6] = new fltk::ValueOutput(65, 205, 75, 25, "value:");
              data[7] = new fltk::ValueOutput(65, 230, 75, 25, "value:");
              data[8] = new fltk::ValueOutput(65, 255, 75, 25, "value:");
              data[9] = new fltk::ValueOutput(65, 280, 75, 25, "value:");
              data[10] = new fltk::ValueOutput(65, 305, 75, 25, "value:");
              data[11] = new fltk::ValueOutput(65, 330, 75, 25, "value:");
              data[12] = new fltk::ValueOutput(65, 355, 75, 25, "value:");
              data[13] = new fltk::ValueOutput(65, 380, 75, 25, "value:");
              data[14] = new fltk::ValueOutput(65, 405, 75, 25, "value:");
              data[15] = new fltk::ValueOutput(65, 430, 75, 25, "value:");
              data[16] = new fltk::ValueOutput(65, 455, 75, 25, "value:");
              data[17] = new fltk::ValueOutput(65, 480, 75, 25, "value:");
              data_min[0] = new fltk::ValueOutput(140, 55, 48, 25);
              data_min[1] = new fltk::ValueOutput(140, 80, 48, 25);
              data_min[2] = new fltk::ValueOutput(140, 105, 48, 25);
              data_min[3] = new fltk::ValueOutput(140, 130, 48, 25);
              data_min[4] = new fltk::ValueOutput(140, 155, 48, 25);
              data_min[5] = new fltk::ValueOutput(140, 180, 48, 25);
              data_min[6] = new fltk::ValueOutput(140, 205, 48, 25);
              data_min[7] = new fltk::ValueOutput(140, 230, 48, 25);
              data_min[8] = new fltk::ValueOutput(140, 255, 48, 25);
              data_min[9] = new fltk::ValueOutput(140, 280, 48, 25);
              data_min[10] = new fltk::ValueOutput(140, 305, 48, 25);
              data_min[11] = new fltk::ValueOutput(140, 330, 48, 25);
              data_min[12] = new fltk::ValueOutput(140, 355, 48, 25);
              data_min[13] = new fltk::ValueOutput(140, 380, 48, 25);
              data_min[14] = new fltk::ValueOutput(140, 405, 48, 25);
              data_min[15] = new fltk::ValueOutput(140, 430, 48, 25);
              data_min[16] = new fltk::ValueOutput(140, 455, 48, 25);
              data_min[17] = new fltk::ValueOutput(140, 480, 48, 25);
               {fltk::Group* o = new fltk::Group(50, 25, 160, 20, "value            range");
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(15, 25, 230, 545, "config");
              o->set_vertical();
              o->hide();
              o->begin();
              ui_glove_config = new fltk::Input(55, 25, 150, 25, "config file");
               {fltk::Button* o = new fltk::Button(60, 55, 70, 25, "load");
                o->callback((fltk::Callback*)cb_load);
              }
               {fltk::Button* o = new fltk::Button(135, 55, 70, 25, "save");
                o->callback((fltk::Callback*)cb_save);
              }
               {fltk::Button* o = new fltk::Button(60, 300, 85, 25, "pose 1");
                o->callback((fltk::Callback*)cb_pose);
              }
               {fltk::Button* o = new fltk::Button(60, 330, 85, 25, "pose 2");
                o->callback((fltk::Callback*)cb_pose1);
              }
              ui_interp_output = new fltk::ValueOutput(60, 365, 85, 25, "output");
               {fltk::Group* o = new fltk::Group(50, 135, 110, 110, "calibration");
                o->box(fltk::DOWN_BOX);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->begin();
                 {fltk::Button* o = new fltk::Button(10, 20, 85, 25, "hand open");
                  o->callback((fltk::Callback*)cb_hand);
                }
                 {fltk::Button* o = new fltk::Button(10, 50, 85, 25, "hand closed");
                  o->callback((fltk::Callback*)cb_hand1);
                }
                 {fltk::Button* o = new fltk::Button(10, 80, 85, 25, "thumb closed");
                  o->callback((fltk::Callback*)cb_thumb);
                }
                o->end();
              }
              o->end();
            }
            o->end();
            fltk::Group::current()->resizable(o);
          }
          o->end();
          fltk::Group::current()->resizable(o);
        }
        ui_glove_active = new fltk::LightButton(180, 0, 60, 20, "active");
        o->end();
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
}
