// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "neural_net_fluid.h"

inline void NeuralNetFluid::cb_X_i(fltk::Item*, void*) {
  event ( evNetQuit );
}
void NeuralNetFluid::cb_X(fltk::Item* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_X_i(o,v);
}

inline void NeuralNetFluid::cb_save_i(fltk::Item*, void*) {
  event(evSaveData);
}
void NeuralNetFluid::cb_save(fltk::Item* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save_i(o,v);
}

inline void NeuralNetFluid::cb_ui_learning_rate_i(fltk::ValueInput*, void*) {
  event(evUpdateNetParms);
}
void NeuralNetFluid::cb_ui_learning_rate(fltk::ValueInput* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_learning_rate_i(o,v);
}

inline void NeuralNetFluid::cb_ui_momentum_i(fltk::ValueInput*, void*) {
  event(evUpdateNetParms);
}
void NeuralNetFluid::cb_ui_momentum(fltk::ValueInput* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_momentum_i(o,v);
}

inline void NeuralNetFluid::cb_ui_weight_decay_i(fltk::ValueInput*, void*) {
  event(evUpdateNetParms);
}
void NeuralNetFluid::cb_ui_weight_decay(fltk::ValueInput* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_weight_decay_i(o,v);
}

inline void NeuralNetFluid::cb_make_i(fltk::Button*, void*) {
  event(evMakeNet);
}
void NeuralNetFluid::cb_make(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_make_i(o,v);
}

inline void NeuralNetFluid::cb_update_i(fltk::Button*, void*) {
  event(evUpdateImages);
}
void NeuralNetFluid::cb_update(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->user_data()))->cb_update_i(o,v);
}

inline void NeuralNetFluid::cb_train_i(fltk::Button*, void*) {
  event(evTrainImages);
}
void NeuralNetFluid::cb_train(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->user_data()))->cb_train_i(o,v);
}

inline void NeuralNetFluid::cb_test_i(fltk::Button*, void*) {
  event(evTestImages);
}
void NeuralNetFluid::cb_test(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->user_data()))->cb_test_i(o,v);
}

inline void NeuralNetFluid::cb_stop_i(fltk::Button*, void*) {
  event(evStopTrain);
}
void NeuralNetFluid::cb_stop(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->user_data()))->cb_stop_i(o,v);
}

inline void NeuralNetFluid::cb_load_i(fltk::Button*, void*) {
  event(evLoadNet);
}
void NeuralNetFluid::cb_load(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->user_data()))->cb_load_i(o,v);
}

inline void NeuralNetFluid::cb_load1_i(fltk::Button*, void*) {
  event(evLoadImages);
}
void NeuralNetFluid::cb_load1(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->user_data()))->cb_load1_i(o,v);
}

inline void NeuralNetFluid::cb_rand_i(fltk::Button*, void*) {
  event(evRandomizeWeights)
;}
void NeuralNetFluid::cb_rand(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->user_data()))->cb_rand_i(o,v);
}

inline void NeuralNetFluid::cb_noise_i(fltk::Button*, void*) {
  event(evNoiseWeights)
;}
void NeuralNetFluid::cb_noise(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->user_data()))->cb_noise_i(o,v);
}

inline void NeuralNetFluid::cb_load2_i(fltk::Button*, void*) {
  event(evLoadTestImages);
}
void NeuralNetFluid::cb_load2(fltk::Button* o, void* v) {
  ((NeuralNetFluid*)(o->parent()->parent()->user_data()))->cb_load2_i(o,v);
}

NeuralNetFluid::NeuralNetFluid() {
  fltk::Window* w;
   {fltk::Window* o = ui_window = new fltk::Window(880, 561, "Neural Nets");
    w = o;
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::TiledGroup* o = new fltk::TiledGroup(0, 0, 845, 561);
      o->begin();
       {fltk::Group* o = ui_main_group = new fltk::Group(0, 0, 255, 560);
        o->set_vertical();
        o->box(fltk::FLAT_BOX);
        o->begin();
         {fltk::MenuBar* o = new fltk::MenuBar(0, 0, 135, 20);
          o->shortcut(0xffe9);
          o->begin();
           {fltk::Item* o = new fltk::Item("X");
            o->labelfont(fltk::HELVETICA_BOLD);
            o->textfont(fltk::HELVETICA_BOLD);
            o->color((fltk::Color)0xece9d800);
            o->textcolor((fltk::Color)0xd40d2900);
            o->selection_textcolor((fltk::Color)0xff122b00);
            o->callback((fltk::Callback*)cb_X);
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("edit");
            o->color((fltk::Color)0xece9d800);
            o->begin();
             {fltk::Item* o = new fltk::Item("save data");
              o->callback((fltk::Callback*)cb_save);
            }
            o->end();
          }
          o->end();
        }
         {fltk::Group* o = new fltk::Group(0, 20, 250, 540);
          o->set_vertical();
          o->begin();
           {fltk::TabGroup* o = ui_main_tab = new fltk::TabGroup(0, 0, 245, 540);
            o->set_vertical();
            o->box(fltk::FLAT_BOX);
            o->begin();
             {fltk::Group* o = new fltk::Group(25, 25, 220, 515);
              o->set_vertical();
              o->hide();
            }
             {fltk::Group* o = new fltk::Group(5, 25, 240, 515, "data");
              o->set_vertical();
              o->begin();
               {fltk::ValueOutput* o = ui_dim_in = new fltk::ValueOutput(50, 15, 75, 25, "din");
                o->maximum(512);
                o->step(1);
              }
               {fltk::ValueOutput* o = ui_dim_hid = new fltk::ValueOutput(50, 40, 75, 25, "dhidden");
                o->maximum(512);
                o->step(1);
              }
               {fltk::ValueOutput* o = ui_dim_out = new fltk::ValueOutput(50, 65, 75, 25, "dout");
                o->maximum(512);
                o->step(1);
              }
               {fltk::ValueInput* o = ui_learning_rate = new fltk::ValueInput(100, 155, 75, 25, "learning rate");
                o->callback((fltk::Callback*)cb_ui_learning_rate);
              }
               {fltk::ValueInput* o = ui_momentum = new fltk::ValueInput(100, 185, 75, 25, "momentum");
                o->callback((fltk::Callback*)cb_ui_momentum);
              }
               {fltk::ValueInput* o = ui_weight_decay = new fltk::ValueInput(100, 215, 75, 25, "weight decay");
                o->callback((fltk::Callback*)cb_ui_weight_decay);
              }
               {fltk::ValueOutput* o = ui_sse = new fltk::ValueOutput(50, 90, 75, 25, "Error");
                o->maximum(512);
                o->step(1);
              }
              ui_net_data_dir = new fltk::Input(60, 325, 90, 25, "train data");
               {fltk::ValueInput* o = ui_num_epoch = new fltk::ValueInput(100, 245, 75, 25, "epochs");
                o->value(1000);
              }
              ui_make[0] = new fltk::ValueInput(55, 380, 55, 25, "X");
              ui_make[1] = new fltk::ValueInput(55, 405, 55, 25, "Y");
              ui_make[2] = new fltk::ValueInput(55, 430, 55, 25, "hidden");
              ui_make[3] = new fltk::ValueInput(55, 455, 55, 25, "output");
               {fltk::Button* o = new fltk::Button(130, 405, 75, 25, "make net");
                o->callback((fltk::Callback*)cb_make);
              }
               {fltk::ValueOutput* o = ui_n_train = new fltk::ValueOutput(50, 115, 75, 25, "n train");
                o->maximum(512);
                o->step(1);
              }
               {fltk::ValueOutput* o = ui_dim_in_w = new fltk::ValueOutput(140, 15, 35, 25, "w");
                o->maximum(512);
                o->step(1);
              }
               {fltk::ValueOutput* o = ui_dim_in_h = new fltk::ValueOutput(190, 15, 35, 25, "h");
                o->maximum(512);
                o->step(1);
              }
              ui_net_cfg = new fltk::Input(60, 350, 90, 25, "config");
              o->end();
            }
            o->end();
            fltk::Group::current()->resizable(o);
          }
           {fltk::Group* o = ui_message = new fltk::Group(0, 520, 245, 20, "text");
            o->box(fltk::FLAT_BOX);
            o->labelfont(fltk::HELVETICA_BOLD);
            o->textfont(fltk::HELVETICA_BOLD);
            o->textcolor((fltk::Color)0xa7000000);
            o->labelcolor((fltk::Color)0xbd000000);
            o->labelsize(11);
            o->textsize(11);
            o->align(fltk::ALIGN_INSIDE);
          }
          o->end();
          fltk::Group::current()->resizable(o);
        }
        o->end();
      }
       {ImageViewer* o = ui_hidden_weights = new ImageViewer(270, 55, 256, 256, "hidden weights");
        o->box(fltk::DOWN_BOX);
      }
       {ImageViewer* o = ui_output_weights = new ImageViewer(535, 54, 256, 256, "output weights");
        o->box(fltk::DOWN_BOX);
      }
      ui_scale_images = new fltk::CheckButton(290, 335, 70, 25, "scale images");
       {fltk::Button* o = new fltk::Button(430, 330, 125, 25, "update images");
        o->callback((fltk::Callback*)cb_update);
      }
       {fltk::Choice* o = ui_display_choice = new fltk::Choice(615, 330, 75, 20, "display");
        o->begin();
        new fltk::Item("Weights");
        new fltk::Item("DWeights");
        o->end();
      }
       {fltk::Button* o = new fltk::Button(30, 315, 60, 25, "train");
        o->callback((fltk::Callback*)cb_train);
      }
       {fltk::Button* o = new fltk::Button(90, 315, 60, 25, "test");
        o->callback((fltk::Callback*)cb_test);
      }
       {fltk::Button* o = new fltk::Button(155, 315, 60, 25, "stop");
        o->callback((fltk::Callback*)cb_stop);
      }
       {fltk::Button* o = new fltk::Button(160, 395, 60, 25, "load");
        o->callback((fltk::Callback*)cb_load);
      }
       {fltk::Button* o = new fltk::Button(160, 370, 60, 25, "load");
        o->callback((fltk::Callback*)cb_load1);
      }
       {fltk::Button* o = new fltk::Button(280, 380, 90, 25, "rand weights");
        o->callback((fltk::Callback*)cb_rand);
      }
       {fltk::Button* o = new fltk::Button(280, 410, 90, 25, "noise weights");
        o->callback((fltk::Callback*)cb_noise);
      }
       {fltk::ValueInput* o = ui_noise_seeds = new fltk::ValueInput(425, 410, 45, 25, "seeds");
        o->maximum(20);
        o->step(1);
        o->value(10);
      }
      ui_net_test_data_dir = new fltk::Input(65, 346, 90, 25, "test data");
       {fltk::Button* o = new fltk::Button(160, 350, 60, 25, "load");
        o->callback((fltk::Callback*)cb_load2);
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
}
