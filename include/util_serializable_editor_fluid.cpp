// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "util_serializable_editor_fluid.h"

inline void SerializableEditorFluid::cb_ui_parm_list_i(fltk::Browser*, void*) {
  event(evParmListModified);
}
void SerializableEditorFluid::cb_ui_parm_list(fltk::Browser* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->user_data()))->cb_ui_parm_list_i(o,v);
}

inline void SerializableEditorFluid::cb_set_i(fltk::Button*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_set(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_set_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_int_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_int_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_int_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_int_min_i(fltk::ValueInput*, void*) {
  ui_int_input->minimum(ui_int_min->value());
}
void SerializableEditorFluid::cb_ui_int_min(fltk::ValueInput* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_int_min_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_int_max_i(fltk::ValueInput*, void*) {
  ui_int_input->maximum(ui_int_max->value());
}
void SerializableEditorFluid::cb_ui_int_max(fltk::ValueInput* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_int_max_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_eul_x_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_eul_x_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_eul_x_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_eul_y_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_eul_y_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_eul_y_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_eul_z_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_eul_z_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_eul_z_input_i(o,v);
}

inline void SerializableEditorFluid::cb_quat_i(fltk::Button*, void*) {
  event(evSwitchQuat);
}
void SerializableEditorFluid::cb_quat(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_quat_i(o,v);
}

inline void SerializableEditorFluid::cb__i(fltk::Button*, void*) {
  event(evMakeChannelRotX);
}
void SerializableEditorFluid::cb_(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb__i(o,v);
}

inline void SerializableEditorFluid::cb_1_i(fltk::Button*, void*) {
  event(evMakeChannelRotY);
}
void SerializableEditorFluid::cb_1(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_1_i(o,v);
}

inline void SerializableEditorFluid::cb_2_i(fltk::Button*, void*) {
  event(evMakeChannelRotZ);
}
void SerializableEditorFluid::cb_2(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_2_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_vx_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_vx_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_vx_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_vy_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_vy_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_vy_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_vz_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_vz_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_vz_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_vec_min_i(fltk::ValueInput*, void*) {
  ui_vx_input->minimum(ui_vec_min->value());
  ui_vy_input->minimum(ui_vec_min->value());
  ui_vz_input->minimum(ui_vec_min->value());
}
void SerializableEditorFluid::cb_ui_vec_min(fltk::ValueInput* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_vec_min_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_vec_max_i(fltk::ValueInput*, void*) {
  ui_vx_input->maximum(ui_vec_max->value());
  ui_vy_input->maximum(ui_vec_max->value());
  ui_vz_input->maximum(ui_vec_max->value());
}
void SerializableEditorFluid::cb_ui_vec_max(fltk::ValueInput* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_vec_max_i(o,v);
}

inline void SerializableEditorFluid::cb_3_i(fltk::Button*, void*) {
  event(evMakeChannelVecX);
}
void SerializableEditorFluid::cb_3(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_3_i(o,v);
}

inline void SerializableEditorFluid::cb_4_i(fltk::Button*, void*) {
  event(evMakeChannelVecY);
}
void SerializableEditorFluid::cb_4(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_4_i(o,v);
}

inline void SerializableEditorFluid::cb_5_i(fltk::Button*, void*) {
  event(evMakeChannelVecZ);
}
void SerializableEditorFluid::cb_5(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_5_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_float_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_float_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_float_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_float_min_i(fltk::ValueInput*, void*) {
  ui_float_input->minimum(ui_float_min->value());
}
void SerializableEditorFluid::cb_ui_float_min(fltk::ValueInput* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_float_min_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_float_max_i(fltk::ValueInput*, void*) {
  ui_float_input->maximum(ui_float_max->value());
}
void SerializableEditorFluid::cb_ui_float_max(fltk::ValueInput* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_float_max_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_float_array_list_i(fltk::Choice*, void*) {
  event(evFloatChoiceSelect);
}
void SerializableEditorFluid::cb_ui_float_array_list(fltk::Choice* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_float_array_list_i(o,v);
}

inline void SerializableEditorFluid::cb_ch_i(fltk::Button*, void*) {
  event(evMakeChannelFloat);
}
void SerializableEditorFluid::cb_ch(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ch_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_bool_true_i(fltk::RadioButton*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_bool_true(fltk::RadioButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_bool_true_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_bool_false_i(fltk::RadioButton*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_bool_false(fltk::RadioButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_bool_false_i(o,v);
}

inline void SerializableEditorFluid::cb_6_i(fltk::Button*, void*) {
  event(evMakeChannelBool);
}
void SerializableEditorFluid::cb_6(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_6_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_string_val_i(fltk::Input*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_string_val(fltk::Input* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_string_val_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_qx_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_qx_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_qx_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_qy_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_qy_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_qy_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_qz_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_qz_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_qz_input_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_qw_input_i(fltk::ValueSlider*, void*) {
  event(evParmEdited);
}
void SerializableEditorFluid::cb_ui_qw_input(fltk::ValueSlider* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_ui_qw_input_i(o,v);
}

inline void SerializableEditorFluid::cb_eul_i(fltk::Button*, void*) {
  event(evSwitchEul);
}
void SerializableEditorFluid::cb_eul(fltk::Button* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_eul_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_save_parm_i(fltk::CheckButton*, void*) {
  event(evSaveParm);
}
void SerializableEditorFluid::cb_ui_save_parm(fltk::CheckButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->user_data()))->cb_ui_save_parm_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_type_choice_i(fltk::CheckButton*, void*) {
  event(evLoadList);
}
void SerializableEditorFluid::cb_ui_type_choice(fltk::CheckButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_type_choice_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_type_choice1_i(fltk::CheckButton*, void*) {
  event(evLoadList);
}
void SerializableEditorFluid::cb_ui_type_choice1(fltk::CheckButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_type_choice1_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_type_choice2_i(fltk::CheckButton*, void*) {
  event(evLoadList);
}
void SerializableEditorFluid::cb_ui_type_choice2(fltk::CheckButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_type_choice2_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_type_choice3_i(fltk::CheckButton*, void*) {
  event(evLoadList);
}
void SerializableEditorFluid::cb_ui_type_choice3(fltk::CheckButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_type_choice3_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_type_choice4_i(fltk::CheckButton*, void*) {
  event(evLoadList);
}
void SerializableEditorFluid::cb_ui_type_choice4(fltk::CheckButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_type_choice4_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_type_choice5_i(fltk::CheckButton*, void*) {
  event(evLoadList);
}
void SerializableEditorFluid::cb_ui_type_choice5(fltk::CheckButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_type_choice5_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_type_choice6_i(fltk::CheckButton*, void*) {
  event(evLoadList);
}
void SerializableEditorFluid::cb_ui_type_choice6(fltk::CheckButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_type_choice6_i(o,v);
}

inline void SerializableEditorFluid::cb_ui_make_traj_i(fltk::CheckButton*, void*) {
  event(evParmTraj);
}
void SerializableEditorFluid::cb_ui_make_traj(fltk::CheckButton* o, void* v) {
  ((SerializableEditorFluid*)(o->parent()->parent()->user_data()))->cb_ui_make_traj_i(o,v);
}

SerializableEditorFluid::SerializableEditorFluid() {
  fltk::Window* w;
   {fltk::Window* o = ui_serializable_editor = new fltk::Window(215, 551, "Physical Human");
    w = o;
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::Group* o = ui_parm_grp = new fltk::Group(4, 0, 211, 543);
      o->set_vertical();
      o->box(fltk::DOWN_BOX);
      o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
      o->begin();
       {fltk::Browser* o = ui_parm_list = new fltk::Browser(5, 63, 200, 320);
        o->set_vertical();
        o->callback((fltk::Callback*)cb_ui_parm_list);
      }
      ui_serializable_name = new fltk::Output(6, 38, 200, 25);
      ui_param_name_field = new fltk::Output(5, 390, 200, 25);
       {fltk::Group* o = new fltk::Group(5, 415, 202, 95);
        o->box(fltk::DOWN_BOX);
        o->begin();
         {fltk::Group* o = ui_string_array_grp = new fltk::Group(0, 0, 200, 90, "String Array");
          o->box(fltk::DOWN_BOX);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
          o->begin();
           {fltk::Choice* o = ui_string_array_list = new fltk::Choice(20, 22, 175, 25);
          }
           {fltk::Input* o = ui_string_array_current = new fltk::Input(20, 46, 151, 25);
            o->when(fltk::WHEN_ENTER_KEY_ALWAYS);
          }
           {fltk::Button* o = new fltk::Button(171, 45, 21, 25, "set");
            o->set_vertical();
            o->callback((fltk::Callback*)cb_set);
          }
          o->end();
        }
         {fltk::Group* o = ui_int_grp = new fltk::Group(0, 0, 200, 90, "Integer");
          o->box(fltk::DOWN_BOX);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
          o->hide();
          o->begin();
           {fltk::ValueSlider* o = ui_int_input = new fltk::ValueSlider(10, 25, 180, 25);
            o->maximum(10);
            o->step(1);
            o->callback((fltk::Callback*)cb_ui_int_input);
          }
           {fltk::ValueInput* o = ui_int_min = new fltk::ValueInput(101, 50, 30, 20, "min");
            o->callback((fltk::Callback*)cb_ui_int_min);
          }
           {fltk::ValueInput* o = ui_int_max = new fltk::ValueInput(156, 50, 30, 20, "max");
            o->callback((fltk::Callback*)cb_ui_int_max);
          }
           {fltk::Choice* o = ui_int_array_list = new fltk::Choice(11, 50, 50, 25);
          }
          o->end();
        }
         {fltk::Group* o = ui_euler_grp = new fltk::Group(1, 0, 200, 90, "Euler");
          o->box(fltk::DOWN_BOX);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
          o->hide();
          o->begin();
           {fltk::ValueSlider* o = ui_eul_x_input = new fltk::ValueSlider(30, 30, 150, 20, "x");
            o->minimum(-180);
            o->maximum(180);
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_eul_x_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::ValueSlider* o = ui_eul_y_input = new fltk::ValueSlider(30, 48, 150, 20, "y");
            o->minimum(-180);
            o->maximum(180);
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_eul_y_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::ValueSlider* o = ui_eul_z_input = new fltk::ValueSlider(30, 65, 150, 20, "z");
            o->minimum(-180);
            o->maximum(180);
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_eul_z_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::Button* o = new fltk::Button(5, 5, 40, 15, "quat");
            o->callback((fltk::Callback*)cb_quat);
          }
           {fltk::Button* o = new fltk::Button(184, 32, 15, 15);
            o->set_vertical();
            o->callback((fltk::Callback*)cb_);
          }
           {fltk::Button* o = new fltk::Button(185, 50, 15, 15);
            o->set_vertical();
            o->callback((fltk::Callback*)cb_1);
          }
           {fltk::Button* o = new fltk::Button(185, 65, 15, 15);
            o->callback((fltk::Callback*)cb_2);
          }
          o->end();
        }
         {fltk::Group* o = ui_vector_grp = new fltk::Group(0, 0, 200, 90, "vector");
          o->box(fltk::DOWN_BOX);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
          o->hide();
          o->begin();
           {fltk::ValueSlider* o = ui_vx_input = new fltk::ValueSlider(25, 15, 150, 20, "x");
            o->maximum(10);
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_vx_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::ValueSlider* o = ui_vy_input = new fltk::ValueSlider(25, 33, 150, 20, "y");
            o->maximum(10);
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_vy_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::ValueSlider* o = ui_vz_input = new fltk::ValueSlider(25, 50, 150, 20, "z");
            o->maximum(10);
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_vz_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::ValueInput* o = ui_vec_min = new fltk::ValueInput(91, 70, 30, 20, "min");
            o->callback((fltk::Callback*)cb_ui_vec_min);
          }
           {fltk::ValueInput* o = ui_vec_max = new fltk::ValueInput(146, 70, 30, 20, "max");
            o->callback((fltk::Callback*)cb_ui_vec_max);
          }
           {fltk::Button* o = new fltk::Button(176, 15, 15, 15);
            o->set_vertical();
            o->callback((fltk::Callback*)cb_3);
          }
           {fltk::Button* o = new fltk::Button(176, 35, 15, 15);
            o->set_vertical();
            o->callback((fltk::Callback*)cb_4);
          }
           {fltk::Button* o = new fltk::Button(176, 52, 15, 15);
            o->set_vertical();
            o->callback((fltk::Callback*)cb_5);
          }
          o->end();
        }
         {fltk::Group* o = ui_float_grp = new fltk::Group(0, 0, 200, 90, "Float");
          o->box(fltk::DOWN_BOX);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
          o->hide();
          o->begin();
           {fltk::ValueSlider* o = ui_float_input = new fltk::ValueSlider(11, 20, 160, 25);
            o->maximum(10);
            o->step(1e-005);
            o->callback((fltk::Callback*)cb_ui_float_input);
          }
           {fltk::ValueInput* o = ui_float_min = new fltk::ValueInput(91, 47, 30, 20, "min");
            o->callback((fltk::Callback*)cb_ui_float_min);
          }
           {fltk::ValueInput* o = ui_float_max = new fltk::ValueInput(146, 47, 30, 20, "max");
            o->callback((fltk::Callback*)cb_ui_float_max);
          }
           {fltk::Choice* o = ui_float_array_list = new fltk::Choice(11, 50, 56, 25);
            o->callback((fltk::Callback*)cb_ui_float_array_list);
          }
           {fltk::Button* o = new fltk::Button(176, 20, 20, 25, "ch");
            o->set_vertical();
            o->callback((fltk::Callback*)cb_ch);
          }
          o->end();
        }
         {fltk::Group* o = ui_bool_grp = new fltk::Group(0, 0, 200, 90, "bool");
          o->box(fltk::DOWN_BOX);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
          o->hide();
          o->begin();
           {fltk::RadioButton* o = ui_bool_true = new fltk::RadioButton(55, 20, 20, 20, "true");
            o->set_flag(fltk::STATE);
            o->callback((fltk::Callback*)cb_ui_bool_true);
          }
           {fltk::RadioButton* o = ui_bool_false = new fltk::RadioButton(105, 20, 20, 20, "false");
            o->callback((fltk::Callback*)cb_ui_bool_false);
          }
           {fltk::Button* o = new fltk::Button(161, 20, 15, 15);
            o->set_vertical();
            o->callback((fltk::Callback*)cb_6);
          }
          o->end();
        }
         {fltk::Group* o = ui_string_grp = new fltk::Group(0, 0, 200, 90, "string");
          o->box(fltk::DOWN_BOX);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
          o->hide();
          o->begin();
           {fltk::Input* o = ui_string_val = new fltk::Input(5, 25, 190, 25);
            o->callback((fltk::Callback*)cb_ui_string_val);
            o->when(fltk::WHEN_ENTER_KEY);
          }
          o->end();
        }
         {fltk::Group* o = ui_quat_grp = new fltk::Group(1, 0, 200, 95, "Quat");
          o->box(fltk::DOWN_BOX);
          o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
          o->hide();
          o->begin();
           {fltk::ValueSlider* o = ui_qx_input = new fltk::ValueSlider(35, 40, 150, 20, "x");
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_qx_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::ValueSlider* o = ui_qy_input = new fltk::ValueSlider(35, 58, 150, 20, "y");
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_qy_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::ValueSlider* o = ui_qz_input = new fltk::ValueSlider(35, 75, 150, 20, "z");
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_qz_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::ValueSlider* o = ui_qw_input = new fltk::ValueSlider(35, 21, 150, 20, "w");
            o->step(0.001);
            o->callback((fltk::Callback*)cb_ui_qw_input);
            o->align(fltk::ALIGN_LEFT);
          }
           {fltk::Button* o = new fltk::Button(5, 5, 40, 15, "eul");
            o->callback((fltk::Callback*)cb_eul);
          }
          o->end();
        }
        o->end();
      }
       {fltk::CheckButton* o = ui_stream_parm = new fltk::CheckButton(16, 505, 25, 25, "stream");
        o->tooltip("this will automatically stream the values of the selected parameter");
      }
       {fltk::CheckButton* o = ui_save_parm = new fltk::CheckButton(76, 505, 25, 25, "save");
        o->callback((fltk::Callback*)cb_ui_save_parm);
        o->tooltip("save the parameter or not\n");
      }
       {fltk::Group* o = new fltk::Group(56, 5, 150, 30);
        o->begin();
         {fltk::CheckButton* o = ui_type_choice[0] = new fltk::CheckButton(40, 10, 20, 20, "v");
          o->callback((fltk::Callback*)cb_ui_type_choice);
          o->align(fltk::ALIGN_TOP);
        }
         {fltk::CheckButton* o = ui_type_choice[1] = new fltk::CheckButton(55, 10, 20, 20, "q");
          o->set_flag(fltk::STATE);
          o->callback((fltk::Callback*)cb_ui_type_choice1);
          o->align(fltk::ALIGN_TOP);
        }
         {fltk::CheckButton* o = ui_type_choice[2] = new fltk::CheckButton(70, 10, 20, 20, "b");
          o->callback((fltk::Callback*)cb_ui_type_choice2);
          o->align(fltk::ALIGN_TOP);
        }
         {fltk::CheckButton* o = ui_type_choice[3] = new fltk::CheckButton(85, 10, 20, 20, "f");
          o->callback((fltk::Callback*)cb_ui_type_choice3);
          o->align(fltk::ALIGN_TOP);
        }
         {fltk::CheckButton* o = ui_type_choice[4] = new fltk::CheckButton(100, 10, 20, 20, "s");
          o->callback((fltk::Callback*)cb_ui_type_choice4);
          o->align(fltk::ALIGN_TOP);
        }
         {fltk::CheckButton* o = ui_type_choice[5] = new fltk::CheckButton(115, 10, 20, 20, "c");
          o->callback((fltk::Callback*)cb_ui_type_choice5);
          o->align(fltk::ALIGN_TOP);
        }
         {fltk::CheckButton* o = ui_type_choice[6] = new fltk::CheckButton(130, 10, 20, 20, "i");
          o->callback((fltk::Callback*)cb_ui_type_choice6);
          o->align(fltk::ALIGN_TOP);
        }
        o->end();
      }
       {fltk::CheckButton* o = ui_make_traj = new fltk::CheckButton(126, 505, 25, 25, "traj");
        o->callback((fltk::Callback*)cb_ui_make_traj);
        o->tooltip("if a node is made attach a trajectory to it\n");
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
}
