// generated by Fast Light User Interface Designer (fluid) version 2.1000

#ifndef phw_window_fluid_h
#define phw_window_fluid_h
# include "phw_events.h"
# include "phw_viewer.h"
# include "phw_graph_viewer.h"
# include "phw_node_viewer.h"
#include <fltk/Window.h>
#include <fltk/Group.h>
#include <fltk/LightButton.h>
#include <fltk/MenuBar.h>
#include <fltk/Item.h>
#include <fltk/ItemGroup.h>
#include <fltk/Divider.h>
#include <fltk/Output.h>
#include <fltk/Button.h>
#include <fltk/TabGroup.h>
#include <fltk/Browser.h>
#include <fltk/ValueSlider.h>
#include <fltk/CheckButton.h>
#include <fltk/Slider.h>
#include <fltk/ValueInput.h>
#include <fltk/MultiBrowser.h>
#include <fltk/Input.h>
#include <fltk/ProgressBar.h>
#include <fltk/ValueOutput.h>
#include <fltk/RadioButton.h>
#include <fltk/WordwrapOutput.h>

class HumanWindowFluid  {
public:
  virtual void event ( HumanWindowEvent e )=0;
  HumanWindowFluid();
  fltk::Window *ui_window;
    fltk::Group *ui_main_group;
        fltk::Group *ui_main_header_group;
          fltk::LightButton *ui_ode_run;
private:
          inline void cb_ui_ode_run_i(fltk::LightButton*, void*);
          static void cb_ui_ode_run(fltk::LightButton*, void*);
            inline void cb_X_i(fltk::Item*, void*);
            static void cb_X(fltk::Item*, void*);
                inline void cb_save_i(fltk::Item*, void*);
                static void cb_save(fltk::Item*, void*);
                inline void cb_save1_i(fltk::Item*, void*);
                static void cb_save1(fltk::Item*, void*);
                inline void cb_everything_i(fltk::Item*, void*);
                static void cb_everything(fltk::Item*, void*);
                inline void cb_new_i(fltk::Item*, void*);
                static void cb_new(fltk::Item*, void*);
                inline void cb_new1_i(fltk::Item*, void*);
                static void cb_new1(fltk::Item*, void*);
                inline void cb_current_i(fltk::Item*, void*);
                static void cb_current(fltk::Item*, void*);
                inline void cb_bounds_i(fltk::Item*, void*);
                static void cb_bounds(fltk::Item*, void*);
                inline void cb_base_i(fltk::Item*, void*);
                static void cb_base(fltk::Item*, void*);
                inline void cb_motion_i(fltk::Item*, void*);
                static void cb_motion(fltk::Item*, void*);
                inline void cb_set_i(fltk::Item*, void*);
                static void cb_set(fltk::Item*, void*);
              inline void cb_load_i(fltk::Item*, void*);
              static void cb_load(fltk::Item*, void*);
              inline void cb_connect_i(fltk::Item*, void*);
              static void cb_connect(fltk::Item*, void*);
                inline void cb_human_i(fltk::Item*, void*);
                static void cb_human(fltk::Item*, void*);
                inline void cb_Files_i(fltk::Item*, void*);
                static void cb_Files(fltk::Item*, void*);
                inline void cb_ODE_i(fltk::Item*, void*);
                static void cb_ODE(fltk::Item*, void*);
                inline void cb_Viewer_i(fltk::Item*, void*);
                static void cb_Viewer(fltk::Item*, void*);
                inline void cb_Motion_i(fltk::Item*, void*);
                static void cb_Motion(fltk::Item*, void*);
                inline void cb_Graph_i(fltk::Item*, void*);
                static void cb_Graph(fltk::Item*, void*);
                inline void cb_Planner_i(fltk::Item*, void*);
                static void cb_Planner(fltk::Item*, void*);
                inline void cb_manager_i(fltk::Item*, void*);
                static void cb_manager(fltk::Item*, void*);
                inline void cb_edit_i(fltk::Item*, void*);
                static void cb_edit(fltk::Item*, void*);
                inline void cb_set1_i(fltk::Item*, void*);
                static void cb_set1(fltk::Item*, void*);
                inline void cb_remove_i(fltk::Item*, void*);
                static void cb_remove(fltk::Item*, void*);
                inline void cb_set2_i(fltk::Item*, void*);
                static void cb_set2(fltk::Item*, void*);
                inline void cb_edit1_i(fltk::Item*, void*);
                static void cb_edit1(fltk::Item*, void*);
                  inline void cb_randomize_i(fltk::Item*, void*);
                  static void cb_randomize(fltk::Item*, void*);
                  inline void cb_reset_i(fltk::Item*, void*);
                  static void cb_reset(fltk::Item*, void*);
                  inline void cb_force_i(fltk::Item*, void*);
                  static void cb_force(fltk::Item*, void*);
                  inline void cb_reconfigure_i(fltk::Item*, void*);
                  static void cb_reconfigure(fltk::Item*, void*);
                  inline void cb_make_i(fltk::Item*, void*);
                  static void cb_make(fltk::Item*, void*);
                  inline void cb_reduce_i(fltk::Item*, void*);
                  static void cb_reduce(fltk::Item*, void*);
                  inline void cb_add_i(fltk::Item*, void*);
                  static void cb_add(fltk::Item*, void*);
                  inline void cb_expand_i(fltk::Item*, void*);
                  static void cb_expand(fltk::Item*, void*);
                  inline void cb_load1_i(fltk::Item*, void*);
                  static void cb_load1(fltk::Item*, void*);
                  inline void cb_switch_i(fltk::Item*, void*);
                  static void cb_switch(fltk::Item*, void*);
                  inline void cb_segment_i(fltk::Item*, void*);
                  static void cb_segment(fltk::Item*, void*);
                  inline void cb_make1_i(fltk::Item*, void*);
                  static void cb_make1(fltk::Item*, void*);
                  inline void cb_make2_i(fltk::Item*, void*);
                  static void cb_make2(fltk::Item*, void*);
                  inline void cb_scale_i(fltk::Item*, void*);
                  static void cb_scale(fltk::Item*, void*);
                  inline void cb_capture_i(fltk::Item*, void*);
                  static void cb_capture(fltk::Item*, void*);
                  inline void cb_generalize_i(fltk::Item*, void*);
                  static void cb_generalize(fltk::Item*, void*);
                inline void cb_explore_i(fltk::Item*, void*);
                static void cb_explore(fltk::Item*, void*);
                inline void cb_expand1_i(fltk::Item*, void*);
                static void cb_expand1(fltk::Item*, void*);
                inline void cb_stop_i(fltk::Item*, void*);
                static void cb_stop(fltk::Item*, void*);
                inline void cb_analyze_i(fltk::Item*, void*);
                static void cb_analyze(fltk::Item*, void*);
                inline void cb_verify_i(fltk::Item*, void*);
                static void cb_verify(fltk::Item*, void*);
                inline void cb_reanalyze_i(fltk::Item*, void*);
                static void cb_reanalyze(fltk::Item*, void*);
                inline void cb_set3_i(fltk::Item*, void*);
                static void cb_set3(fltk::Item*, void*);
                inline void cb_set4_i(fltk::Item*, void*);
                static void cb_set4(fltk::Item*, void*);
                inline void cb_remove1_i(fltk::Item*, void*);
                static void cb_remove1(fltk::Item*, void*);
                inline void cb_update_i(fltk::Item*, void*);
                static void cb_update(fltk::Item*, void*);
                inline void cb_select_i(fltk::Item*, void*);
                static void cb_select(fltk::Item*, void*);
                inline void cb_start_i(fltk::Item*, void*);
                static void cb_start(fltk::Item*, void*);
                inline void cb_refresh_i(fltk::Item*, void*);
                static void cb_refresh(fltk::Item*, void*);
                inline void cb_delete_i(fltk::Item*, void*);
                static void cb_delete(fltk::Item*, void*);
                inline void cb_rename_i(fltk::Item*, void*);
                static void cb_rename(fltk::Item*, void*);
                inline void cb_init_i(fltk::Item*, void*);
                static void cb_init(fltk::Item*, void*);
                inline void cb_set5_i(fltk::Item*, void*);
                static void cb_set5(fltk::Item*, void*);
                inline void cb_edit2_i(fltk::Item*, void*);
                static void cb_edit2(fltk::Item*, void*);
                inline void cb_merge_i(fltk::Item*, void*);
                static void cb_merge(fltk::Item*, void*);
                inline void cb_reduce1_i(fltk::Item*, void*);
                static void cb_reduce1(fltk::Item*, void*);
                  inline void cb_Linear_i(fltk::Item*, void*);
                  static void cb_Linear(fltk::Item*, void*);
                  inline void cb_Bezier_i(fltk::Item*, void*);
                  static void cb_Bezier(fltk::Item*, void*);
                  inline void cb_Step_i(fltk::Item*, void*);
                  static void cb_Step(fltk::Item*, void*);
                  inline void cb_make3_i(fltk::Item*, void*);
                  static void cb_make3(fltk::Item*, void*);
                  inline void cb_make4_i(fltk::Item*, void*);
                  static void cb_make4(fltk::Item*, void*);
                  inline void cb_make5_i(fltk::Item*, void*);
                  static void cb_make5(fltk::Item*, void*);
                  inline void cb_make6_i(fltk::Item*, void*);
                  static void cb_make6(fltk::Item*, void*);
                  inline void cb_make7_i(fltk::Item*, void*);
                  static void cb_make7(fltk::Item*, void*);
                  inline void cb_make8_i(fltk::Item*, void*);
                  static void cb_make8(fltk::Item*, void*);
                inline void cb_add1_i(fltk::Item*, void*);
                static void cb_add1(fltk::Item*, void*);
                inline void cb_Drop_i(fltk::Item*, void*);
                static void cb_Drop(fltk::Item*, void*);
                inline void cb_Reset_i(fltk::Item*, void*);
                static void cb_Reset(fltk::Item*, void*);
              inline void cb_show_i(fltk::Item*, void*);
              static void cb_show(fltk::Item*, void*);
              inline void cb_show1_i(fltk::Item*, void*);
              static void cb_show1(fltk::Item*, void*);
              inline void cb_hide_i(fltk::Item*, void*);
              static void cb_hide(fltk::Item*, void*);
              inline void cb_show2_i(fltk::Item*, void*);
              static void cb_show2(fltk::Item*, void*);
                inline void cb_view_i(fltk::Item*, void*);
                static void cb_view(fltk::Item*, void*);
                inline void cb_camera_i(fltk::Item*, void*);
                static void cb_camera(fltk::Item*, void*);
                inline void cb_human1_i(fltk::Item*, void*);
                static void cb_human1(fltk::Item*, void*);
                inline void cb_visualization_i(fltk::Item*, void*);
                static void cb_visualization(fltk::Item*, void*);
                inline void cb_collision_i(fltk::Item*, void*);
                static void cb_collision(fltk::Item*, void*);
                inline void cb_heading_i(fltk::Item*, void*);
                static void cb_heading(fltk::Item*, void*);
                inline void cb_skeleton_i(fltk::Item*, void*);
                static void cb_skeleton(fltk::Item*, void*);
                inline void cb_axis_i(fltk::Item*, void*);
                static void cb_axis(fltk::Item*, void*);
                inline void cb_trajectories_i(fltk::Item*, void*);
                static void cb_trajectories(fltk::Item*, void*);
                inline void cb_original_i(fltk::Item*, void*);
                static void cb_original(fltk::Item*, void*);
                inline void cb_snapshots_i(fltk::Item*, void*);
                static void cb_snapshots(fltk::Item*, void*);
                inline void cb_reset1_i(fltk::Item*, void*);
                static void cb_reset1(fltk::Item*, void*);
                inline void cb_fit_i(fltk::Item*, void*);
                static void cb_fit(fltk::Item*, void*);
                inline void cb_bounds1_i(fltk::Item*, void*);
                static void cb_bounds1(fltk::Item*, void*);
                  inline void cb_override_i(fltk::Item*, void*);
                  static void cb_override(fltk::Item*, void*);
                inline void cb_show3_i(fltk::Item*, void*);
                static void cb_show3(fltk::Item*, void*);
                inline void cb_motion1_i(fltk::Item*, void*);
                static void cb_motion1(fltk::Item*, void*);
                inline void cb_interpolate_i(fltk::Item*, void*);
                static void cb_interpolate(fltk::Item*, void*);
                inline void cb_node_i(fltk::Item*, void*);
                static void cb_node(fltk::Item*, void*);
                inline void cb_skel_i(fltk::Item*, void*);
                static void cb_skel(fltk::Item*, void*);
              inline void cb_save2_i(fltk::Item*, void*);
              static void cb_save2(fltk::Item*, void*);
              inline void cb_make9_i(fltk::Item*, void*);
              static void cb_make9(fltk::Item*, void*);
              inline void cb_Print_i(fltk::Item*, void*);
              static void cb_Print(fltk::Item*, void*);
              inline void cb_Print1_i(fltk::Item*, void*);
              static void cb_Print1(fltk::Item*, void*);
              inline void cb_Print2_i(fltk::Item*, void*);
              static void cb_Print2(fltk::Item*, void*);
public:
          fltk::Output *ui_state_label;
          fltk::Output *ui_motion_label;
private:
          inline void cb_Step1_i(fltk::Button*, void*);
          static void cb_Step1(fltk::Button*, void*);
          inline void cb_Reset1_i(fltk::Button*, void*);
          static void cb_Reset1(fltk::Button*, void*);
          inline void cb_play_i(fltk::Button*, void*);
          static void cb_play(fltk::Button*, void*);
public:
        fltk::Group *ui_tab_grp;
          fltk::TabGroup *ui_main_tab;
                fltk::Browser *ui_scene_browser;
private:
                inline void cb_ui_scene_browser_i(fltk::Browser*, void*);
                static void cb_ui_scene_browser(fltk::Browser*, void*);
                inline void cb_load2_i(fltk::Button*, void*);
                static void cb_load2(fltk::Button*, void*);
                inline void cb_cont_i(fltk::Button*, void*);
                static void cb_cont(fltk::Button*, void*);
                inline void cb_ui_env_size_i(fltk::ValueSlider*, void*);
                static void cb_ui_env_size(fltk::ValueSlider*, void*);
                inline void cb_create_i(fltk::Button*, void*);
                static void cb_create(fltk::Button*, void*);
                inline void cb_ui_env_size1_i(fltk::ValueSlider*, void*);
                static void cb_ui_env_size1(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_env_size[3];
private:
                inline void cb_ui_env_size2_i(fltk::ValueSlider*, void*);
                static void cb_ui_env_size2(fltk::ValueSlider*, void*);
                inline void cb_edit3_i(fltk::Button*, void*);
                static void cb_edit3(fltk::Button*, void*);
public:
                fltk::ValueSlider *ui_env_mu;
private:
                inline void cb_ui_env_mu_i(fltk::ValueSlider*, void*);
                static void cb_ui_env_mu(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_env_bounce;
private:
                inline void cb_ui_env_bounce_i(fltk::ValueSlider*, void*);
                static void cb_ui_env_bounce(fltk::ValueSlider*, void*);
                inline void cb_duplicate_i(fltk::Button*, void*);
                static void cb_duplicate(fltk::Button*, void*);
                inline void cb_add2_i(fltk::Button*, void*);
                static void cb_add2(fltk::Button*, void*);
public:
                fltk::CheckButton *ui_env_dynamic;
private:
                inline void cb_ui_env_dynamic_i(fltk::CheckButton*, void*);
                static void cb_ui_env_dynamic(fltk::CheckButton*, void*);
public:
                fltk::ValueSlider *ui_env_density;
private:
                inline void cb_ui_env_density_i(fltk::ValueSlider*, void*);
                static void cb_ui_env_density(fltk::ValueSlider*, void*);
public:
                fltk::CheckButton *ui_env_unique;
private:
                inline void cb_ui_env_unique_i(fltk::CheckButton*, void*);
                static void cb_ui_env_unique(fltk::CheckButton*, void*);
public:
                fltk::Browser *ui_character_list;
private:
                inline void cb_ui_character_list_i(fltk::Browser*, void*);
                static void cb_ui_character_list(fltk::Browser*, void*);
                inline void cb_save3_i(fltk::Button*, void*);
                static void cb_save3(fltk::Button*, void*);
                inline void cb_load3_i(fltk::Button*, void*);
                static void cb_load3(fltk::Button*, void*);
                inline void cb_delete1_i(fltk::Button*, void*);
                static void cb_delete1(fltk::Button*, void*);
                inline void cb_new2_i(fltk::Button*, void*);
                static void cb_new2(fltk::Button*, void*);
                inline void cb_edit4_i(fltk::Button*, void*);
                static void cb_edit4(fltk::Button*, void*);
                inline void cb_create1_i(fltk::Button*, void*);
                static void cb_create1(fltk::Button*, void*);
public:
                fltk::CheckButton *ui_mult_characters;
private:
                inline void cb_clear_i(fltk::Button*, void*);
                static void cb_clear(fltk::Button*, void*);
public:
                fltk::Browser *ui_state_browser;
private:
                inline void cb_ui_state_browser_i(fltk::Browser*, void*);
                static void cb_ui_state_browser(fltk::Browser*, void*);
                    inline void cb_new3_i(fltk::Item*, void*);
                    static void cb_new3(fltk::Item*, void*);
                    inline void cb_capture1_i(fltk::Item*, void*);
                    static void cb_capture1(fltk::Item*, void*);
                    inline void cb_reload_i(fltk::Item*, void*);
                    static void cb_reload(fltk::Item*, void*);
                    inline void cb_save4_i(fltk::Item*, void*);
                    static void cb_save4(fltk::Item*, void*);
                    inline void cb_delete2_i(fltk::Item*, void*);
                    static void cb_delete2(fltk::Item*, void*);
                    inline void cb_snapshot_i(fltk::Item*, void*);
                    static void cb_snapshot(fltk::Item*, void*);
                    inline void cb_rename1_i(fltk::Item*, void*);
                    static void cb_rename1(fltk::Item*, void*);
public:
              fltk::Group *ui_graph_group;
                fltk::MenuBar *ui_graph_menu;
                  fltk::ItemGroup *ui_curve_edit_mode;
private:
                    inline void cb_move_i(fltk::Item*, void*);
                    static void cb_move(fltk::Item*, void*);
                    inline void cb_add3_i(fltk::Item*, void*);
                    static void cb_add3(fltk::Item*, void*);
                    inline void cb_delete3_i(fltk::Item*, void*);
                    static void cb_delete3(fltk::Item*, void*);
                    inline void cb_free_i(fltk::Item*, void*);
                    static void cb_free(fltk::Item*, void*);
                    inline void cb_straighten_i(fltk::Item*, void*);
                    static void cb_straighten(fltk::Item*, void*);
                    inline void cb_flatten_i(fltk::Item*, void*);
                    static void cb_flatten(fltk::Item*, void*);
                    inline void cb_edit5_i(fltk::Item*, void*);
                    static void cb_edit5(fltk::Item*, void*);
public:
                fltk::Group *ui_graphviewer_group;
                  HumanWindowGraphViewer *ui_graph_viewer;
                fltk::Slider *ui_graph_phase;
private:
                inline void cb_ui_graph_phase_i(fltk::Slider*, void*);
                static void cb_ui_graph_phase(fltk::Slider*, void*);
public:
                fltk::Group *ui_frame_group;
                  fltk::ValueInput *ui_current_frame;
private:
                  inline void cb_ui_current_frame_i(fltk::ValueInput*, void*);
                  static void cb_ui_current_frame(fltk::ValueInput*, void*);
                  inline void cb_ui_curve_pt_i(fltk::ValueInput*, void*);
                  static void cb_ui_curve_pt(fltk::ValueInput*, void*);
public:
                  fltk::ValueInput *ui_curve_pt[2];
private:
                  inline void cb_ui_curve_pt1_i(fltk::ValueInput*, void*);
                  static void cb_ui_curve_pt1(fltk::ValueInput*, void*);
                  inline void cb__i(fltk::Button*, void*);
                  static void cb_(fltk::Button*, void*);
public:
                fltk::Group *ui_time_group;
                  fltk::ValueInput *ui_last_time;
private:
                  inline void cb_ui_last_time_i(fltk::ValueInput*, void*);
                  static void cb_ui_last_time(fltk::ValueInput*, void*);
public:
                  fltk::ValueInput *ui_first_time;
private:
                  inline void cb_ui_first_time_i(fltk::ValueInput*, void*);
                  static void cb_ui_first_time(fltk::ValueInput*, void*);
public:
                  fltk::ValueInput *ui_current_time;
private:
                  inline void cb_ui_current_time_i(fltk::ValueInput*, void*);
                  static void cb_ui_current_time(fltk::ValueInput*, void*);
public:
                fltk::CheckButton *ui_show_time;
private:
                inline void cb_ui_show_time_i(fltk::CheckButton*, void*);
                static void cb_ui_show_time(fltk::CheckButton*, void*);
public:
              fltk::TabGroup *ui_motion_tab_group;
                  fltk::Browser *ui_motionList;
private:
                  inline void cb_ui_motionList_i(fltk::Browser*, void*);
                  static void cb_ui_motionList(fltk::Browser*, void*);
                    inline void cb_reload1_i(fltk::Button*, void*);
                    static void cb_reload1(fltk::Button*, void*);
                    inline void cb_new4_i(fltk::Button*, void*);
                    static void cb_new4(fltk::Button*, void*);
                    inline void cb_delete4_i(fltk::Button*, void*);
                    static void cb_delete4(fltk::Button*, void*);
public:
                  fltk::Browser *ui_kn_motion_list;
private:
                  inline void cb_ui_kn_motion_list_i(fltk::Browser*, void*);
                  static void cb_ui_kn_motion_list(fltk::Browser*, void*);
                  inline void cb_mirror_i(fltk::Button*, void*);
                  static void cb_mirror(fltk::Button*, void*);
                  inline void cb_trans_i(fltk::Button*, void*);
                  static void cb_trans(fltk::Button*, void*);
                  inline void cb_orient_i(fltk::Button*, void*);
                  static void cb_orient(fltk::Button*, void*);
                  inline void cb_composite_i(fltk::Button*, void*);
                  static void cb_composite(fltk::Button*, void*);
public:
              fltk::Group *ui_channel_group;
                fltk::MultiBrowser *ui_channelList;
private:
                inline void cb_ui_channelList_i(fltk::MultiBrowser*, void*);
                static void cb_ui_channelList(fltk::MultiBrowser*, void*);
                inline void cb_1_i(fltk::Button*, void*);
                static void cb_1(fltk::Button*, void*);
                inline void cb_2_i(fltk::Button*, void*);
                static void cb_2(fltk::Button*, void*);
public:
                fltk::CheckButton *ui_channel_active;
private:
                inline void cb_ui_channel_active_i(fltk::CheckButton*, void*);
                static void cb_ui_channel_active(fltk::CheckButton*, void*);
public:
                fltk::CheckButton *ui_trajectories_vis;
private:
                inline void cb_ui_trajectories_vis_i(fltk::CheckButton*, void*);
                static void cb_ui_trajectories_vis(fltk::CheckButton*, void*);
public:
                fltk::ValueSlider *ui_desired_heading;
private:
                inline void cb_ui_desired_heading_i(fltk::ValueSlider*, void*);
                static void cb_ui_desired_heading(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_stanceSwingRatio;
private:
                inline void cb_ui_stanceSwingRatio_i(fltk::ValueSlider*, void*);
                static void cb_ui_stanceSwingRatio(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_stanceToeHeel;
private:
                inline void cb_ui_stanceToeHeel_i(fltk::ValueSlider*, void*);
                static void cb_ui_stanceToeHeel(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_p_mult;
private:
                inline void cb_ui_p_mult_i(fltk::ValueSlider*, void*);
                static void cb_ui_p_mult(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_d_mult;
private:
                inline void cb_ui_d_mult_i(fltk::ValueSlider*, void*);
                static void cb_ui_d_mult(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_psw_mult;
private:
                inline void cb_ui_psw_mult_i(fltk::ValueSlider*, void*);
                static void cb_ui_psw_mult(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_dsw_mult;
private:
                inline void cb_ui_dsw_mult_i(fltk::ValueSlider*, void*);
                static void cb_ui_dsw_mult(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_contact_offset;
private:
                inline void cb_ui_contact_offset_i(fltk::ValueSlider*, void*);
                static void cb_ui_contact_offset(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_contact_offset_z;
private:
                inline void cb_ui_contact_offset_z_i(fltk::ValueSlider*, void*);
                static void cb_ui_contact_offset_z(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_sim_d_x;
private:
                inline void cb_ui_sim_d_x_i(fltk::ValueSlider*, void*);
                static void cb_ui_sim_d_x(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_sim_d_z;
private:
                inline void cb_ui_sim_d_z_i(fltk::ValueSlider*, void*);
                static void cb_ui_sim_d_z(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_sim_v_x;
private:
                inline void cb_ui_sim_v_x_i(fltk::ValueSlider*, void*);
                static void cb_ui_sim_v_x(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_sim_v_z;
private:
                inline void cb_ui_sim_v_z_i(fltk::ValueSlider*, void*);
                static void cb_ui_sim_v_z(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_sim_root_scale;
private:
                inline void cb_ui_sim_root_scale_i(fltk::ValueSlider*, void*);
                static void cb_ui_sim_root_scale(fltk::ValueSlider*, void*);
public:
                fltk::LightButton *ui_select_mode;
                fltk::Output *ui_selected_joint;
private:
                inline void cb_edit6_i(fltk::Button*, void*);
                static void cb_edit6(fltk::Button*, void*);
                  inline void cb_3_i(fltk::Button*, void*);
                  static void cb_3(fltk::Button*, void*);
                  inline void cb_4_i(fltk::Button*, void*);
                  static void cb_4(fltk::Button*, void*);
                  inline void cb_5_i(fltk::Button*, void*);
                  static void cb_5(fltk::Button*, void*);
                  inline void cb_v_i(fltk::Button*, void*);
                  static void cb_v(fltk::Button*, void*);
public:
                  fltk::ValueInput *ui_ext_force_duration;
                  fltk::ValueInput *ui_ext_force;
                fltk::ValueSlider *ui_vel_desired_z;
private:
                inline void cb_ui_vel_desired_z_i(fltk::ValueSlider*, void*);
                static void cb_ui_vel_desired_z(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_desired_v_scale;
private:
                inline void cb_ui_desired_v_scale_i(fltk::ValueSlider*, void*);
                static void cb_ui_desired_v_scale(fltk::ValueSlider*, void*);
public:
                fltk::Browser *ui_controller_browser;
private:
                inline void cb_ui_controller_browser_i(fltk::Browser*, void*);
                static void cb_ui_controller_browser(fltk::Browser*, void*);
                    inline void cb_edit7_i(fltk::Item*, void*);
                    static void cb_edit7(fltk::Item*, void*);
                    inline void cb_match_i(fltk::Item*, void*);
                    static void cb_match(fltk::Item*, void*);
                    inline void cb_match1_i(fltk::Item*, void*);
                    static void cb_match1(fltk::Item*, void*);
                    inline void cb_match2_i(fltk::Item*, void*);
                    static void cb_match2(fltk::Item*, void*);
public:
                fltk::LightButton *ui_controll_active;
private:
                inline void cb_ui_controll_active_i(fltk::LightButton*, void*);
                static void cb_ui_controll_active(fltk::LightButton*, void*);
public:
                fltk::LightButton *ui_controll_visible;
private:
                inline void cb_ui_controll_visible_i(fltk::LightButton*, void*);
                static void cb_ui_controll_visible(fltk::LightButton*, void*);
public:
              fltk::Group *ui_manip_group;
private:
                    inline void cb_edit8_i(fltk::Item*, void*);
                    static void cb_edit8(fltk::Item*, void*);
                    inline void cb_match3_i(fltk::Item*, void*);
                    static void cb_match3(fltk::Item*, void*);
                    inline void cb_match4_i(fltk::Item*, void*);
                    static void cb_match4(fltk::Item*, void*);
                    inline void cb_match5_i(fltk::Item*, void*);
                    static void cb_match5(fltk::Item*, void*);
public:
                fltk::Browser *ui_manip_browser;
private:
                inline void cb_ui_manip_browser_i(fltk::Browser*, void*);
                static void cb_ui_manip_browser(fltk::Browser*, void*);
public:
                fltk::LightButton *ui_manip_active;
private:
                inline void cb_ui_manip_active_i(fltk::LightButton*, void*);
                static void cb_ui_manip_active(fltk::LightButton*, void*);
public:
                fltk::LightButton *ui_manip_visible;
private:
                inline void cb_ui_manip_visible_i(fltk::LightButton*, void*);
                static void cb_ui_manip_visible(fltk::LightButton*, void*);
                inline void cb_reduce2_i(fltk::Button*, void*);
                static void cb_reduce2(fltk::Button*, void*);
public:
                fltk::ValueInput *ui_curve_fit_points;
private:
                inline void cb_ui_curve_fit_points_i(fltk::ValueInput*, void*);
                static void cb_ui_curve_fit_points(fltk::ValueInput*, void*);
public:
                fltk::ValueInput *ui_curve_fit_tolerance;
private:
                inline void cb_ui_curve_fit_tolerance_i(fltk::ValueInput*, void*);
                static void cb_ui_curve_fit_tolerance(fltk::ValueInput*, void*);
                inline void cb_merge1_i(fltk::Button*, void*);
                static void cb_merge1(fltk::Button*, void*);
public:
                fltk::ValueInput *ui_curve_merge_tolerance;
private:
                inline void cb_ui_curve_merge_tolerance_i(fltk::ValueInput*, void*);
                static void cb_ui_curve_merge_tolerance(fltk::ValueInput*, void*);
public:
                fltk::ValueInput *ui_curve_conc_tolerance;
private:
                inline void cb_ui_curve_conc_tolerance_i(fltk::ValueInput*, void*);
                static void cb_ui_curve_conc_tolerance(fltk::ValueInput*, void*);
public:
              fltk::LightButton *ui_interactive_edit;
private:
              inline void cb_ui_interactive_edit_i(fltk::LightButton*, void*);
              static void cb_ui_interactive_edit(fltk::LightButton*, void*);
              inline void cb_Stop_i(fltk::Button*, void*);
              static void cb_Stop(fltk::Button*, void*);
              inline void cb_Start_i(fltk::Button*, void*);
              static void cb_Start(fltk::Button*, void*);
public:
              fltk::LightButton *ui_draw;
private:
              inline void cb_ui_draw_i(fltk::LightButton*, void*);
              static void cb_ui_draw(fltk::LightButton*, void*);
public:
              fltk::ValueInput *ui_sample_bounds[5];
private:
              inline void cb_ui_sample_bounds_i(fltk::ValueInput*, void*);
              static void cb_ui_sample_bounds(fltk::ValueInput*, void*);
              inline void cb_ui_sample_bounds1_i(fltk::ValueInput*, void*);
              static void cb_ui_sample_bounds1(fltk::ValueInput*, void*);
              inline void cb_ui_sample_bounds2_i(fltk::ValueInput*, void*);
              static void cb_ui_sample_bounds2(fltk::ValueInput*, void*);
              inline void cb_ui_sample_bounds3_i(fltk::ValueInput*, void*);
              static void cb_ui_sample_bounds3(fltk::ValueInput*, void*);
              inline void cb_ui_sample_bounds4_i(fltk::ValueInput*, void*);
              static void cb_ui_sample_bounds4(fltk::ValueInput*, void*);
              inline void cb_expand2_i(fltk::Button*, void*);
              static void cb_expand2(fltk::Button*, void*);
public:
              fltk::LightButton *ui_pick_mode;
              fltk::MultiBrowser *ui_jointList;
private:
              inline void cb_ui_jointList_i(fltk::MultiBrowser*, void*);
              static void cb_ui_jointList(fltk::MultiBrowser*, void*);
public:
              fltk::ValueSlider *ui_jointP;
private:
              inline void cb_ui_jointP_i(fltk::ValueSlider*, void*);
              static void cb_ui_jointP(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_jointD;
private:
              inline void cb_ui_jointD_i(fltk::ValueSlider*, void*);
              static void cb_ui_jointD(fltk::ValueSlider*, void*);
public:
              fltk::CheckButton *ui_jointGrav;
private:
              inline void cb_ui_jointGrav_i(fltk::CheckButton*, void*);
              static void cb_ui_jointGrav(fltk::CheckButton*, void*);
public:
              fltk::CheckButton *ui_jointPD;
private:
              inline void cb_ui_jointPD_i(fltk::CheckButton*, void*);
              static void cb_ui_jointPD(fltk::CheckButton*, void*);
public:
              fltk::ValueSlider *ui_jointJX;
private:
              inline void cb_ui_jointJX_i(fltk::ValueSlider*, void*);
              static void cb_ui_jointJX(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_jointJY;
private:
              inline void cb_ui_jointJY_i(fltk::ValueSlider*, void*);
              static void cb_ui_jointJY(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_jointJZ;
private:
              inline void cb_ui_jointJZ_i(fltk::ValueSlider*, void*);
              static void cb_ui_jointJZ(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_jointMaxT;
private:
              inline void cb_ui_jointMaxT_i(fltk::ValueSlider*, void*);
              static void cb_ui_jointMaxT(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_jointRX;
private:
                inline void cb_ui_jointRX_i(fltk::ValueSlider*, void*);
                static void cb_ui_jointRX(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_jointRY;
private:
                inline void cb_ui_jointRY_i(fltk::ValueSlider*, void*);
                static void cb_ui_jointRY(fltk::ValueSlider*, void*);
public:
                fltk::ValueSlider *ui_jointRZ;
private:
                inline void cb_ui_jointRZ_i(fltk::ValueSlider*, void*);
                static void cb_ui_jointRZ(fltk::ValueSlider*, void*);
public:
                fltk::CheckButton *ui_feedback;
              fltk::CheckButton *ui_char_frame;
private:
              inline void cb_ui_char_frame_i(fltk::CheckButton*, void*);
              static void cb_ui_char_frame(fltk::CheckButton*, void*);
public:
              fltk::Output *ui_joint_type;
              fltk::Output *ui_multiSelect;
private:
              inline void cb_parm_i(fltk::Button*, void*);
              static void cb_parm(fltk::Button*, void*);
              inline void cb_body_i(fltk::Button*, void*);
              static void cb_body(fltk::Button*, void*);
              inline void cb_ui_joint_scale_i(fltk::ValueSlider*, void*);
              static void cb_ui_joint_scale(fltk::ValueSlider*, void*);
public:
              fltk::ValueSlider *ui_joint_scale[3];
private:
              inline void cb_ui_joint_scale1_i(fltk::ValueSlider*, void*);
              static void cb_ui_joint_scale1(fltk::ValueSlider*, void*);
              inline void cb_ui_joint_scale2_i(fltk::ValueSlider*, void*);
              static void cb_ui_joint_scale2(fltk::ValueSlider*, void*);
public:
      fltk::Input *ui_cmd_line;
private:
      inline void cb_ui_cmd_line_i(fltk::Input*, void*);
      static void cb_ui_cmd_line(fltk::Input*, void*);
public:
      fltk::Output *ui_message;
      AppViewer *ui_viewer;
      fltk::ProgressBar *ui_status_bar;
      fltk::ValueOutput *ui_num_found;
  fltk::Window *ui_composite_window;
private:
    inline void cb_makea_i(fltk::Button*, void*);
    static void cb_makea(fltk::Button*, void*);
public:
    fltk::Input *ui_control_motion;
      fltk::CheckButton *ui_comp[33];
      fltk::ValueInput *ui_first_frame_comp;
      fltk::ValueInput *ui_last_frame_comp;
      fltk::CheckButton *ui_all_frames;
private:
      inline void cb_ui_all_frames_i(fltk::CheckButton*, void*);
      static void cb_ui_all_frames(fltk::CheckButton*, void*);
public:
    fltk::Input *ui_group_name;
  fltk::Window *ui_node_window;
      HumanWindowNodeViewer *ui_node_viewer;
private:
          inline void cb_mult_i(fltk::Item*, void*);
          static void cb_mult(fltk::Item*, void*);
          inline void cb_switch1_i(fltk::Item*, void*);
          static void cb_switch1(fltk::Item*, void*);
          inline void cb_modulate_i(fltk::Item*, void*);
          static void cb_modulate(fltk::Item*, void*);
          inline void cb_add4_i(fltk::Item*, void*);
          static void cb_add4(fltk::Item*, void*);
          inline void cb_inverse_i(fltk::Item*, void*);
          static void cb_inverse(fltk::Item*, void*);
          inline void cb_trajectory_i(fltk::Item*, void*);
          static void cb_trajectory(fltk::Item*, void*);
          inline void cb_additive_i(fltk::Item*, void*);
          static void cb_additive(fltk::Item*, void*);
          inline void cb_scale1_i(fltk::Item*, void*);
          static void cb_scale1(fltk::Item*, void*);
          inline void cb_inverse1_i(fltk::Item*, void*);
          static void cb_inverse1(fltk::Item*, void*);
          inline void cb_feedback_i(fltk::Item*, void*);
          static void cb_feedback(fltk::Item*, void*);
          inline void cb_event_i(fltk::Item*, void*);
          static void cb_event(fltk::Item*, void*);
          inline void cb_idler_i(fltk::Item*, void*);
          static void cb_idler(fltk::Item*, void*);
          inline void cb_arrange_i(fltk::Item*, void*);
          static void cb_arrange(fltk::Item*, void*);
          inline void cb_detach_i(fltk::Item*, void*);
          static void cb_detach(fltk::Item*, void*);
          inline void cb_rename2_i(fltk::Item*, void*);
          static void cb_rename2(fltk::Item*, void*);
          inline void cb_edit9_i(fltk::Item*, void*);
          static void cb_edit9(fltk::Item*, void*);
          inline void cb_view1_i(fltk::Item*, void*);
          static void cb_view1(fltk::Item*, void*);
          inline void cb_view2_i(fltk::Item*, void*);
          static void cb_view2(fltk::Item*, void*);
          inline void cb_view3_i(fltk::Item*, void*);
          static void cb_view3(fltk::Item*, void*);
          inline void cb_hide1_i(fltk::Item*, void*);
          static void cb_hide1(fltk::Item*, void*);
          inline void cb_show4_i(fltk::Item*, void*);
          static void cb_show4(fltk::Item*, void*);
          inline void cb_hide2_i(fltk::Item*, void*);
          static void cb_hide2(fltk::Item*, void*);
public:
      fltk::ValueInput *ui_node_val;
private:
      inline void cb_ui_node_val_i(fltk::ValueInput*, void*);
      static void cb_ui_node_val(fltk::ValueInput*, void*);
public:
  fltk::Window *ui_graph_window;
    fltk::Group *ui_popviewer_group;
  fltk::Window *ui_interp_window;
private:
      inline void cb_ui_parm_edit_i(fltk::ValueSlider*, void*);
      static void cb_ui_parm_edit(fltk::ValueSlider*, void*);
      inline void cb_ui_parm_edit1_i(fltk::ValueSlider*, void*);
      static void cb_ui_parm_edit1(fltk::ValueSlider*, void*);
      inline void cb_ui_parm_edit2_i(fltk::ValueSlider*, void*);
      static void cb_ui_parm_edit2(fltk::ValueSlider*, void*);
      inline void cb_ui_parm_edit3_i(fltk::ValueSlider*, void*);
      static void cb_ui_parm_edit3(fltk::ValueSlider*, void*);
      inline void cb_ui_parm_edit4_i(fltk::ValueSlider*, void*);
      static void cb_ui_parm_edit4(fltk::ValueSlider*, void*);
      inline void cb_ui_parm_edit5_i(fltk::ValueSlider*, void*);
      static void cb_ui_parm_edit5(fltk::ValueSlider*, void*);
      inline void cb_ui_parm_edit6_i(fltk::ValueSlider*, void*);
      static void cb_ui_parm_edit6(fltk::ValueSlider*, void*);
      inline void cb_ui_parm_edit7_i(fltk::ValueSlider*, void*);
      static void cb_ui_parm_edit7(fltk::ValueSlider*, void*);
public:
      fltk::ValueSlider *ui_parm_edit[9];
private:
      inline void cb_ui_parm_edit8_i(fltk::ValueSlider*, void*);
      static void cb_ui_parm_edit8(fltk::ValueSlider*, void*);
public:
      fltk::Output *ui_parm_name[9];
      fltk::ValueInput *ui_parm_weight[9];
    fltk::CheckButton *ui_parm_live;
private:
    inline void cb_new5_i(fltk::Button*, void*);
    static void cb_new5(fltk::Button*, void*);
public:
    fltk::ValueSlider *ui_rbds_height;
private:
    inline void cb_ui_rbds_height_i(fltk::ValueSlider*, void*);
    static void cb_ui_rbds_height(fltk::ValueSlider*, void*);
public:
    fltk::ValueSlider *ui_rbds_support;
private:
    inline void cb_ui_rbds_support_i(fltk::ValueSlider*, void*);
    static void cb_ui_rbds_support(fltk::ValueSlider*, void*);
    inline void cb_env_i(fltk::Button*, void*);
    static void cb_env(fltk::Button*, void*);
    inline void cb_save5_i(fltk::Button*, void*);
    static void cb_save5(fltk::Button*, void*);
    inline void cb_ui_env_offset_i(fltk::ValueInput*, void*);
    static void cb_ui_env_offset(fltk::ValueInput*, void*);
public:
    fltk::ValueInput *ui_env_offset[2];
private:
    inline void cb_ui_env_offset1_i(fltk::ValueInput*, void*);
    static void cb_ui_env_offset1(fltk::ValueInput*, void*);
public:
    fltk::CheckButton *ui_draw_basis;
private:
    inline void cb_closest_i(fltk::Button*, void*);
    static void cb_closest(fltk::Button*, void*);
public:
  fltk::Window *ui_motion_edit_window;
private:
        inline void cb_ui_pt_i(fltk::ValueInput*, void*);
        static void cb_ui_pt(fltk::ValueInput*, void*);
        inline void cb_ui_pt1_i(fltk::ValueInput*, void*);
        static void cb_ui_pt1(fltk::ValueInput*, void*);
        inline void cb_ui_pt2_i(fltk::ValueInput*, void*);
        static void cb_ui_pt2(fltk::ValueInput*, void*);
        inline void cb_ui_pt3_i(fltk::ValueInput*, void*);
        static void cb_ui_pt3(fltk::ValueInput*, void*);
        inline void cb_ui_pt4_i(fltk::ValueInput*, void*);
        static void cb_ui_pt4(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *ui_pt[6];
private:
        inline void cb_ui_pt5_i(fltk::ValueInput*, void*);
        static void cb_ui_pt5(fltk::ValueInput*, void*);
public:
        fltk::CheckButton *ui_makeSample;
private:
        inline void cb_ui_makeSample_i(fltk::CheckButton*, void*);
        static void cb_ui_makeSample(fltk::CheckButton*, void*);
        inline void cb_rand_i(fltk::Button*, void*);
        static void cb_rand(fltk::Button*, void*);
public:
        fltk::ValueInput *ui_channelMax;
private:
        inline void cb_ui_channelMax_i(fltk::ValueInput*, void*);
        static void cb_ui_channelMax(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *ui_channelMin;
private:
        inline void cb_ui_channelMin_i(fltk::ValueInput*, void*);
        static void cb_ui_channelMin(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *ui_channelRest;
private:
        inline void cb_ui_channelRest_i(fltk::ValueInput*, void*);
        static void cb_ui_channelRest(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *ui_channelRep;
private:
        inline void cb_ui_channelRep_i(fltk::ValueInput*, void*);
        static void cb_ui_channelRep(fltk::ValueInput*, void*);
public:
        fltk::ValueInput *ui_channelVal;
private:
        inline void cb_ui_channelVal_i(fltk::ValueInput*, void*);
        static void cb_ui_channelVal(fltk::ValueInput*, void*);
public:
      fltk::ValueInput *ui_motion_duration;
private:
      inline void cb_ui_motion_duration_i(fltk::ValueInput*, void*);
      static void cb_ui_motion_duration(fltk::ValueInput*, void*);
public:
      fltk::CheckButton *ui_motion_loops;
private:
      inline void cb_ui_motion_loops_i(fltk::CheckButton*, void*);
      static void cb_ui_motion_loops(fltk::CheckButton*, void*);
public:
      fltk::CheckButton *ui_motion_resets;
private:
      inline void cb_ui_motion_resets_i(fltk::CheckButton*, void*);
      static void cb_ui_motion_resets(fltk::CheckButton*, void*);
public:
      fltk::ValueInput *ui_last_frame;
private:
      inline void cb_ui_last_frame_i(fltk::ValueInput*, void*);
      static void cb_ui_last_frame(fltk::ValueInput*, void*);
public:
      fltk::ValueInput *ui_first_frame;
private:
      inline void cb_ui_first_frame_i(fltk::ValueInput*, void*);
      static void cb_ui_first_frame(fltk::ValueInput*, void*);
      inline void cb_6_i(fltk::Button*, void*);
      static void cb_6(fltk::Button*, void*);
public:
  fltk::Window *ui_node_create_window;
    fltk::Input *ui_node_create_name;
      fltk::RadioButton *ui_empty_node;
      fltk::RadioButton *ui_trajectory_node;
      fltk::RadioButton *ui_feedback_node;
      fltk::RadioButton *ui_add_node;
      fltk::RadioButton *ui_modulate_node;
      fltk::RadioButton *ui_mult_node;
private:
    inline void cb_create2_i(fltk::Button*, void*);
    static void cb_create2(fltk::Button*, void*);
    inline void cb_cancel_i(fltk::Button*, void*);
    static void cb_cancel(fltk::Button*, void*);
public:
      fltk::Output *ui_node_create_serializable;
      fltk::Output *ui_node_create_serializable_type;
      fltk::Output *ui_node_create_parameter;
      fltk::Output *ui_node_create_dof;
      fltk::ValueOutput *ui_node_create_parameter_index;
    fltk::CheckButton *ui_constant_value;
  fltk::Window *ui_error_win;
    fltk::WordwrapOutput *ui_error_message;
private:
    inline void cb_ok_i(fltk::Button*, void*);
    static void cb_ok(fltk::Button*, void*);
};
#endif
