// generated by Fast Light User Interface Designer (fluid) version 2.1000

#ifndef util_serializable_editor_fluid_h
#define util_serializable_editor_fluid_h
#include "util_serializable_editor_events.h"
#include <fltk/Window.h>
#include <fltk/Group.h>
#include <fltk/Browser.h>
#include <fltk/Output.h>
#include <fltk/Choice.h>
#include <fltk/Input.h>
#include <fltk/Button.h>
#include <fltk/ValueSlider.h>
#include <fltk/ValueInput.h>
#include <fltk/RadioButton.h>
#include <fltk/CheckButton.h>

class SerializableEditorFluid  {
public:
  virtual void event ( SerializableEvent e )=0;
  SerializableEditorFluid();
  fltk::Window *ui_serializable_editor;
    fltk::Group *ui_parm_grp;
      fltk::Browser *ui_parm_list;
private:
      inline void cb_ui_parm_list_i(fltk::Browser*, void*);
      static void cb_ui_parm_list(fltk::Browser*, void*);
public:
      fltk::Output *ui_serializable_name;
      fltk::Output *ui_param_name_field;
        fltk::Group *ui_string_array_grp;
          fltk::Choice *ui_string_array_list;
          fltk::Input *ui_string_array_current;
private:
          inline void cb_set_i(fltk::Button*, void*);
          static void cb_set(fltk::Button*, void*);
public:
        fltk::Group *ui_int_grp;
          fltk::ValueSlider *ui_int_input;
private:
          inline void cb_ui_int_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_int_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueInput *ui_int_min;
private:
          inline void cb_ui_int_min_i(fltk::ValueInput*, void*);
          static void cb_ui_int_min(fltk::ValueInput*, void*);
public:
          fltk::ValueInput *ui_int_max;
private:
          inline void cb_ui_int_max_i(fltk::ValueInput*, void*);
          static void cb_ui_int_max(fltk::ValueInput*, void*);
public:
          fltk::Choice *ui_int_array_list;
        fltk::Group *ui_euler_grp;
          fltk::ValueSlider *ui_eul_x_input;
private:
          inline void cb_ui_eul_x_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_eul_x_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueSlider *ui_eul_y_input;
private:
          inline void cb_ui_eul_y_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_eul_y_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueSlider *ui_eul_z_input;
private:
          inline void cb_ui_eul_z_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_eul_z_input(fltk::ValueSlider*, void*);
          inline void cb_quat_i(fltk::Button*, void*);
          static void cb_quat(fltk::Button*, void*);
          inline void cb__i(fltk::Button*, void*);
          static void cb_(fltk::Button*, void*);
          inline void cb_1_i(fltk::Button*, void*);
          static void cb_1(fltk::Button*, void*);
          inline void cb_2_i(fltk::Button*, void*);
          static void cb_2(fltk::Button*, void*);
public:
        fltk::Group *ui_vector_grp;
          fltk::ValueSlider *ui_vx_input;
private:
          inline void cb_ui_vx_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_vx_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueSlider *ui_vy_input;
private:
          inline void cb_ui_vy_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_vy_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueSlider *ui_vz_input;
private:
          inline void cb_ui_vz_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_vz_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueInput *ui_vec_min;
private:
          inline void cb_ui_vec_min_i(fltk::ValueInput*, void*);
          static void cb_ui_vec_min(fltk::ValueInput*, void*);
public:
          fltk::ValueInput *ui_vec_max;
private:
          inline void cb_ui_vec_max_i(fltk::ValueInput*, void*);
          static void cb_ui_vec_max(fltk::ValueInput*, void*);
          inline void cb_3_i(fltk::Button*, void*);
          static void cb_3(fltk::Button*, void*);
          inline void cb_4_i(fltk::Button*, void*);
          static void cb_4(fltk::Button*, void*);
          inline void cb_5_i(fltk::Button*, void*);
          static void cb_5(fltk::Button*, void*);
public:
        fltk::Group *ui_float_grp;
          fltk::ValueSlider *ui_float_input;
private:
          inline void cb_ui_float_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_float_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueInput *ui_float_min;
private:
          inline void cb_ui_float_min_i(fltk::ValueInput*, void*);
          static void cb_ui_float_min(fltk::ValueInput*, void*);
public:
          fltk::ValueInput *ui_float_max;
private:
          inline void cb_ui_float_max_i(fltk::ValueInput*, void*);
          static void cb_ui_float_max(fltk::ValueInput*, void*);
public:
          fltk::Choice *ui_float_array_list;
private:
          inline void cb_ui_float_array_list_i(fltk::Choice*, void*);
          static void cb_ui_float_array_list(fltk::Choice*, void*);
          inline void cb_ch_i(fltk::Button*, void*);
          static void cb_ch(fltk::Button*, void*);
public:
        fltk::Group *ui_bool_grp;
          fltk::RadioButton *ui_bool_true;
private:
          inline void cb_ui_bool_true_i(fltk::RadioButton*, void*);
          static void cb_ui_bool_true(fltk::RadioButton*, void*);
public:
          fltk::RadioButton *ui_bool_false;
private:
          inline void cb_ui_bool_false_i(fltk::RadioButton*, void*);
          static void cb_ui_bool_false(fltk::RadioButton*, void*);
          inline void cb_6_i(fltk::Button*, void*);
          static void cb_6(fltk::Button*, void*);
public:
        fltk::Group *ui_string_grp;
          fltk::Input *ui_string_val;
private:
          inline void cb_ui_string_val_i(fltk::Input*, void*);
          static void cb_ui_string_val(fltk::Input*, void*);
public:
        fltk::Group *ui_quat_grp;
          fltk::ValueSlider *ui_qx_input;
private:
          inline void cb_ui_qx_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_qx_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueSlider *ui_qy_input;
private:
          inline void cb_ui_qy_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_qy_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueSlider *ui_qz_input;
private:
          inline void cb_ui_qz_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_qz_input(fltk::ValueSlider*, void*);
public:
          fltk::ValueSlider *ui_qw_input;
private:
          inline void cb_ui_qw_input_i(fltk::ValueSlider*, void*);
          static void cb_ui_qw_input(fltk::ValueSlider*, void*);
          inline void cb_eul_i(fltk::Button*, void*);
          static void cb_eul(fltk::Button*, void*);
public:
      fltk::CheckButton *ui_stream_parm;
      fltk::CheckButton *ui_save_parm;
private:
      inline void cb_ui_save_parm_i(fltk::CheckButton*, void*);
      static void cb_ui_save_parm(fltk::CheckButton*, void*);
        inline void cb_ui_type_choice_i(fltk::CheckButton*, void*);
        static void cb_ui_type_choice(fltk::CheckButton*, void*);
        inline void cb_ui_type_choice1_i(fltk::CheckButton*, void*);
        static void cb_ui_type_choice1(fltk::CheckButton*, void*);
        inline void cb_ui_type_choice2_i(fltk::CheckButton*, void*);
        static void cb_ui_type_choice2(fltk::CheckButton*, void*);
        inline void cb_ui_type_choice3_i(fltk::CheckButton*, void*);
        static void cb_ui_type_choice3(fltk::CheckButton*, void*);
        inline void cb_ui_type_choice4_i(fltk::CheckButton*, void*);
        static void cb_ui_type_choice4(fltk::CheckButton*, void*);
        inline void cb_ui_type_choice5_i(fltk::CheckButton*, void*);
        static void cb_ui_type_choice5(fltk::CheckButton*, void*);
public:
        fltk::CheckButton *ui_type_choice[7];
private:
        inline void cb_ui_type_choice6_i(fltk::CheckButton*, void*);
        static void cb_ui_type_choice6(fltk::CheckButton*, void*);
public:
      fltk::CheckButton *ui_make_traj;
private:
      inline void cb_ui_make_traj_i(fltk::CheckButton*, void*);
      static void cb_ui_make_traj(fltk::CheckButton*, void*);
};
#endif
