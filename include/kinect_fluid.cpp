// generated by Fast Light User Interface Designer (fluid) version 2.1000

#include "kinect_fluid.h"

inline void KinectFluid::cb_X_i(fltk::Item*, void*) {
  event ( evKinectQuit );
}
void KinectFluid::cb_X(fltk::Item* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_X_i(o,v);
}

inline void KinectFluid::cb_show_i(fltk::Item*, void*) {
  event(evShowHandWin);
}
void KinectFluid::cb_show(fltk::Item* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_show_i(o,v);
}

inline void KinectFluid::cb_refresh_i(fltk::Item*, void*) {
  event(evRefreshImageView);
}
void KinectFluid::cb_refresh(fltk::Item* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_refresh_i(o,v);
}

inline void KinectFluid::cb_show1_i(fltk::Item*, void*) {
  event(evShowImageWin);
}
void KinectFluid::cb_show1(fltk::Item* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_show1_i(o,v);
}

inline void KinectFluid::cb_show2_i(fltk::Item*, void*) {
  event(evShowGloveWin);
}
void KinectFluid::cb_show2(fltk::Item* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_show2_i(o,v);
}

inline void KinectFluid::cb_edit_i(fltk::Item*, void*) {
  event(evEditKinectManager);
}
void KinectFluid::cb_edit(fltk::Item* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_edit_i(o,v);
}

inline void KinectFluid::cb_save_i(fltk::Button*, void*) {
  event(evSaveImage);
}
void KinectFluid::cb_save(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save_i(o,v);
}

inline void KinectFluid::cb_convert_i(fltk::Button*, void*) {
  event(evConvertDatabase);
}
void KinectFluid::cb_convert(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_convert_i(o,v);
}

inline void KinectFluid::cb_text_i(fltk::Button*, void*) {
  event(evConvertToText);
}
void KinectFluid::cb_text(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_text_i(o,v);
}

inline void KinectFluid::cb_load_i(fltk::Button*, void*) {
  event(evLoadNet);
}
void KinectFluid::cb_load(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_load_i(o,v);
}

inline void KinectFluid::cb_ui_config_list_i(fltk::Browser*, void*) {
  event(evConfigListSelected);
}
void KinectFluid::cb_ui_config_list(fltk::Browser* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_config_list_i(o,v);
}

inline void KinectFluid::cb_save1_i(fltk::Button*, void*) {
  event(evSaveConfig);
}
void KinectFluid::cb_save1(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save1_i(o,v);
}

inline void KinectFluid::cb_capture_i(fltk::Button*, void*) {
  event(evCaptureHand);
}
void KinectFluid::cb_capture(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_capture_i(o,v);
}

inline void KinectFluid::cb_check_i(fltk::Button*, void*) {
  event(evCheckCloud);
}
void KinectFluid::cb_check(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_check_i(o,v);
}

inline void KinectFluid::cb_ui_cloud_list_i(fltk::Browser*, void*) {
  event(evChangeCloud);
}
void KinectFluid::cb_ui_cloud_list(fltk::Browser* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_cloud_list_i(o,v);
}

inline void KinectFluid::cb_save2_i(fltk::Button*, void*) {
  event(evSaveHandCloud);
}
void KinectFluid::cb_save2(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_save2_i(o,v);
}

inline void KinectFluid::cb_ui_rec_clouds_i(fltk::CheckButton*, void*) {
  event(evStartRecording);
}
void KinectFluid::cb_ui_rec_clouds(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_rec_clouds_i(o,v);
}

inline void KinectFluid::cb_filter_i(fltk::Button*, void*) {
  event(evFilterImage);
}
void KinectFluid::cb_filter(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_filter_i(o,v);
}

inline void KinectFluid::cb_ui_all_points_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_all_points(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_all_points_i(o,v);
}

inline void KinectFluid::cb_ui_use_color_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_use_color(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_use_color_i(o,v);
}

inline void KinectFluid::cb_ui_use_depth_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_use_depth(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_use_depth_i(o,v);
}

inline void KinectFluid::cb_ui_draw_mesh_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_draw_mesh(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_draw_mesh_i(o,v);
}

inline void KinectFluid::cb_ui_draw_markers_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_draw_markers(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_draw_markers_i(o,v);
}

inline void KinectFluid::cb_ui_draw_output_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_draw_output(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_draw_output_i(o,v);
}

inline void KinectFluid::cb_ui_hand_var_i(fltk::ValueSlider*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_hand_var(fltk::ValueSlider* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_hand_var_i(o,v);
}

inline void KinectFluid::cb_ui_hand_color_var_i(fltk::ValueSlider*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_hand_color_var(fltk::ValueSlider* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_hand_color_var_i(o,v);
}

inline void KinectFluid::cb_ui_hand_proximity_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_hand_proximity(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_hand_proximity_i(o,v);
}

inline void KinectFluid::cb_ui_hand_color_proximity_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_hand_color_proximity(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_hand_color_proximity_i(o,v);
}

inline void KinectFluid::cb_ui_range_i(fltk::ValueSlider*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_range(fltk::ValueSlider* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_range_i(o,v);
}

inline void KinectFluid::cb_ui_range1_i(fltk::ValueSlider*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_range1(fltk::ValueSlider* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_range1_i(o,v);
}

inline void KinectFluid::cb_ui_range2_i(fltk::ValueSlider*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_range2(fltk::ValueSlider* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_range2_i(o,v);
}

inline void KinectFluid::cb_ui_use_clip_box_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_use_clip_box(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_use_clip_box_i(o,v);
}

inline void KinectFluid::cb_ui_clip_box_vis_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_clip_box_vis(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_clip_box_vis_i(o,v);
}

inline void KinectFluid::cb_ui_range3_i(fltk::ValueSlider*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_range3(fltk::ValueSlider* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_range3_i(o,v);
}

inline void KinectFluid::cb_ui_marker_list_i(fltk::Browser*, void*) {
  event(evChangeMarker);
}
void KinectFluid::cb_ui_marker_list(fltk::Browser* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_marker_list_i(o,v);
}

inline void KinectFluid::cb_ui_marker_type_i(fltk::Choice*, void*) {
  event(evChangeType);
}
void KinectFluid::cb_ui_marker_type(fltk::Choice* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_marker_type_i(o,v);
}

inline void KinectFluid::cb_ui_track_colors_i(fltk::CheckButton*, void*) {
  event(evRangeAdjust);
}
void KinectFluid::cb_ui_track_colors(fltk::CheckButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_track_colors_i(o,v);
}

inline void KinectFluid::cb_del_i(fltk::Button*, void*) {
  event(evDeleteLastFinger);
}
void KinectFluid::cb_del(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_del_i(o,v);
}

inline void KinectFluid::cb_clear_i(fltk::Button*, void*) {
  event(evClearFinger);
}
void KinectFluid::cb_clear(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_clear_i(o,v);
}

inline void KinectFluid::cb_cal_i(fltk::Button*, void*) {
  event(evCalibrate);
}
void KinectFluid::cb_cal(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_cal_i(o,v);
}

inline void KinectFluid::cb_ui_finger_radius_i(fltk::ValueInput*, void*) {
  event(evFingerRadiusAdjust);
}
void KinectFluid::cb_ui_finger_radius(fltk::ValueInput* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_finger_radius_i(o,v);
}

inline void KinectFluid::cb_ui_kinect_i(fltk::ValueInput*, void*) {
  event(evTrans);
}
void KinectFluid::cb_ui_kinect(fltk::ValueInput* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_kinect_i(o,v);
}

inline void KinectFluid::cb_ui_kinect1_i(fltk::ValueInput*, void*) {
  event(evTrans);
}
void KinectFluid::cb_ui_kinect1(fltk::ValueInput* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_kinect1_i(o,v);
}

inline void KinectFluid::cb_ui_kinect2_i(fltk::ValueInput*, void*) {
  event(evTrans);
}
void KinectFluid::cb_ui_kinect2(fltk::ValueInput* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_kinect2_i(o,v);
}

inline void KinectFluid::cb_ui_kinect3_i(fltk::ValueInput*, void*) {
  event(evTrans);
}
void KinectFluid::cb_ui_kinect3(fltk::ValueInput* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_kinect3_i(o,v);
}

inline void KinectFluid::cb_ui_kinect4_i(fltk::ValueInput*, void*) {
  event(evTrans);
}
void KinectFluid::cb_ui_kinect4(fltk::ValueInput* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_kinect4_i(o,v);
}

inline void KinectFluid::cb_ui_kinect5_i(fltk::ValueInput*, void*) {
  event(evTrans);
}
void KinectFluid::cb_ui_kinect5(fltk::ValueInput* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_ui_kinect5_i(o,v);
}

inline void KinectFluid::cb_set_i(fltk::Button*, void*) {
  event(evAngle);
}
void KinectFluid::cb_set(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->parent()->parent()->parent()->parent()->user_data()))->cb_set_i(o,v);
}

inline void KinectFluid::cb_ui_kinect_active_i(fltk::LightButton*, void*) {
  event(evKinectActive);
}
void KinectFluid::cb_ui_kinect_active(fltk::LightButton* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->parent()->user_data()))->cb_ui_kinect_active_i(o,v);
}

inline void KinectFluid::cb_make_i(fltk::Button*, void*) {
  event(evMakePoints);
}
void KinectFluid::cb_make(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->user_data()))->cb_make_i(o,v);
}

inline void KinectFluid::cb_skel_i(fltk::Button*, void*) {
  event(evLoadSkelWin);
}
void KinectFluid::cb_skel(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->user_data()))->cb_skel_i(o,v);
}

inline void KinectFluid::cb_delete_i(fltk::Button*, void*) {
  event(evDeletePoints);
}
void KinectFluid::cb_delete(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->user_data()))->cb_delete_i(o,v);
}

inline void KinectFluid::cb_capture1_i(fltk::Button*, void*) {
  event(evCaptureHand);
}
void KinectFluid::cb_capture1(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->user_data()))->cb_capture1_i(o,v);
}

inline void KinectFluid::cb_save3_i(fltk::Button*, void*) {
  event(evSaveSynthCloud);
}
void KinectFluid::cb_save3(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->user_data()))->cb_save3_i(o,v);
}

inline void KinectFluid::cb_depth_i(fltk::Button*, void*) {
  event(evToggleDepthMode);
}
void KinectFluid::cb_depth(fltk::Button* o, void* v) {
  ((KinectFluid*)(o->parent()->parent()->user_data()))->cb_depth_i(o,v);
}

KinectFluid::KinectFluid() {
  fltk::Window* w;
   {fltk::Window* o = ui_window = new fltk::Window(845, 561, "Hand Tracker");
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::TiledGroup* o = new fltk::TiledGroup(0, 0, 845, 561);
      o->begin();
       {KinectViewer* o = ui_viewer = new KinectViewer(245, 0, 600, 560);
      }
       {fltk::Group* o = ui_main_group = new fltk::Group(0, 0, 255, 560);
        o->set_vertical();
        o->box(fltk::FLAT_BOX);
        o->begin();
         {fltk::MenuBar* o = new fltk::MenuBar(0, 0, 135, 20);
          o->shortcut(0xffe9);
          o->begin();
           {fltk::Item* o = new fltk::Item("X");
            o->labelfont(fltk::HELVETICA_BOLD);
            o->textfont(fltk::HELVETICA_BOLD);
            o->color((fltk::Color)0xece9d800);
            o->textcolor((fltk::Color)0xd40d2900);
            o->selection_textcolor((fltk::Color)0xff122b00);
            o->callback((fltk::Callback*)cb_X);
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("draw");
            o->color((fltk::Color)0xece9d800);
            o->begin();
             {fltk::Item* o = new fltk::Item("show hand win");
              o->callback((fltk::Callback*)cb_show);
            }
             {fltk::Item* o = new fltk::Item("refresh image viewer");
              o->callback((fltk::Callback*)cb_refresh);
            }
             {fltk::Item* o = new fltk::Item("show image view window");
              o->callback((fltk::Callback*)cb_show1);
            }
             {fltk::Item* o = new fltk::Item("show glove win");
              o->callback((fltk::Callback*)cb_show2);
            }
            o->end();
          }
           {fltk::ItemGroup* o = new fltk::ItemGroup("edit");
            o->color((fltk::Color)0xece9d800);
            o->begin();
             {fltk::Item* o = new fltk::Item("edit manager");
              o->callback((fltk::Callback*)cb_edit);
            }
            o->end();
          }
          o->end();
        }
         {fltk::Group* o = new fltk::Group(0, 20, 250, 540);
          o->set_vertical();
          o->begin();
           {fltk::TabGroup* o = ui_main_tab = new fltk::TabGroup(0, 0, 245, 540);
            o->set_vertical();
            o->box(fltk::FLAT_BOX);
            o->begin();
             {fltk::Group* o = new fltk::Group(5, 30, 240, 490, "image");
              o->set_vertical();
              o->begin();
               {fltk::Group* o = new fltk::Group(0, 0, 240, 190, "image");
                o->box(fltk::DOWN_BOX);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->begin();
                 {fltk::Button* o = new fltk::Button(20, 20, 45, 25, "save ");
                  o->callback((fltk::Callback*)cb_save);
                }
                 {fltk::ValueInput* o = ui_image_number = new fltk::ValueInput(50, 80, 75, 25, "num");
                  o->maximum(10000);
                  o->step(1);
                  o->value(1);
                }
                ui_image_set_name = new fltk::Input(80, 105, 120, 20, "set name");
                ui_stream_images = new fltk::CheckButton(75, 20, 25, 25, "stream");
                 {fltk::ValueInput* o = ui_image_w = new fltk::ValueInput(85, 125, 40, 25, "w");
                  o->maximum(128);
                  o->step(1);
                  o->value(16);
                }
                 {fltk::ValueInput* o = ui_image_h = new fltk::ValueInput(150, 125, 40, 25, "h");
                  o->maximum(128);
                  o->step(1);
                  o->value(16);
                }
                 {fltk::Group* o = new fltk::Group(14, 46, 200, 30);
                  o->box(fltk::DOWN_BOX);
                  o->begin();
                   {fltk::RadioButton* o = ui_embed_jnt_angles = new fltk::RadioButton(10, 10, 20, 20, "angles");
                    o->set_vertical();
                    o->align(fltk::ALIGN_RIGHT);
                  }
                   {fltk::RadioButton* o = ui_embed_pose_interp = new fltk::RadioButton(80, 10, 20, 20, "pose");
                    o->set_flag(fltk::STATE);
                    o->align(fltk::ALIGN_RIGHT);
                  }
                   {fltk::RadioButton* o = ui_embed_manual_val = new fltk::RadioButton(140, 10, 20, 20, "manual");
                    o->align(fltk::ALIGN_RIGHT);
                  }
                  o->end();
                }
                 {fltk::Button* o = new fltk::Button(20, 125, 45, 25, "convert");
                  o->callback((fltk::Callback*)cb_convert);
                }
                 {fltk::Button* o = new fltk::Button(155, 20, 55, 25, "text");
                  o->callback((fltk::Callback*)cb_text);
                }
                 {fltk::ValueInput* o = ui_pose_number = new fltk::ValueInput(165, 80, 45, 25, "pose");
                  o->minimum(1);
                  o->maximum(10);
                  o->step(1);
                  o->value(1);
                }
                 {fltk::CheckButton* o = ui_preserve_aspect_ratio = new fltk::CheckButton(30, 155, 25, 25, "preserve aspect ratio");
                  o->set_flag(fltk::STATE);
                }
                o->end();
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(10, 25, 220, 515, "net");
              o->set_vertical();
              o->hide();
              o->begin();
              ui_neural_net_cfg = new fltk::Input(65, 25, 90, 25, "config file");
               {fltk::Button* o = new fltk::Button(160, 25, 45, 25, "load");
                o->callback((fltk::Callback*)cb_load);
              }
              ui_stream_net_output = new fltk::CheckButton(25, 60, 25, 25, "stream output");
              ui_net_parms[0] = new fltk::ValueOutput(85, 100, 65, 25, "W");
              ui_net_parms[1] = new fltk::ValueOutput(85, 130, 65, 25, "H");
              ui_net_parms[2] = new fltk::ValueOutput(85, 155, 65, 25, "DIN");
              ui_net_parms[3] = new fltk::ValueOutput(85, 185, 65, 25, "DOUT");
              ui_net_parms[4] = new fltk::ValueOutput(85, 210, 65, 25, "NTRAIN");
               {fltk::ProgressBar* o = ui_net_output = new fltk::ProgressBar(5, 265, 205, 35, "output");
                o->align(fltk::ALIGN_TOP);
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(5, 25, 240, 515, "data");
              o->set_vertical();
              o->hide();
              o->begin();
               {fltk::Group* o = new fltk::Group(0, 10, 225, 135, "config");
                o->box(fltk::DOWN_BOX);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->begin();
                 {fltk::Browser* o = ui_config_list = new fltk::Browser(0, 20, 225, 90);
                  o->callback((fltk::Callback*)cb_ui_config_list);
                }
                 {fltk::Button* o = new fltk::Button(0, 110, 45, 25, "save ");
                  o->callback((fltk::Callback*)cb_save1);
                }
                o->end();
              }
               {fltk::Group* o = new fltk::Group(0, 145, 220, 195, "point clouds");
                o->box(fltk::DOWN_BOX);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->begin();
                 {fltk::Button* o = new fltk::Button(45, 110, 50, 20, "capture ");
                  o->callback((fltk::Callback*)cb_capture);
                  o->tooltip("capture the current point cloud for the hand from the kinect");
                }
                 {fltk::ValueInput* o = ui_cloud_val = new fltk::ValueInput(140, 110, 40, 20);
                  o->tooltip("the value associated with the pointcloud to save");
                }
                 {fltk::Button* o = new fltk::Button(95, 110, 45, 20, "check ");
                  o->callback((fltk::Callback*)cb_check);
                  o->tooltip("find thew closest cloud in the database to the current one");
                }
                 {fltk::Browser* o = ui_cloud_list = new fltk::Browser(0, 20, 220, 90);
                  o->callback((fltk::Callback*)cb_ui_cloud_list);
                }
                 {fltk::Button* o = new fltk::Button(0, 110, 45, 20, "save");
                  o->callback((fltk::Callback*)cb_save2);
                  o->tooltip("save the currently selected cloud to a file in pointclouds folder");
                }
                 {fltk::CheckButton* o = ui_rec_clouds = new fltk::CheckButton(180, 110, 40, 20, "rec");
                  o->callback((fltk::Callback*)cb_ui_rec_clouds);
                }
                 {fltk::Button* o = new fltk::Button(0, 130, 45, 20, "filter");
                  o->callback((fltk::Callback*)cb_filter);
                  o->tooltip("save the currently selected cloud to a file in pointclouds folder");
                }
                 {fltk::ValueInput* o = ui_sigd = new fltk::ValueInput(30, 150, 25, 25, "sigd");
                  o->maximum(50);
                  o->step(0.01);
                  o->value(20);
                  o->tooltip("spatial sigma");
                }
                 {fltk::ValueInput* o = ui_sigr = new fltk::ValueInput(80, 150, 25, 25, "sigr");
                  o->maximum(50);
                  o->step(0.01);
                  o->value(20);
                  o->tooltip("spatial sigma");
                }
                 {fltk::ValueInput* o = ui_hh = new fltk::ValueInput(130, 150, 30, 25, "hh");
                  o->maximum(20);
                  o->step(1);
                  o->value(5);
                  o->tooltip("half height");
                }
                 {fltk::ValueInput* o = ui_hw = new fltk::ValueInput(180, 150, 30, 25, "hw");
                  o->maximum(20);
                  o->step(1);
                  o->value(5);
                  o->tooltip("half height");
                }
                o->end();
              }
              o->end();
            }
             {fltk::Group* o = new fltk::Group(0, 20, 240, 510, "filters");
              o->set_vertical();
              o->labelfont(fltk::HELVETICA_BOLD);
              o->labelsize(11);
              o->textsize(11);
              o->hide();
              o->begin();
               {fltk::Group* o = new fltk::Group(0, 5, 240, 490);
                o->set_vertical();
                o->box(fltk::DOWN_BOX);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->begin();
                 {fltk::Group* o = new fltk::Group(5, 5, 235, 70);
                  o->box(fltk::DOWN_BOX);
                  o->begin();
                   {fltk::CheckButton* o = ui_all_points = new fltk::CheckButton(10, 10, 25, 25, "all");
                    o->callback((fltk::Callback*)cb_ui_all_points);
                    o->tooltip("override all filters to display every captured points\n");
                  }
                   {fltk::CheckButton* o = ui_use_color = new fltk::CheckButton(10, 23, 25, 25, "color");
                    o->set_flag(fltk::STATE);
                    o->callback((fltk::Callback*)cb_ui_use_color);
                    o->tooltip("use the color stream from the kinect\n");
                  }
                   {fltk::CheckButton* o = ui_use_depth = new fltk::CheckButton(10, 35, 25, 25, "depth");
                    o->set_flag(fltk::STATE);
                    o->callback((fltk::Callback*)cb_ui_use_depth);
                    o->tooltip("use the depth stream from the kinect");
                  }
                   {fltk::CheckButton* o = ui_draw_mesh = new fltk::CheckButton(115, 10, 25, 25, "draw mesh");
                    o->set_flag(fltk::STATE);
                    o->callback((fltk::Callback*)cb_ui_draw_mesh);
                    o->tooltip("modify SnColorSurf");
                  }
                   {fltk::CheckButton* o = ui_draw_markers = new fltk::CheckButton(115, 23, 25, 25, "draw markers");
                    o->callback((fltk::Callback*)cb_ui_draw_markers);
                  }
                   {fltk::CheckButton* o = ui_draw_output = new fltk::CheckButton(115, 35, 25, 25, "draw output");
                    o->set_flag(fltk::STATE);
                    o->callback((fltk::Callback*)cb_ui_draw_output);
                  }
                  o->end();
                }
                 {fltk::Group* o = new fltk::Group(5, 75, 235, 95, "hand filter");
                  o->box(fltk::DOWN_BOX);
                  o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                  o->begin();
                   {fltk::ValueSlider* o = ui_hand_var = new fltk::ValueSlider(60, 20, 160, 25, "prox");
                    o->value(0.05);
                    o->callback((fltk::Callback*)cb_ui_hand_var);
                    o->align(fltk::ALIGN_LEFT);
                  }
                   {fltk::ValueSlider* o = ui_hand_color_var = new fltk::ValueSlider(60, 45, 160, 25, "col var");
                    o->maximum(200);
                    o->step(1);
                    o->value(20);
                    o->callback((fltk::Callback*)cb_ui_hand_color_var);
                    o->align(fltk::ALIGN_LEFT);
                  }
                   {fltk::CheckButton* o = ui_hand_proximity = new fltk::CheckButton(40, 70, 25, 25, "prox");
                    o->callback((fltk::Callback*)cb_ui_hand_proximity);
                  }
                   {fltk::CheckButton* o = ui_hand_color_proximity = new fltk::CheckButton(120, 70, 25, 25, "col prox");
                    o->callback((fltk::Callback*)cb_ui_hand_color_proximity);
                  }
                  o->end();
                }
                 {fltk::Group* o = new fltk::Group(5, 350, 230, 100, "clipping");
                  o->box(fltk::DOWN_BOX);
                  o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                  o->begin();
                   {fltk::ValueSlider* o = ui_range[0] = new fltk::ValueSlider(50, 25, 100, 15, "Min");
                    o->callback((fltk::Callback*)cb_ui_range);
                    o->align(fltk::ALIGN_LEFT);
                  }
                   {fltk::ValueSlider* o = ui_range[1] = new fltk::ValueSlider(50, 40, 100, 15, "Max");
                    o->maximum(20);
                    o->value(200);
                    o->callback((fltk::Callback*)cb_ui_range1);
                    o->align(fltk::ALIGN_LEFT);
                  }
                   {fltk::ValueSlider* o = ui_range[3] = new fltk::ValueSlider(50, 55, 100, 15, "clip size");
                    o->maximum(2);
                    o->value(0.2);
                    o->callback((fltk::Callback*)cb_ui_range2);
                    o->align(fltk::ALIGN_LEFT);
                  }
                   {fltk::CheckButton* o = ui_use_clip_box = new fltk::CheckButton(155, 25, 25, 25, "clip box");
                    o->set_flag(fltk::STATE);
                    o->callback((fltk::Callback*)cb_ui_use_clip_box);
                    o->tooltip("use the clip box for filtering points otherwise use the min and max z range");
                  }
                   {fltk::CheckButton* o = ui_clip_box_vis = new fltk::CheckButton(155, 45, 25, 25, "vis");
                    o->set_flag(fltk::STATE);
                    o->callback((fltk::Callback*)cb_ui_clip_box_vis);
                  }
                   {fltk::ValueSlider* o = ui_range[2] = new fltk::ValueSlider(50, 70, 100, 15, "Cutoff");
                    o->maximum(10);
                    o->step(0.0001);
                    o->value(10);
                    o->callback((fltk::Callback*)cb_ui_range3);
                    o->align(fltk::ALIGN_LEFT);
                  }
                  ui_set_clip_box = new fltk::LightButton(155, 65, 55, 20, "pick");
                  o->end();
                }
                 {fltk::Group* o = new fltk::Group(5, 175, 235, 165, "markers");
                  o->box(fltk::DOWN_BOX);
                  o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                  o->begin();
                  ui_make_finger = new fltk::LightButton(10, 20, 65, 20, "make");
                   {fltk::Browser* o = ui_marker_list = new fltk::Browser(0, 40, 230, 50);
                    o->callback((fltk::Callback*)cb_ui_marker_list);
                  }
                   {fltk::Choice* o = ui_marker_type = new fltk::Choice(80, 20, 70, 20);
                    o->callback((fltk::Callback*)cb_ui_marker_type);
                  }
                   {fltk::CheckButton* o = ui_track_colors = new fltk::CheckButton(160, 90, 25, 25, "update");
                    o->set_flag(fltk::STATE);
                    o->callback((fltk::Callback*)cb_ui_track_colors);
                    o->tooltip("update the markers");
                  }
                   {fltk::Button* o = new fltk::Button(65, 90, 35, 25, "del");
                    o->callback((fltk::Callback*)cb_del);
                  }
                   {fltk::Button* o = new fltk::Button(5, 90, 30, 25, "clear");
                    o->callback((fltk::Callback*)cb_clear);
                  }
                   {fltk::Button* o = new fltk::Button(35, 90, 30, 25, "cal");
                    o->callback((fltk::Callback*)cb_cal);
                  }
                   {fltk::ValueSlider* o = ui_color_variance = new fltk::ValueSlider(130, 140, 100, 20, "var");
                    o->maximum(100);
                    o->step(1);
                    o->value(20);
                    o->align(fltk::ALIGN_LEFT);
                  }
                  ui_max_v = new fltk::ValueInput(55, 120, 25, 20, "maxV");
                  ui_sample = new fltk::ValueInput(130, 120, 25, 20, "sample");
                   {fltk::ValueInput* o = ui_finger_radius = new fltk::ValueInput(55, 135, 25, 20, "radius");
                    o->callback((fltk::Callback*)cb_ui_finger_radius);
                  }
                  o->end();
                }
                o->end();
              }
              o->end();
              fltk::Group::current()->resizable(o);
            }
             {fltk::Group* o = new fltk::Group(5, 30, 240, 475, "old");
              o->set_vertical();
              o->hide();
              o->begin();
              ui_fps = new fltk::CheckButton(75, 350, 25, 25, "fps");
              ui_fps_label = new fltk::Output(115, 350, 65, 25);
               {fltk::Choice* o = ui_kinect_selected = new fltk::Choice(90, 15, 135, 25, "kinect");
              }
               {fltk::ValueInput* o = ui_kinect[0] = new fltk::ValueInput(80, 225, 45, 25, "X");
                o->minimum(-2);
                o->maximum(2);
                o->step(0.001);
                o->callback((fltk::Callback*)cb_ui_kinect);
              }
               {fltk::ValueInput* o = ui_kinect[1] = new fltk::ValueInput(80, 250, 45, 25, "Y");
                o->minimum(-2);
                o->maximum(2);
                o->step(0.01);
                o->callback((fltk::Callback*)cb_ui_kinect1);
              }
               {fltk::ValueInput* o = ui_kinect[2] = new fltk::ValueInput(80, 275, 45, 25, "Z");
                o->minimum(-2);
                o->maximum(2);
                o->step(0.01);
                o->callback((fltk::Callback*)cb_ui_kinect2);
              }
               {fltk::ValueInput* o = ui_kinect[3] = new fltk::ValueInput(155, 225, 45, 25, "RX");
                o->minimum(-180);
                o->maximum(180);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_kinect3);
              }
               {fltk::ValueInput* o = ui_kinect[4] = new fltk::ValueInput(155, 250, 45, 25, "RY");
                o->minimum(-180);
                o->maximum(180);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_kinect4);
              }
               {fltk::ValueInput* o = ui_kinect[5] = new fltk::ValueInput(155, 275, 45, 25, "RZ");
                o->minimum(-180);
                o->maximum(180);
                o->step(1);
                o->callback((fltk::Callback*)cb_ui_kinect5);
              }
               {fltk::Group* o = new fltk::Group(5, 75, 235, 140, "marker");
                o->box(fltk::DOWN_BOX);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
              }
               {fltk::Group* o = new fltk::Group(5, 390, 210, 50, "kinect");
                o->box(fltk::DOWN_BOX);
                o->align(fltk::ALIGN_TOP|fltk::ALIGN_INSIDE);
                o->begin();
                 {fltk::ValueSlider* o = ui_angle = new fltk::ValueSlider(45, 25, 125, 25, "angle");
                  o->minimum(-28);
                  o->maximum(28);
                  o->step(1);
                  o->align(fltk::ALIGN_LEFT);
                }
                 {fltk::Button* o = new fltk::Button(170, 25, 40, 25, "set");
                  o->callback((fltk::Callback*)cb_set);
                }
                o->end();
              }
              o->end();
            }
            o->end();
            fltk::Group::current()->resizable(o);
          }
           {fltk::Group* o = ui_message = new fltk::Group(0, 520, 245, 20, "text");
            o->box(fltk::FLAT_BOX);
            o->labelfont(fltk::HELVETICA_BOLD);
            o->textfont(fltk::HELVETICA_BOLD);
            o->textcolor((fltk::Color)0xa7000000);
            o->labelcolor((fltk::Color)0xbd000000);
            o->labelsize(11);
            o->textsize(11);
            o->align(fltk::ALIGN_INSIDE);
          }
          o->end();
          fltk::Group::current()->resizable(o);
        }
         {fltk::LightButton* o = ui_kinect_active = new fltk::LightButton(135, 0, 100, 20, "kinect active");
          o->callback((fltk::Callback*)cb_ui_kinect_active);
        }
        o->end();
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_hand_window = new fltk::Window(338, 375, "Hand Tracker");
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::TiledGroup* o = new fltk::TiledGroup(0, 0, 338, 375);
      o->begin();
       {HandViewer* o = ui_hand_viewer = new HandViewer(5, 0, 320, 320);
        o->set_vertical();
        o->box(fltk::DOWN_BOX);
      }
       {fltk::Button* o = new fltk::Button(55, 325, 85, 25, "make  points");
        o->callback((fltk::Callback*)cb_make);
      }
       {fltk::Button* o = new fltk::Button(140, 325, 50, 25, "skel win");
        o->callback((fltk::Callback*)cb_skel);
      }
       {fltk::Button* o = new fltk::Button(55, 350, 85, 20, "delete  points");
        o->callback((fltk::Callback*)cb_delete);
      }
       {fltk::Button* o = new fltk::Button(190, 325, 120, 25, "capture hand cloud");
        o->callback((fltk::Callback*)cb_capture1);
      }
       {fltk::Button* o = new fltk::Button(140, 350, 90, 20, "save synth cloud");
        o->callback((fltk::Callback*)cb_save3);
      }
       {fltk::Button* o = new fltk::Button(230, 350, 90, 20, "depth mode");
        o->callback((fltk::Callback*)cb_depth);
      }
      o->end();
    }
    o->end();
    o->resizable(o);
  }
   {fltk::Window* o = ui_depth_window = new fltk::Window(1046, 408, "Hand Tracker");
    w = o;
    o->set_vertical();
    o->shortcut(0xff1b);
    o->user_data((void*)(this));
    o->begin();
     {fltk::TiledGroup* o = new fltk::TiledGroup(0, 0, 1046, 408);
      o->begin();
       {ImageViewer* o = ui_real_depth_viewer = new ImageViewer(5, 20, 320, 320, "Real Depth");
        o->box(fltk::DOWN_BOX);
      }
       {ImageViewer* o = ui_synth_depth_viewer = new ImageViewer(330, 20, 320, 320, "Synth Depth");
        o->box(fltk::DOWN_BOX);
      }
      ui_kinect_stream = new fltk::CheckButton(50, 345, 25, 25, "stream");
       {ImageViewer* o = ui_diff_viewer = new ImageViewer(650, 20, 320, 320, "difference");
        o->box(fltk::DOWN_BOX);
      }
      ui_synth_stream = new fltk::CheckButton(445, 347, 40, 28, "stream");
      ui_diff_stream = new fltk::CheckButton(700, 352, 40, 28, "stream");
       {fltk::ValueOutput* o = ui_diff_val = new fltk::ValueOutput(865, 357, 95, 18, "value:");
        o->maximum(20000);
        o->step(1);
      }
      ui_kinect_image_scale = new fltk::CheckButton(130, 345, 25, 25, "scale");
      ui_diff_image_scale = new fltk::CheckButton(765, 352, 40, 28, "scale");
       {fltk::CheckButton* o = ui_check_stream = new fltk::CheckButton(355, 347, 40, 28, "check");
        o->tooltip("automatically find the closest hand in the database");
      }
      ui_kinect_image_filter = new fltk::CheckButton(200, 345, 25, 25, "filter");
      o->end();
    }
    ui_synth_image_scale = new fltk::CheckButton(510, 350, 25, 25, "scale");
    o->end();
    o->resizable(o);
  }
}
